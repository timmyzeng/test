<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[位运算实现Add]]></title>
    <url>%2F2018%2F01%2F28%2F%E4%BD%8D%E8%BF%90%E7%AE%97%E5%AE%9E%E7%8E%B0Add%2F</url>
    <content type="text"><![CDATA[题目：实现一个Add函数，让两个整数相加，不能够使用+-*/、++、-- 思路： 正常实现两个数相加，有两个步骤，第一将两个数对应位相加，第二相加之后有进位，将进位值与对应位相加。举个例子，15+5=20先将位进行相加，不进行进位，得到10，再将进位加上，个位没有进位，十位进1，得到20。 题目要求不能使用+-*/，所以想到了位运算。15的二进制是1111，5的二进制是0101。根据上面的思路，我们先进行不进位相加，得到1010。(这个运算方式正好对应^)然后将进位加上(只求进位的运算正好对应&amp;再左移一位)，例子中只有第四位、第二位数值有进位值。得到10100，这个值就是20。 代码如下123456789101112131415161718192021222324//1、递归实现，每次将不进位相加的值赋给a，将计算出来的进位值赋给b，递归进行两者的分步相加，直到进位值`b=0`，返回a。long long Add( int a, int b )&#123; if( b == 0 ) return a; int sum = a^b; b = (a&amp;b)&lt;&lt;1; a = sum; return Add( a, b );&#125;int main()&#123; system( "clear" ); cout &lt;&lt; Add(3, 7) &lt;&lt; endl; //2、同时可以用迭代实现(非函数)，思路一样，进位值b最后肯定会等于0，因为总有进位结束的时候。 int a = 49; int b = 4; while( b != 0 )&#123; int sum = a^b; b = (a&amp;b)&lt;&lt;1; a = sum; &#125; cout &lt;&lt; a &lt;&lt; endl; return 0;&#125;]]></content>
      <categories>
        <category>practice</category>
        <category>C/C++</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[1+2+……+n的特殊求法]]></title>
    <url>%2F2018%2F01%2F27%2F1-%E2%80%A6%E2%80%A6-n%E7%9A%84%E7%89%B9%E6%AE%8A%E6%B1%82%E6%B3%95%2F</url>
    <content type="text"><![CDATA[题目：求1+2+3+…+n，要求不能使用乘除法，for,while，if,else,switch,case等关键字以及条件判断语句。 自己思考想到了一种方法，递归的思路，但是判断终止的条件不是if，利用了&amp;&amp;的性质，当前操作数为假的时候，不再进行后操作数的运算。然后在网上查阅，得到了其他的做法。 更新：18.1.28发现了一个时间复杂度为O(1)的做法，这种做法只能在GCC、C99标准中使用，因为它使用了柔性数组，这种数组的长度的可变的，不需要用常量定义。柔性数组 123456789101112class Solution&#123; public: int Sum_Solution( int n )&#123; bool a[n][n+1]; return sizeof(a)&gt;&gt;1; &#125;&#125;;int main()&#123; Solution s; cout &lt;&lt; s.Sum_Solution(10) &lt;&lt; endl; return 0;&#125; 原文： 利用&amp;&amp;操作符，|| 也一样的做法。思路：当result = 0 的时候，&amp;&amp;不再判断右操作数，递归停止。 123456789int sum( int n )&#123; int result = n; result &amp;&amp; (result += sum(n-1)); return result;&#125;int main()&#123; cout &lt;&lt; sum(100) &lt;&lt; endl; return 0;&#125; 利用构造函数以及静态成员变量思路：构造N次对象，每次对静态变量sum++，对n赋值。利用静态变量对所有同类对象有效的特点。 1234567891011121314151617181920212223242526272829303132333435class tmp&#123;public: //构造 tmp( )&#123; ++n; sum += n; &#125; //初始化 void static init()&#123; n = 0; sum = 0; &#125; //获得sum int static getsum()&#123; return sum; &#125;private: static int n; static int sum;&#125;;int tmp::n = 0;int tmp::sum = 0;//运行的函数int count(int n)&#123; tmp::init(); tmp* a = new tmp[n]; delete[] a; a = NULL; tmp::getsum();&#125;int main()&#123; cout &lt;&lt; count(100) &lt;&lt; endl; return 0;&#125; 利用虚函数、继承和函数指针思路： 定义两个类，A是基类，B是子类。 定义一个A* Array[2],其中Array[0]存放A对象的地址，Array[1]存放B对象的地址。 调用函数Sum中调用Sum的递归。同时对变量n两次取反Array[!!n]-&gt;Sum(n-1)+n,这样当n不为0的时候，得到bool值1。Array[!!n] = Array[1] 当n=0调用基类A的sum。充分利用虚函数参数与类型有关的性质。 12345678910111213141516171819202122232425262728293031323334353637383940414243//1、虚函数#include &lt;iostream&gt;using namespace std;class A;A* Array[2];class A&#123;public: virtual int Sum( int n )&#123; return 0; &#125;&#125;;class B:public A&#123;public: virtual int Sum( int n )&#123; //当 n != 0, !!n = 1 return Array[!!n]-&gt;Sum(n-1)+n; &#125;&#125;;int Sum2( int n )&#123; A a; B b; Array[0] = &amp;a; Array[1] = &amp;b; //调用虚函数 int value = Array[1]-&gt;Sum(n); return value;&#125;int main()&#123; cout &lt;&lt; Sum2(100) &lt;&lt; endl; return 0;&#125;//2、同上，这里利用函数指针来实现。typedef int (*fun)(int);int Sum( int i )&#123; return 0;&#125;int Sum2( int i )&#123; fun f[2] = &#123; Sum, Sum2 &#125;; return i + f[!!n](i-1);&#125; 利用异常处理的机制思路：try接收到的异常会在catch中捕获。 1234567891011int sum(int n)&#123; try&#123; //n = 2 的时候，出现异常，程序流跳转到catch int[] array = new int[n-2]; return n+sum(n-1); &#125; catch(Exception e)&#123; //返回1到上一个递归处，n = 2处。 return 1; &#125;&#125; 利用模板思路：利用了模板的特化作为递归结束的条件，并借用枚举类型。 12345678910111213141516171819202122#include &lt;iostream&gt;using namespace std;template &lt;unsigned N&gt;class Sum&#123; public: enum&#123; sum = N+Sum&lt;N-1&gt;::sum &#125;;&#125;;//模板特化，当N=1 的时候，调用template&lt;&gt;class Sum&lt;1&gt;&#123; public: enum&#123; sum = 1 &#125;;&#125;;int main()&#123; cout &lt;&lt; Sum&lt;100&gt;::sum &lt;&lt; endl; return 0;&#125; 方法来源地址]]></content>
      <categories>
        <category>practice</category>
        <category>C/C++</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[收集]]></title>
    <url>%2F2018%2F01%2F25%2FLinux%E7%9B%B8%E5%85%B3%E7%BD%91%E7%AB%99%2F</url>
    <content type="text"><![CDATA[1、Linux命令相关1、Linux命令大全：http://man.linuxde.net/ 2、修改时间查看时间：https://www.cnblogs.com/jiu0821/p/5999566.html3、移动、重命名文件/目录：https://linux.cn/article-2688-1.html 4、查看系统版本：http://www.linuxidc.com/Linux/2015-07/119897.htm vim相关1、vim的配置：http://blog.csdn.net/footmart_c/article/details/51588524 2、多行删除复制：https://www.cnblogs.com/MMLoveMeMM/articles/3707287.html 3、vim安装报错EXTERN.h：http://tieba.baidu.com/p/4471948063 4、vim升级8.0+YouCompleteMe补全插件：http://blog.csdn.net/nzyalj/article/details/75331822 5、vim8.0升级后添加到路径中：http://blog.csdn.net/u013388603/article/details/72780586 6、YouCompleteMe：http://blog.51cto.com/990487026/1905427 git相关1、git安装：https://jingyan.baidu.com/article/e9fb46e16698687521f766ec.html 2、git安装：http://blog.csdn.net/u013256816/article/details/54743470 3、git升级2.7.3：https://www.cnblogs.com/yexinw/p/6401663.html python相关1、2.6升级2.7：https://www.cnblogs.com/yaoyuanmengjing/p/7853228.html 2、安装3.5.2并与python2共存：https://www.ywlib.com/archives/96-1.html 输入相关1、python造成 input method preferences无效：http://blog.csdn.net/jaket5219999/article/details/52912321 2、安装Fcitx 4.0.0：https://www.douban.com/note/319236531/ 3、设置Fcitx默认：https://jingyan.baidu.com/article/0320e2c1393a3e1b86507b51.html 4、ibus开启：http://blog.csdn.net/zitong_ccnu/article/details/40110583 源相关1、Nux Dextop源：http://www.linuxidc.com/Linux/2016-06/132101.htm 2、yum源解析（详细）：https://www.cnblogs.com/mchina/archive/2013/01/04/2842275.html Hexo相关gcc升级：http://www.cnblogs.com/lpbottle/p/install_gcc.html gcc升级：http://blog.csdn.net/furzoom/article/details/53322510 gcc升级：http://blog.csdn.net/zr1076311296/article/details/51334538 Nodejs安装：https://www.cnblogs.com/lpbottle/p/7733397.html 其它1、/mnt/hgfs没有共享文件夹：http://www.mamicode.com/info-detail-1655589.html 2、Linux就该这么学：http://www.linuxprobe.com/chapter-00.html 2、C语言1、链表相关笔试题：http://www.cnblogs.com/qingjiaowoxiaoxioashou/p/6416649.html 3、GitHub1、知乎：https://www.zhihu.com/question/20070065 2、他的网站里有：http://youngxhui.github.io/ 以下，搭建自己的github博客： 1）配置详细：https://www.jianshu.com/p/b7886271e21a 2）很强大的一个：http://kchen.cc/2016/11/12/hexo-instructions/ 3）WordPress和Hexo以及md编辑器：https://www.imooc.com/article/12257 4）localhost:4000出问题：http://blog.csdn.net/u012246342/article/details/51543370 5）Hexo问题总结：http://blog.csdn.net/wx_962464/article/details/44786929 4、blog1、http://www.zipperary.com/ 2、陈皓：https://coolshell.cn/featured 5、其它1、msdn：https://msdn.itellyou.cn/ 2、NTFS和FAT32区别：http://www.ntfsformac.cn/qita-nytqubie.html 3、SQL源码剖析：http://deepfuture.iteye.com/blog/718478]]></content>
      <categories>
        <category>网站收集</category>
      </categories>
  </entry>
</search>

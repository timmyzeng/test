<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青匆</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.jingxxn.cn/"/>
  <updated>2018-03-19T13:11:24.096Z</updated>
  <id>http://www.jingxxn.cn/</id>
  
  <author>
    <name>timmy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux下简易彩色进度条</title>
    <link href="http://www.jingxxn.cn/linux%E4%B8%8B%E7%AE%80%E6%98%93%E5%BD%A9%E8%89%B2%E8%BF%9B%E5%BA%A6%E6%9D%A1.html"/>
    <id>http://www.jingxxn.cn/linux下简易彩色进度条.html</id>
    <published>2018-03-19T11:03:14.000Z</published>
    <updated>2018-03-19T13:11:24.096Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在Linux下安装文件的时候，都会有个进度条来提示我们安装的进度是多少。这里我们模拟输出这个进度条。主要用到输出函数的操作、缓冲区的刷新、usleep函数、linux终端颜色的显示等知识。<br>效果如下：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803191947_365.gif-1920.jpg" alt="进度条"><br><img src="http://p3ax8ersb.bkt.clouddn.com/201803191947_20.gif-1920.jpg" alt="彩色进度条"><br><a id="more"></a></p><h3 id="铺垫知识点"><a href="#铺垫知识点" class="headerlink" title="铺垫知识点"></a>铺垫知识点</h3><p><strong>缓冲区</strong><br>缓冲区分位三种：无缓冲，行缓冲，全缓冲。<br><strong>无缓冲</strong>：没有缓冲，也就是信息在输入输出的时候，立马输入或输出。典型的代表就是标准错误流stderr。<br><strong>行缓冲</strong>：当输入输出的时候，遇到换行才执行I/O操作。典型的代表是键盘的操作。<br><strong>全缓冲</strong>：当输入输出写满缓冲区才执行I/O操作。典型的代表是磁盘的读写。<br>由于输出函数是行缓冲类型的。所以我们需要使用缓冲区刷新函数fflush来输出。否则我们看到的进度条将是一段一段输出的。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803191959_49.gif-1920.jpg" alt="错误进度条"><br>补充：printf函数是一个行缓冲函数，先写到缓冲区，满足条件就将缓冲区刷到对应文件中。满足下列条件之一，缓冲区都会刷新：<br>（1）缓冲区填满<br>（2）写入的字符中有<code>&#39;\n&#39;&#39;\r&#39;</code><br>（3）调用fflush刷新缓冲区<br>（4）调用scanf从缓冲区获取数据时，也会刷新新缓冲区。</p><p><strong>换行符</strong><br>有两个符号需要区分：<code>&#39;\n&#39;&#39;\r&#39;</code>。他们有不同的含义。<strong><code>&#39;\n&#39;</code>表示的是换行，将光标指向下一行的开头位置。’`r’`指的是回车，将光标回到当前行的开头位置。</strong>在这里我们要使用<code>&#39;\r&#39;</code>，否则我们的进度条将输出一个<code>&#39;#&#39;</code>就换一行。</p><p><strong>usleep函数</strong><br>刷新了缓冲区之后，如果并没有加上睡眠函数，结果将一次性输出来。进度条应该是随着加载不停出现才对。<br>这里统一总结一下Linux睡眠函数：<br>头文件：<code>#include &lt;unistd.h&gt;</code><br>以 <strong>秒</strong>为单位：unsigned int sleep( unsigned int seconds );<br>以 <strong>微秒</strong>为单位：int usleep ( useconds_t usec );<br>以 <strong>四分之一毫秒</strong>为单位：extern void delay( unsigned int msec );</p><p>以睡眠一秒为例:<br>sleep(1); usleep(1000 000); delay(250);</p><p><strong>输出颜色的设置</strong><br>printf函数可以通过输出特定的转义序列来实现输出字符的颜色和状态。<br>转义序列以控制字符’ESC’开头。该字符的ASCII码十进制表示为27，十六进制表示为0x1B，八进制表示为033。多数转义序列超过两个字符，故通常以’ESC’和左括号’[‘开头。该起始序列称为控制序列引导符(CSI，Control Sequence Intro)，通常由’\033[‘或’\e[‘代替。<br><strong>一般格式如下：(显示方式指的是样式，前景色是30+颜色值，背景色是40+颜色值，字符m表示结束)</strong></p><blockquote><p>\033[显示方式；前景色；背景色m + 输出字符串<br>或者<br>\e[显示方式；前景色；背景色m + 输出字符串</p></blockquote><p>常见参数如下：<br>显示方式：0(默认)、1(粗体/高亮)、22(非粗体)、4(单条下划线)、24(无下划线)、5(闪烁)、25(无闪烁)、7(反显、翻转前景色和背景色)、27(无反显)<br>颜色：0(黑)、1(红)、2(绿)、 3(黄)、4(蓝)、5(洋红)、6(青)、7(白)<br>见例子：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"\033[31mHello!\n\033[0m"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\033[4;32mHello!\n\033[0m"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\033[1;34;43mHello!\n\033[0m"</span>);</span><br></pre></td></tr></table></figure></p><p><img src="http://p3ax8ersb.bkt.clouddn.com/201803192037_682.png-480.jpg" alt="color"><br>其中：<strong>\033[0m用于恢复默认的终端输出属性，否则会影响后续的输出。</strong><br><a href="http://www.cnblogs.com/clover-toeic/p/4031618.html" target="_blank" rel="noopener"><strong>颜色设置详细解析传送门</strong></a></p><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> bar[<span class="number">102</span>];</span><br><span class="line">    <span class="comment">//color数组用来改变颜色的值，让进度条在七种颜色中变幻</span></span><br><span class="line">    <span class="keyword">int</span> color[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    <span class="comment">//设置状态，显示此时正在加载</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *status = <span class="string">"|/-\\"</span>;</span><br><span class="line">    <span class="built_in">memset</span>(bar, <span class="number">0</span>, siezof(bar));</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= <span class="number">100</span>)&#123;</span><br><span class="line">        <span class="comment">//无颜色版本</span></span><br><span class="line">        <span class="comment">//printf("[%-100s][%d%%][%c]\r", bar, i, status[i%4]);</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\033[3%dm[%-100s]\033[0m\033[33m[%d%%]\033[0m[%c]\r"</span>, color[j], bar, i, lable[i%<span class="number">4</span>]);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        bar[i ++] = <span class="string">'#'</span>;</span><br><span class="line">        <span class="comment">//每加载15%，就变换一次颜色</span></span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">15</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            ++ j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//休眠0.03秒输出字符</span></span><br><span class="line">        usleep(<span class="number">30000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://p3ax8ersb.bkt.clouddn.com/201803192104_382.png-1920.jpg" alt="代码分析"><br><a href="http://blog.csdn.net/sssssuuuuu666/article/details/78599860" target="_blank" rel="noopener">参考一</a><br><a href="http://blog.csdn.net/ArchyLi/article/details/78680231" target="_blank" rel="noopener">参考二</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在Linux下安装文件的时候，都会有个进度条来提示我们安装的进度是多少。这里我们模拟输出这个进度条。主要用到输出函数的操作、缓冲区的刷新、usleep函数、linux终端颜色的显示等知识。&lt;br&gt;效果如下：&lt;br&gt;&lt;img src=&quot;http://p3ax8ersb.bkt.clouddn.com/201803191947_365.gif-1920.jpg&quot; alt=&quot;进度条&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://p3ax8ersb.bkt.clouddn.com/201803191947_20.gif-1920.jpg&quot; alt=&quot;彩色进度条&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.jingxxn.cn/categories/Linux/"/>
    
      <category term="practice" scheme="http://www.jingxxn.cn/categories/Linux/practice/"/>
    
    
  </entry>
  
  <entry>
    <title>C语言输入输出函数详解</title>
    <link href="http://www.jingxxn.cn/C%E8%AF%AD%E8%A8%80%E6%96%87%E4%BB%B6%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3.html"/>
    <id>http://www.jingxxn.cn/C语言文件输入输出函数详解.html</id>
    <published>2018-03-15T11:56:44.000Z</published>
    <updated>2018-03-22T10:03:50.015Z</updated>
    
    <content type="html"><![CDATA[<h3 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误报告函数：</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">perror</span><span class="params">( <span class="keyword">char</span> <span class="keyword">const</span>* str )</span></span>;</span><br><span class="line"><span class="comment">//终止执行函数：</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exit</span> <span class="params">(<span class="keyword">int</span> status)</span></span>;</span><br><span class="line"><span class="comment">//打开和关闭文件函数</span></span><br><span class="line"><span class="function">FILE * <span class="title">fopen</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> * filename, <span class="keyword">const</span> <span class="keyword">char</span> * mode )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fclose</span> <span class="params">( FILE * stream )</span></span>;</span><br><span class="line"><span class="comment">//字符输入函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fgetc</span> <span class="params">( FILE * stream )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getc</span> <span class="params">( FILE * stream )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getchar</span> <span class="params">( <span class="keyword">void</span> )</span></span>;</span><br><span class="line"><span class="comment">//字符输出函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputc</span> <span class="params">( <span class="keyword">int</span> character, FILE * stream )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">putc</span> <span class="params">( <span class="keyword">int</span> character, FILE * stream )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">putchar</span> <span class="params">( <span class="keyword">int</span> character )</span></span>;</span><br><span class="line"><span class="comment">//撤销字符函数：</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ungetc</span> <span class="params">( <span class="keyword">int</span> character, FILE * stream )</span></span>;</span><br><span class="line"><span class="comment">//文本行输入函数</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">fgets</span> <span class="params">( <span class="keyword">char</span> * str, <span class="keyword">int</span> num, FILE * stream )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">gets</span><span class="params">( <span class="keyword">char</span>* str )</span></span>;</span><br><span class="line"><span class="comment">//文本行输出函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputs</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> * str, FILE * stream )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">puts</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> * str )</span></span>;</span><br><span class="line"><span class="comment">//格式化输入函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fscanf</span><span class="params">( FILE* stream, <span class="keyword">const</span> <span class="keyword">char</span>* format, ... )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">scanf</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span>* format, ... )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sscanf</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span>* s, <span class="keyword">const</span> <span class="keyword">char</span>* format, ... )</span></span>;</span><br><span class="line"><span class="comment">//格式化输出函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fprintf</span><span class="params">( FILE* stream, <span class="keyword">const</span> <span class="keyword">char</span>* format, ... )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span>* format, ... )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sprintf</span><span class="params">( <span class="keyword">char</span>* str, <span class="keyword">const</span> <span class="keyword">char</span>* format, ... )</span></span>;</span><br><span class="line"><span class="comment">//二进制I/O函数</span></span><br><span class="line"><span class="keyword">size_t</span> fread( <span class="keyword">void</span>* ptr, <span class="keyword">size_t</span> size, <span class="keyword">size_t</span> count, FILE* stream );</span><br><span class="line"><span class="keyword">size_t</span> fwrite( <span class="keyword">void</span>* ptr, <span class="keyword">size_t</span> size, <span class="keyword">size_t</span> count, FILE* stream );</span><br><span class="line"><span class="comment">//刷新缓冲区函数：</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fflush</span> <span class="params">( FILE * stream )</span></span>;</span><br><span class="line"><span class="comment">//文件流定位函数</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">int</span> <span class="title">ftell</span><span class="params">( FILE* stream )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fseek</span><span class="params">( FILE* stream, <span class="keyword">long</span> offset, <span class="keyword">int</span> from )</span></span>;</span><br><span class="line"><span class="comment">//流错误函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">feof</span><span class="params">( FILE* stream )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ferror</span><span class="params">( FILE* stream )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clearerr</span><span class="params">( FILE* stream )</span></span>;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="错误报告函数：void-perror-char-const-str"><a href="#错误报告函数：void-perror-char-const-str" class="headerlink" title="错误报告函数：void perror( char const* str );"></a>错误报告函数：void perror( char const* str );</h3><p>先解释一个整型变量errno，这个变量是错误码，当一个库函数失败的时候，errno会被设置。<br><strong>形参</strong>：str是一个字符串<br><strong>补充</strong>：当一个程序执行了错误的操作的时候，操作系统设置一个errno，perror函数首先会将str中的信息打印出来，后面跟上一个分号和空格，在打印出一条用于解释errno当前错误码的信息。<br><strong>例子</strong>：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* perror example */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  FILE * pFile;</span><br><span class="line">  pFile=fopen (<span class="string">"unexist.ent"</span>,<span class="string">"rb"</span>);</span><br><span class="line">  <span class="keyword">if</span> (pFile==<span class="literal">NULL</span>)</span><br><span class="line">    perror (<span class="string">"The following error occurred"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    fclose (pFile);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果文件unexist.ent不存在，那么将会输出以下信息：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803152133_220.png-480.jpg" alt="perror"></p><p><strong>注意</strong>：只有当一个库函数失败的时候，errno才会被设定。当函数成功运行的时候，errno并不会被设定。所以我们不能通过测试errno的值来判断是否有错误发生。</p><h3 id="终止执行函数：void-exit-int-status"><a href="#终止执行函数：void-exit-int-status" class="headerlink" title="终止执行函数：void exit( int status );"></a>终止执行函数：void exit( int status );</h3><p><strong>头文件</strong>：stdlib.h<br><strong>形参</strong>：status参数返还给操作系统。预定符号是EXIT_SUCCESS和EXIT_FAILURE。通常用0和EXIT_SUCCESS表示程序正常退出，用除零以外的整数和EXIT_FAILURE表示程序退出异常。<br><strong>补充</strong>：我们经常将这个函数和perror配合起来使用，当我们发现了程序的错误的时候，用来终止程序的执行。<br><strong>例子</strong>：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* exit example */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;      /* printf, fopen */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;     /* exit, EXIT_FAILURE */</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  FILE * pFile;</span><br><span class="line">  pFile = fopen (<span class="string">"myfile.txt"</span>,<span class="string">"r"</span>);</span><br><span class="line">  <span class="keyword">if</span> (pFile==<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">"Error opening file"</span>);</span><br><span class="line">    <span class="built_in">exit</span> (EXIT_FAILURE);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* file operations here */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果文件myfile.txt不存在<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803152130_637.png-480.jpg" alt="exit"></p><h3 id="打开文件函数：FILE-fopen-char-const-filename-const-char-mode"><a href="#打开文件函数：FILE-fopen-char-const-filename-const-char-mode" class="headerlink" title="打开文件函数：FILE fopen( char const filename, const char* mode );"></a>打开文件函数：FILE<em> fopen( char const</em> filename, const char* mode );</h3><p><strong>形参</strong>：两个参数都是字符串，filename是希望打开的文件或者设备名字；mode是用来表示流是用于只读、只写、读和写，以及是文本流还是二进制流。<br><strong>返回值</strong>：如果成功打开文件，返回一个指向FILE类型的指针。失败返回一个NULL，并把错误码存入errno中。<br><strong>补充</strong>：以一定的模式打开文件或设备。模式常见如下：<br>以下模式用文本流打开：</p><table><thead><tr><th style="text-align:center">模式</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:center">“r”</td><td>read，只能读取，不能写入，同时要求文件必须存在。</td></tr><tr><td style="text-align:center">“w”</td><td>write，只能写入，不能读取。若文件存在，那么清空文件内容再写入；若文件不存在，创建文件再写入。</td></tr><tr><td style="text-align:center">“a”</td><td>append，只能写入，不能读取。若文件存在，在文件末尾添加内容；如果文件不存在，创建文件再写入。</td></tr><tr><td style="text-align:center">“r+”</td><td>read/update，可读可写，要求文件必须存在。</td></tr><tr><td style="text-align:center">“w+”</td><td>write/update，可读可写，如果文件存在，清空文件内容再写入；如果文件不存在，创建文件再写入。</td></tr><tr><td style="text-align:center">“a+”</td><td>append/update，可读可写，若文件存在，在文件末尾添加内容；若文件不存在，创建文件再写入。</td></tr></tbody></table><p>以下模式用二进制流打开：<br>“rb”, “wb”, “ab”, “r+b”, “w+b”, “a+b”或者”rb+”, “wb+”, “ab+”。功能和文本流一样，只是打开写入方式是二进制流。</p><p>二进制流和文本流的区别：<br><strong>文本流(text)</strong>：指的是在流中流动的数据是 <strong>以字符形式出现</strong>的。举个例子：输入的时候，’\n’这个符号会被替换为回车CR和换行的ASCII码0DH和0AH。输出的时候，0DH和0AH被替换为’\n’。<br><strong>二进制流(binary)</strong>：指的是在流中流动的数据是以 <strong>二进制数字序列</strong>出现的。<strong>说白了就是在内存中是怎么存储的，输入到文件中也是怎么样存储的。</strong>而且不会对’\n’进行替换。<br>举个例子：对于2001这个数<br>文本流用ASCII码表示：’2’’0’’0’’1’分别是：50,48,48,49一共是四个字节<br>二进制流表示为：0000 0111 1101 0001转换为十六进制就是07D1，占用了两个字节。<br>此例来源：<a href="http://blog.csdn.net/barryCG/article/details/7621097" target="_blank" rel="noopener">http://blog.csdn.net/barryCG/article/details/7621097</a></p><p><strong>例子</strong>：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* fopen example */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  FILE * pFile;</span><br><span class="line">  pFile = fopen (<span class="string">"myfile.txt"</span>,<span class="string">"w"</span>);</span><br><span class="line">  <span class="keyword">if</span> (pFile!=<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">fputs</span> (<span class="string">"fopen example"</span>,pFile);</span><br><span class="line">    fclose (pFile);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果没有myfile.txt这个文件，将会创建一个myfile.txt文件，并写入内容fopen example。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803161411_68.png-480.jpg" alt="fopen"></p><h3 id="关闭文件函数：int-fclose-FILE-stream"><a href="#关闭文件函数：int-fclose-FILE-stream" class="headerlink" title="关闭文件函数：int fclose( FILE* stream );"></a>关闭文件函数：int fclose( FILE* stream );</h3><p><strong>形参</strong>：stram是一个FILE类型指针指向的流文件。<br><strong>返回值</strong>：当文件被正常关闭，返回一个整型的0；如果关闭异常，返回文件结束符EOF，通常被解释为整型的-1。<br><strong>补充</strong>：我们习惯于将fopen和fclose搭配使用。fclose会在文件关闭的之前刷新缓冲区，将缓冲区的数据存入文件中，否则会有数据丢失。必要的时候，我们需要检测fclose的返回值是否正确，以避免数据丢失或。</p><h3 id="输入输出函数总览"><a href="#输入输出函数总览" class="headerlink" title="输入输出函数总览"></a>输入输出函数总览</h3><table><thead><tr><th style="text-align:center">家族名</th><th style="text-align:center">目的</th><th style="text-align:center"><strong>可用于所有的流</strong></th><th style="text-align:center"><strong>只用于stdin或stdout</strong></th><th style="text-align:center">内存中的字符串</th></tr></thead><tbody><tr><td style="text-align:center">getchar</td><td style="text-align:center">字符输入</td><td style="text-align:center">fget,getc</td><td style="text-align:center">getchar</td><td style="text-align:center">①</td></tr><tr><td style="text-align:center">putchar</td><td style="text-align:center">字符输出</td><td style="text-align:center">fputc,putc</td><td style="text-align:center">putchar</td><td style="text-align:center">①</td></tr><tr><td style="text-align:center">gets</td><td style="text-align:center">文本行输入</td><td style="text-align:center">fgets</td><td style="text-align:center">gets</td><td style="text-align:center">②</td></tr><tr><td style="text-align:center">puts</td><td style="text-align:center">文本行输出</td><td style="text-align:center">fputs</td><td style="text-align:center">puts</td><td style="text-align:center">②</td></tr><tr><td style="text-align:center">scanf</td><td style="text-align:center">格式化输入</td><td style="text-align:center">fscanf</td><td style="text-align:center">scanf</td><td style="text-align:center">sscanf</td></tr><tr><td style="text-align:center">printf</td><td style="text-align:center">格式化输出</td><td style="text-align:center">fprintf</td><td style="text-align:center">printf</td><td style="text-align:center">sprintf</td></tr></tbody></table><p>①表示对指针使用下标引用或间接访问操作从内存中获得\写入一个字符<br>②使用strcpy函数从内存读取\写入文本行</p><h3 id="字符输入函数：fgetc、getc、getchar"><a href="#字符输入函数：fgetc、getc、getchar" class="headerlink" title="字符输入函数：fgetc、getc、getchar"></a>字符输入函数：fgetc、getc、getchar</h3><p><strong>函数原型：</strong><br><strong>int fgetc( FILE* stream ); 用于所有流</strong><br><strong>宏原型：</strong><br><strong>int getc(FILE* stream ); 用于所有流</strong><br><strong>int getchar( void ); 只能用于stdin</strong><br><strong>形参</strong>：stram是一个FILE类型指针指向的流文件。<br><strong>返回值</strong>：若读取成功，返回读取的一个字符，并实现整型提升。若到了文件的结束，返回EOF表示文本的结束。若读取失败，同样返回EOF并设置error变量。<br><strong>补充</strong>：<br>1、函数作用是读取一个字符，同时文件指针向后指向下一个字符。<br>2、<strong>返回值是整型，这是因为允许函数报告文件末尾(EOF)。</strong>如果返回值是char型，那么256个字符中肯定有一个被指用于表示EOF。如果这个字符在文件内部出现，这个字符以后的内容不会被读取。因为这个字符被解释为EOF。<strong>所以应该使用整型变量来接收这个字符</strong><br>3、fgetc是函数，getc和getchar是通过#define定义的宏。所以getc和getchar不能传入带有副作用的参数。同时，getc和getchar的效率会比fgetc快上一点。<br>4、getchar始终从标准输入读取一个字符。<br><strong>例子</strong>：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* fgetc example: money counter */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; //EXIT_FAILURE</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  FILE * pFile;</span><br><span class="line">  <span class="keyword">int</span> c;</span><br><span class="line">  <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">  pFile=fopen (<span class="string">"myfile.txt"</span>,<span class="string">"r"</span>);</span><br><span class="line">  <span class="keyword">if</span> (pFile==<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    perror (<span class="string">"Error opening file"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      c = fgetc (pFile);</span><br><span class="line">      <span class="keyword">if</span> (c == <span class="string">'$'</span>) n++;</span><br><span class="line">    &#125; <span class="keyword">while</span> (c != EOF);</span><br><span class="line">    fclose (pFile);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">"The file contains %d dollar sign characters ($).\n"</span>,n);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面代码用来统计myfile.txt中$符号的个数，在文件中输入五个，最后得到结果正确。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803161526_445.png-480.jpg" alt="myfile.txt"><br><img src="http://p3ax8ersb.bkt.clouddn.com/201803161528_779.png-480.jpg" alt="fgetc"><br>如果没有这个文件，将会执行perror程序，报错<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803161530_498.png-480.jpg" alt="fgetc"></p><h3 id="字符输出函数：fputc、putc、putchar"><a href="#字符输出函数：fputc、putc、putchar" class="headerlink" title="字符输出函数：fputc、putc、putchar"></a>字符输出函数：fputc、putc、putchar</h3><p><strong>函数原型：</strong><br><strong>int fputc( int character, FILE* stream ); 用于所有流</strong><br><strong>宏原型：</strong><br><strong>int putc( int character, FILE* stream ); 用于所有流</strong><br><strong>int putchar( int character ); 只能用于stdout</strong><br><strong>形参</strong>：character是将要被输出的字符；stram是一个FILE类型指针指向的流文件。<br><strong>返回值</strong>：若函数执行成功，返回被写入的字符；若失败，返回EOF。同时errno被设置。<br><strong>补充</strong>：<br>1、参数character在输入的时候会被裁剪为无符号整型。<br>2、fputc是真正的函数，putc和putchar是#define定义的宏函数。<br>3、putchar始终将字符打印在标准输出流。<br>例子：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* fputc example: alphabet writer */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  FILE * pFile;</span><br><span class="line">  <span class="keyword">char</span> c;</span><br><span class="line"></span><br><span class="line">  pFile = fopen (<span class="string">"alphabet.txt"</span>,<span class="string">"w"</span>);</span><br><span class="line">  <span class="keyword">if</span> (pFile!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (c = <span class="string">'A'</span> ; c &lt;= <span class="string">'Z'</span> ; c++)</span><br><span class="line">      fputc ( c , pFile );</span><br><span class="line">    fclose (pFile);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述代码将大写字符A~Z写入文件alphabet.txt中。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803161607_197.png-480.jpg" alt="fputc"></p><h3 id="撤销字符函数-：int-ungetc-int-character-FILE-stream"><a href="#撤销字符函数-：int-ungetc-int-character-FILE-stream" class="headerlink" title="撤销字符函数 ：int ungetc( int character, FILE* stream );"></a>撤销字符函数 ：int ungetc( int character, FILE* stream );</h3><p>这个函数的作用是将先前读取到的字符返回到原来的流中，这样它可以在以后被重新读入。<br><strong>形参</strong>：character是要返回的字符，stram是一个FILE类型指针指向的流文件。<br><strong>返回值</strong>：若成功，返回被返回流中的字符；若失败，EOF被返回。<br><strong>补充</strong>：<br>1、“退回”的字符和流当前的位置有关，所以如果用fseek、fsetpos、rewind函数改变了流的位置，所有退回的字符将被丢弃。<br>2、把字符退回到流中和写入到流中是不一样的。也就是从文件中读取出来后的退回，并不会影响到物理存储上的内容。<br><strong>例子</strong>：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ungetc example */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE * pFile;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="keyword">char</span> buffer [<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line">    pFile = fopen (<span class="string">"myfile.txt"</span>,<span class="string">"rt"</span>);</span><br><span class="line">    <span class="keyword">if</span> (pFile==<span class="literal">NULL</span>) perror (<span class="string">"Error opening file"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">while</span> (!feof (pFile)) &#123;</span><br><span class="line">        c=getc (pFile);</span><br><span class="line">        <span class="keyword">if</span> (c == EOF) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'#'</span>) ungetc (<span class="string">'@'</span>,pFile);</span><br><span class="line">        <span class="keyword">else</span> ungetc (c,pFile);</span><br><span class="line">        <span class="keyword">if</span> (fgets (buffer,<span class="number">255</span>,pFile) != <span class="literal">NULL</span>)</span><br><span class="line">            <span class="built_in">fputs</span> (buffer,<span class="built_in">stdout</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述代码，将文件myfile.txt中每行开头的’#’替换为‘@’。如果打开失败，打印”Error opening file”。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803171040_523.png-480.jpg" alt="myfile.txt"><br><img src="http://p3ax8ersb.bkt.clouddn.com/201803171039_852.png-480.jpg" alt="ungetc"></p><h3 id="文本行输入函数：fgets、gets"><a href="#文本行输入函数：fgets、gets" class="headerlink" title="文本行输入函数：fgets、gets"></a>文本行输入函数：fgets、gets</h3><p><strong>函数原型：</strong><br><strong>char<em> fgets( char</em> str, int num, FILE* stream );</strong><br><strong>char<em> gets( char</em> str ); //一般不使用，不安全。完全可以用fgets代替。</strong><br><strong>形参</strong>：str是目标字符串，num是一个整型参数；用来表示读取的字符个数,它包括了’\0’在内；stream是获取字符的流。<br><strong>返回值</strong>：如果读取失败，也就是在读取任何字符之前就到了文件的结束，缓冲区没有被修改，返回一个NULL指针；如果读取成功，返回str。<br><strong>补充</strong>：<br>1、当fgets读取到一个换行符并存储到缓冲区之后，结束读取。<br>2、如果读取的字符数量达到num-1个，结束读取。但是这种情况并不会出现数据丢失，因为下次调用fgets将从流的下一个字符开始读取。<br>3、任何一种情况下，一个NUL字节将被添加到缓冲区所存储数据的末尾，让其成为一个字符串。<br><strong>例子</strong>：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* fgets example */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   FILE * pFile;</span><br><span class="line">   <span class="keyword">char</span> mystring [<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">   pFile = fopen (<span class="string">"myfile.txt"</span> , <span class="string">"r"</span>);</span><br><span class="line">   <span class="keyword">if</span> (pFile == <span class="literal">NULL</span>) perror (<span class="string">"Error opening file"</span>);</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> ( fgets (mystring , <span class="number">100</span> , pFile) != <span class="literal">NULL</span> )</span><br><span class="line">       <span class="built_in">puts</span> (mystring);</span><br><span class="line">     fclose (pFile);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述代码，获取文件myfile.txt中的第一行字符串最多获取99个字符。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803171101_159.png-480.jpg" alt="myfile.txt"><br><img src="http://p3ax8ersb.bkt.clouddn.com/201803171100_574.png-480.jpg" alt="fgets"><br><strong>注意</strong>：<br>1、fgets无法将字符串读取到一个长度小于两个字符的缓冲区，因为其中一个字符需要为NUL字节保留。<br>2、gets和fgets的不同，在于gets读取一行输入是，它不在缓冲区中存储结尾的换行符。<br>3、同时，应该注意的是，我们并不使用gets，因为它没有缓冲区长度参数，如果一个长输入行读到一个短缓冲区，多出来的字符将被写入到缓冲区后面的内存位置，这样会破坏此内存中的数据。</p><h3 id="文本行输出函数：fputs、puts"><a href="#文本行输出函数：fputs、puts" class="headerlink" title="文本行输出函数：fputs、puts"></a>文本行输出函数：fputs、puts</h3><p><strong>函数原型：</strong><br><strong>int fputs( const char<em> str, FILE</em> stream );</strong><br><strong>int puts( const char* str );</strong><br><strong>形参</strong>：str是一个字符型指针，用来指向一个字符串，用来获取输入。<br><strong>返回值</strong>：如果函数调用失败，返回EOF；成功返回一个非负数的值。<br><strong>补充</strong>：<br>1、<strong>fputs函数输出行的时候，不会将字符串的’\0’输出。</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *pFile;</span><br><span class="line"></span><br><span class="line">    pFile = fopen(<span class="string">"file.txt"</span>, <span class="string">"a"</span>);</span><br><span class="line">    <span class="built_in">fputs</span>(<span class="string">"this is c"</span>, pFile);</span><br><span class="line">    <span class="built_in">fputs</span>(<span class="string">"this is cpp"</span>, pFile);</span><br><span class="line">    fclose(pFile);</span><br><span class="line">    <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述代码可以证明，fputs不输出字符串结尾’\0’。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803171136_113.png-480.jpg" alt="fputs"><br>2、<strong>puts函数会在读取的字符串后面自动加上一个结尾符号’\0’，并输出到stdin中。</strong></p><h3 id="格式化输入函数：fscanf、scanf、sscanf"><a href="#格式化输入函数：fscanf、scanf、sscanf" class="headerlink" title="格式化输入函数：fscanf、scanf、sscanf"></a>格式化输入函数：fscanf、scanf、sscanf</h3><p><strong>函数原型：</strong><br><strong>int fscanf( FILE<em> stream, const char</em> format, … );</strong><br><strong>int scanf( const char* format, … );</strong><br><strong>int sscanf( const char<em> s, const char</em> format, … );</strong><br><strong>形参</strong>：stream是一个FILE指针指向的流；format字符串是相应的格式。省略号表示一个可变长度的指针列代表。sscanf中的s指的是一个字符串，用来读取字符。<br><strong>返回值</strong>：当字符串到达末尾或读取的输入不再匹配字符串所指定的类型的时候，输入停止。同时，被转换的输入值的个数当成函数的返回值；如果在任何输入值被转换之前文件就已经到达了尾部，返回EOF。<br><strong>补充</strong>：<br>1、输入源的区别：fscanf的输入源是stream；scanf的输入源是标准输入stdin；sscanf的输入源是字符串s。<br>2、<strong>这些函数的正常运行依赖于格式代码。必须保证指针参数的类型必须是对应格式代码的正确类型。否则将会产生垃圾值。</strong><br>比如下面例子：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> a;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%f"</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述代码中a的类型是float，但是输入的时候指针参数的类型是整型，而格式代码是&amp;a，是float类型。输出的时候用的是float输出，最终得到了垃圾值。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803171221_916.png-480.jpg" alt="scanf wrong"><br>3、为什么scanf中需要用&amp;符号。这个是因为在c中是传值调用，如果需要修改当前值地址的内容就需要传递一个地址。否则将会程序崩溃。<br>4、format字符串参数解析：<br>(1)空白字符：它们与输入中的零个或多个空白字符匹配，在处理的过程中被忽略。<br>(2)格式代码：它们指定函数如何解释接下来的输入字符。<br>(3)其他字符：当任何其他字符出现在格式字符串时，下一个输入字符必须与之匹配。如果匹配，该字符被丢弃。如果不匹配，函数结束读取。<br>5、格式代码解析：上述代码都是以%开头，接下来接：<br>(1)星号：星号将转换后的值被丢弃而不是存储，可以用来跳过不需要输入的字符。<br>(2)宽度：以一个非负整数给出，它限制被读取用于转换的输入字符个数。如果没有给出宽度，那么就连续读入字符直到遇到输入中的下一个空白字符。<br>下面这个例子给出宽度的用法：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    FILE* input = fopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="literal">NULL</span>) perror (<span class="string">"Error opening file"</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">fscanf</span>(input, <span class="string">"%4d %4d %4d"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"a = %d\n"</span>, a);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"b = %d\n"</span>, b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"c = %d\n"</span>, c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>input.txt中存放如下：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803221654_415.png-480.jpg" alt="input"><br>输出如下：只有a和b改变，c未改变。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803221656_996.png-480.jpg" alt="out"><br>如果input.txt中存放如下；<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803221657_130.png-480.jpg" alt="input2"><br>输出如下：a=1234，b=5，c=6789。0被舍弃<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803221657_608.png-480.jpg" alt="out2"><br><strong>注意：在使用fscanf函数的时候，文件中的换行符也被当成了空白字符跳过。</strong><br>(3)限定符：h,l,L；限定符的目的是为了指定参数的长度。具体见下表：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803192128_815.png-1920.jpg" alt="限定符"><br>(4)格式代码：就是单个字符，用于指定输入字符将被如何解析。上表中的第一列就是部分格式代码。具体见下表：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803192131_223.png-1920.jpg" alt="格式代码"><br>例子：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* scanf example */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> str [<span class="number">80</span>];</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">"Enter your family name: "</span>);</span><br><span class="line">  <span class="built_in">scanf</span> (<span class="string">"%79s"</span>,str);</span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">"Enter your age: "</span>);</span><br><span class="line">  <span class="built_in">scanf</span> (<span class="string">"%d"</span>,&amp;i);</span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">"Mr. %s , %d years old.\n"</span>,str,i);</span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">"Enter a hexadecimal number: "</span>);</span><br><span class="line">  <span class="built_in">scanf</span> (<span class="string">"%x"</span>,&amp;i);</span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">"You have entered %#x (%d).\n"</span>,i,i);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述例子就是对各种格式的输入。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803221706_580.png-480.jpg" alt="scanf"></p><h3 id="格式化输出函数：fprintf、printf、sprintf"><a href="#格式化输出函数：fprintf、printf、sprintf" class="headerlink" title="格式化输出函数：fprintf、printf、sprintf"></a>格式化输出函数：fprintf、printf、sprintf</h3><p><strong>函数原型：</strong><br><strong>int fprintf( FILE<em> stream, const char</em> format, … );</strong><br><strong>int printf( const char* format, … );</strong><br><strong>int sprintf( char<em> str, const char</em> format, … );</strong><br><strong>形参</strong>：stream是一个FILE指针指向的流；format字符串是相应的格式。省略号表示一个可变长度的指针列代表。sprintf中str是一个用来存储字符的指定字符串。<br><strong>返回值</strong>：返回值就是实际打印或者存储的字符个数。<br><strong>补充</strong>：<br>1、sprintf是一个容易出错的函数，因为缓冲区的大小并没有作为一个形参被传入。函数并不知道该输入多少个字符是安全的。<br>2、printf家族函数和scanf家族函数一样，必须保证值和格式码表示一致。<br>3、format字符串中含有格式代码，格式代码由一个百分号开头，后面可以跟：<br>(1)零个或者多个标志字符。<br>(2)一个可选的最小字段宽度<br>(3)一个可选的精度<br>(4)一个可选的修改符<br>(5)转换类型<br>4、格式代码如下：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803221716_63.png-1920.jpg" alt="格式代码"><br>5、格式标志如下：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803221717_596.png-1920.jpg" alt="格式标志"></p><h3 id="二进制I-O函数："><a href="#二进制I-O函数：" class="headerlink" title="二进制I/O函数："></a>二进制I/O函数：</h3><p><strong>函数原型：</strong><br><strong>size_t fread( void<em> ptr, size_t size, size_t count, FILE</em> stream );</strong><br><strong>size_t fwrite( void<em> ptr, size_t size, size_t count, FILE</em> stream );</strong><br><strong>形参</strong>：ptr是一个指向用于保存数据的内存位置的指针，至少有size*count个字节；size是缓冲区中每个元素的字节数；count是读取的元素数。<br><strong>返回值</strong>：实际读取的元素(非字节)的数目，如果过程中遇到了文件尾，这个数字可能比请求的元素数目小。<br><strong>补充</strong>：一般来说，二进制的写入效率比文件写入要高，因为二进制输出避免了在数值转换为字符串过程中所涉及的开销和精读损失。但是很遗憾的是，二进制的数据，不是我们人眼可以阅读的。文本写入的文件就可以很好的阅读。<br><strong>例子</strong>：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* fread example: read an entire file */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  FILE * pFile;</span><br><span class="line">  <span class="keyword">long</span> lSize;</span><br><span class="line">  <span class="keyword">char</span> * buffer;</span><br><span class="line">  <span class="keyword">size_t</span> result;</span><br><span class="line"></span><br><span class="line">  pFile = fopen ( <span class="string">"myfile.bin"</span> , <span class="string">"rb"</span> );</span><br><span class="line">  <span class="keyword">if</span> (pFile==<span class="literal">NULL</span>) &#123;<span class="built_in">fputs</span> (<span class="string">"File error"</span>,<span class="built_in">stderr</span>); <span class="built_in">exit</span> (<span class="number">1</span>);&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// obtain file size:</span></span><br><span class="line">  fseek (pFile , <span class="number">0</span> , SEEK_END);</span><br><span class="line">  lSize = ftell (pFile);</span><br><span class="line">  rewind (pFile);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// allocate memory to contain the whole file:</span></span><br><span class="line">  buffer = (<span class="keyword">char</span>*) <span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*lSize);</span><br><span class="line">  <span class="keyword">if</span> (buffer == <span class="literal">NULL</span>) &#123;<span class="built_in">fputs</span> (<span class="string">"Memory error"</span>,<span class="built_in">stderr</span>); <span class="built_in">exit</span> (<span class="number">2</span>);&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// copy the file into the buffer:</span></span><br><span class="line">  result = fread (buffer,<span class="number">1</span>,lSize,pFile);</span><br><span class="line">  <span class="keyword">if</span> (result != lSize) &#123;<span class="built_in">fputs</span> (<span class="string">"Reading error"</span>,<span class="built_in">stderr</span>); <span class="built_in">exit</span> (<span class="number">3</span>);&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* the whole file is now loaded in the memory buffer. */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// terminate</span></span><br><span class="line">  fclose (pFile);</span><br><span class="line">  <span class="built_in">free</span> (buffer);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述例子将文件myfile.bin中的数据，通过函数fread读取到数组buffer中去。</p><h3 id="刷新缓冲区函数：int-fflush-FILE-stream"><a href="#刷新缓冲区函数：int-fflush-FILE-stream" class="headerlink" title="刷新缓冲区函数：int fflush( FILE* stream );"></a>刷新缓冲区函数：int fflush( FILE* stream );</h3><p><strong>返回值</strong>：若函数正确执行返回一个0，若失败，返回EOF同时error被设置。<br><strong>补充</strong>：这个函数会立刻刷新缓冲区，如果我们需要输入的字符立刻写入的话，我们可以调动这个函数。<br><strong>例子</strong>：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* fflush example */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> mybuffer[<span class="number">80</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   FILE * pFile;</span><br><span class="line">   pFile = fopen (<span class="string">"example.txt"</span>,<span class="string">"r+"</span>);</span><br><span class="line">   <span class="keyword">if</span> (pFile == <span class="literal">NULL</span>) perror (<span class="string">"Error opening file"</span>);</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="built_in">fputs</span> (<span class="string">"test"</span>,pFile);</span><br><span class="line">     fflush (pFile);    <span class="comment">// flushing or repositioning required</span></span><br><span class="line">     fgets (mybuffer,<span class="number">80</span>,pFile);</span><br><span class="line">     <span class="built_in">puts</span> (mybuffer);</span><br><span class="line">     fclose (pFile);</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述例子，使用了fflush将缓冲区中的test立刻刷新到文件流pFile中，然后从pFile中获取最多80个字符到mybuffer中。并打印到屏幕上。<br>example.txt存储内容如下：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803201500_50.png-480.jpg" alt="example.txt1"><br>执行程序之后的输出：从被替换的第四个字符开始输出，这个是因为文本指针已经指向第四个字符。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803201502_589.png-480.jpg" alt="stdout1"><br>执行之后的example.txt内容：前四个字符被替换成text<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803201502_452.png-480.jpg" alt="example.txt2"><br>如果没有刷新函数fflush将会出现下面情况：<br>输出如下：此时的缓冲区未刷新，内容并没有写入文本流pFile中。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803201504_487.png-960.jpg" alt="stdout2"><br>example.txt3内容：当调用puts函数的时候，缓冲区的内容被刷新，所有缓冲区的内容被写入pFile中<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803201505_936.png-960.jpg" alt="example.txt3"></p><h3 id="文件流定位函数：ftell、fseek"><a href="#文件流定位函数：ftell、fseek" class="headerlink" title="文件流定位函数：ftell、fseek"></a>文件流定位函数：ftell、fseek</h3><p><strong>函数原型：</strong><br><strong>long int ftell( FILE* stream );</strong><br><strong>int fseek( FILE* stream, long offset, int from );</strong><br><strong>形参</strong>：参考下表：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803201520_375.png-1920.jpg" alt="from"><br><strong>补充</strong>：<br>1、<strong>ftell返回流的当前位置</strong>。这函数允许你保存一个文件的当前位置，可能在将来会返回到这个位置。在二进制流中，这个值就是当前位置距离文件起始位置之间的字节数。<br>2、<strong>fseek允许你定位在流中的位置</strong>，用于下次的读取或写入。<br>3、<strong>在二进制流中，从SEEK_END进行定位可能不被支持，应该避免。在文本流中，如果from是SEEK_CUR或SEEK_END，offset必须是零。如果from是SEEK_SET，offset必须是一个从同一个流中以前调用ftell所返回的值。</strong><br>4、这些限制的存在，部分原因是因为文本流所执行的行末字符映射。由于这个映射的存在，文本文件的字节数可能和程序写入的字节数不同。<br>5、用fseek改变一个流的位置会带来三个副作用。第一个，行末指示字符会被清除；<strong>第二个，在fseek之前用ungetc退还给流的字符，会被丢失；</strong>第三个，定位允许你从写入切换到读取，或者回到打开的流用来更新。<br><strong>例子</strong>：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ftell example : getting size of a file */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  FILE * pFile;</span><br><span class="line">  <span class="keyword">long</span> size;</span><br><span class="line"></span><br><span class="line">  pFile = fopen (<span class="string">"myfile.txt"</span>,<span class="string">"r"</span>);</span><br><span class="line">  <span class="keyword">if</span> (pFile==<span class="literal">NULL</span>) perror (<span class="string">"Error opening file"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    fseek (pFile, <span class="number">0</span>, SEEK_END);   <span class="comment">// non-portable</span></span><br><span class="line">    size=ftell (pFile);</span><br><span class="line">    fclose (pFile);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">"Size of myfile.txt: %ld bytes.\n"</span>,size);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述程序就是通过利用fseek函数将文件指针定位到文本末，然后通过ftell函数获取当前位置。这样可以统计出文件字节数。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803201536_822.png-480.jpg" alt="myfile.txt"><br><img src="http://p3ax8ersb.bkt.clouddn.com/201803201536_82.png-480.jpg" alt="size"><br>下面这个例子说明了文本文件下，换行符被编译为两个字符，分别是<code>&#39;\n&#39;&#39;\r&#39;</code><br><img src="http://p3ax8ersb.bkt.clouddn.com/201803201539_304.png-480.jpg" alt="myfile.txt2"><br><img src="http://p3ax8ersb.bkt.clouddn.com/201803201539_965.png-480.jpg" alt="size2"></p><h3 id="流错误函数：feof、ferror、clearerr"><a href="#流错误函数：feof、ferror、clearerr" class="headerlink" title="流错误函数：feof、ferror、clearerr"></a>流错误函数：feof、ferror、clearerr</h3><p><strong>函数原型：</strong><br><strong>int feof( FILE* stream );</strong><br><strong>int ferror( FILE* stream );</strong><br><strong>void clearerr( FILE* stream );</strong><br><strong>返回值</strong>：若到了文件的结束，返回一个非零的值；若不是文件结尾，返回一个零。<br><strong>补充</strong>：<br>1、feof函数检查文件指针是否指向文本结束符。ferror函数报告流的错误状态。clearerr对指定流的错误标准进行重置。<br>2、函数clearerr、rewind、fseek会清除文末指示符，当时下次有I/O函数操作这个流，文末指示符会被重新设定。<br><strong>例子</strong>：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* feof example: byte counter */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  FILE * pFile;</span><br><span class="line">  <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">  pFile = fopen (<span class="string">"myfile.txt"</span>,<span class="string">"rb"</span>);</span><br><span class="line">  <span class="keyword">if</span> (pFile==<span class="literal">NULL</span>) perror (<span class="string">"Error opening file"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> (fgetc(pFile) != EOF) &#123;</span><br><span class="line">      ++n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (feof(pFile)) &#123;</span><br><span class="line">      <span class="built_in">puts</span> (<span class="string">"End-of-File reached."</span>);</span><br><span class="line">      <span class="built_in">printf</span> (<span class="string">"Total number of bytes read: %d\n"</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span> (<span class="string">"End-of-File was not reached."</span>);</span><br><span class="line">    fclose (pFile);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述代码读取文件中的字符个数， 并在文件结束的时候，返回读取字符个数。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803201611_34.png-480.jpg" alt="myfile.txt"><br><img src="http://p3ax8ersb.bkt.clouddn.com/201803201610_320.png-480.jpg" alt="feof"></p><p><strong>本文中的知识点来自于C和指针，代码例子绝大部分来自网站<a href="http://www.cplusplus.com" target="_blank" rel="noopener">www.cplusplus.com</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;总览&quot;&gt;&lt;a href=&quot;#总览&quot; class=&quot;headerlink&quot; title=&quot;总览&quot;&gt;&lt;/a&gt;总览&lt;/h3&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//错误报告函数：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;perror&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;* str )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//终止执行函数：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; status)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//打开和关闭文件函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;FILE * &lt;span class=&quot;title&quot;&gt;fopen&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;( &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * filename, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * mode )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fclose&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;( FILE * stream )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//字符输入函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fgetc&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;( FILE * stream )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getc&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;( FILE * stream )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getchar&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;( &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//字符输出函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fputc&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;( &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; character, FILE * stream )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;putc&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;( &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; character, FILE * stream )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;putchar&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;( &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; character )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//撤销字符函数：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ungetc&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;( &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; character, FILE * stream )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//文本行输入函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * &lt;span class=&quot;title&quot;&gt;fgets&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;( &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * str, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num, FILE * stream )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* &lt;span class=&quot;title&quot;&gt;gets&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* str )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//文本行输出函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fputs&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;( &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * str, FILE * stream )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;( &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * str )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//格式化输入函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fscanf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( FILE* stream, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* format, ... )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* format, ... )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sscanf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* s, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* format, ... )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//格式化输出函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( FILE* stream, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* format, ... )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* format, ... )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* str, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* format, ... )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//二进制I/O函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; fread( &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;* ptr, &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; size, &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; count, FILE* stream );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; fwrite( &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;* ptr, &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; size, &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; count, FILE* stream );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//刷新缓冲区函数：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fflush&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;( FILE * stream )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//文件流定位函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ftell&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( FILE* stream )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fseek&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( FILE* stream, &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; offset, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; from )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//流错误函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;feof&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( FILE* stream )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ferror&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( FILE* stream )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;clearerr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( FILE* stream )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="knowledge" scheme="http://www.jingxxn.cn/categories/knowledge/"/>
    
      <category term="C/C++" scheme="http://www.jingxxn.cn/categories/knowledge/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>查看Linux系统版本信息</title>
    <link href="http://www.jingxxn.cn/%E6%9F%A5%E7%9C%8BLinux%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF.html"/>
    <id>http://www.jingxxn.cn/查看Linux系统版本信息.html</id>
    <published>2018-03-08T03:44:55.000Z</published>
    <updated>2018-03-08T08:32:20.222Z</updated>
    
    <content type="html"><![CDATA[<h4 id="查看内核版本"><a href="#查看内核版本" class="headerlink" title="查看内核版本"></a>查看内核版本</h4><blockquote><p><strong>cat /proc/version</strong></p></blockquote><p><img src="http://p3ax8ersb.bkt.clouddn.com/201803081150_955.png-960.jpg" alt="cat /proc/version"></p><blockquote><p><strong>uname -a</strong></p></blockquote><a id="more"></a><p><img src="http://p3ax8ersb.bkt.clouddn.com/201803081151_552.png-960.jpg" alt="uname -a"></p><h4 id="查看系统版本"><a href="#查看系统版本" class="headerlink" title="查看系统版本"></a>查看系统版本</h4><blockquote><p><strong>cat /etc/redhat-release</strong></p></blockquote><p><img src="http://p3ax8ersb.bkt.clouddn.com/201803081158_576.png-960.jpg" alt="查看版本"></p><blockquote><p><strong>lsb_release -a</strong></p></blockquote><p>这个命令需要安装，安装命令：</p><blockquote><p>yum install lsb -y</p></blockquote><p><img src="http://p3ax8ersb.bkt.clouddn.com/201803081233_128.png-960.jpg" alt="lsb_release"></p><blockquote><p><strong>cat /etc/issue</strong></p></blockquote><p>都说可以，这个我的查出来很奇怪<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803081223_694.png-960.jpg" alt="有错误"></p><blockquote><p><strong>rpm -q centos-release</strong></p></blockquote><p><img src="http://p3ax8ersb.bkt.clouddn.com/201803081235_126.png-960.jpg" alt="rpm"></p><h4 id="查看cpu相关信息，包括型号、主频、内核等信息"><a href="#查看cpu相关信息，包括型号、主频、内核等信息" class="headerlink" title="查看cpu相关信息，包括型号、主频、内核等信息"></a>查看cpu相关信息，包括型号、主频、内核等信息</h4><blockquote><p><strong>cat /proc/cpuinfo</strong></p></blockquote><p><img src="http://p3ax8ersb.bkt.clouddn.com/201803081226_578.png-960.jpg" alt="cpuinfo"></p><p><a href="https://www.linuxidc.com/Linux/2016-05/131749.htm" target="_blank" rel="noopener">参考地址1</a><br><a href="http://blog.csdn.net/Aoril/article/details/53518917" target="_blank" rel="noopener">参考地址2</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;查看内核版本&quot;&gt;&lt;a href=&quot;#查看内核版本&quot; class=&quot;headerlink&quot; title=&quot;查看内核版本&quot;&gt;&lt;/a&gt;查看内核版本&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;cat /proc/version&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://p3ax8ersb.bkt.clouddn.com/201803081150_955.png-960.jpg&quot; alt=&quot;cat /proc/version&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;uname -a&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.jingxxn.cn/categories/Linux/"/>
    
      <category term="method" scheme="http://www.jingxxn.cn/categories/Linux/method/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux中时间的设置</title>
    <link href="http://www.jingxxn.cn/Linux%E4%B8%AD%E6%97%B6%E9%97%B4%E7%9A%84%E8%AE%BE%E7%BD%AE.html"/>
    <id>http://www.jingxxn.cn/Linux中时间的设置.html</id>
    <published>2018-03-08T03:36:45.000Z</published>
    <updated>2018-03-08T12:33:37.661Z</updated>
    
    <content type="html"><![CDATA[<p>test: CentOS Linux release 7.4.1708 (Core)</p><h4 id="查看时区"><a href="#查看时区" class="headerlink" title="查看时区"></a>查看时区</h4><blockquote><p><strong>data -R</strong></p></blockquote><p><img src="http://p3ax8ersb.bkt.clouddn.com/201803081634_167.png-960.jpg" alt="查看时区"><br>+0800 表示在东八区<br>其中：<br>CST：中国标准时间（China Standard Time），这个解释可能是针对RedHat Linux。<br>UTC：协调世界时，又称世界标准时间，简称UTC，从英文国际时间/法文协调时间”Universal Time/Temps Cordonné”而来。中国大陆、香港、澳门、台湾、蒙古国、新加坡、马来西亚、菲律宾、澳洲西部的时间与UTC的时差均为+8，也就是UTC+8。UTC较于GMT更准确。<br>GMT：格林尼治标准时间（旧译格林威治平均时间或格林威治标准时间；英语：Greenwich Mean Time，GMT）是指位于英国伦敦郊区的皇家格林尼治天文台的标准时间，因为本初子午线被定义在通过那里的经线。</p><h4 id="修改时区"><a href="#修改时区" class="headerlink" title="修改时区"></a>修改时区</h4><blockquote><p><strong>tzselect</strong></p></blockquote><a id="more"></a><p><img src="http://p3ax8ersb.bkt.clouddn.com/201803081645_514.png-960.jpg" alt="tzselect1"><br><strong>这个命令并不是用来修改时区的</strong>，这个命令可以通过你自己的选择然后清楚的知道每个时区的样式。然后你通过修改.progile、.bash_profile或者/etc/profile文件，设置正确的TZ环境变量并导出，可以成功改变时区。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803081647_798.png-960.jpg" alt="tzselect2"></p><p><strong>tip：这些修改应该出现用户家目录下</strong><br>下面例子，我将时区由东八区改变为波兰的时区，东一区：<br>先通过tzselect查询波兰的时区书写格式：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803081702_845.png-960.jpg" alt="tzselect3"><br>然后通过修改文件.bash_profile并应用得以修改。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803081701_60.png-960.jpg" alt="tzselect4"></p><blockquote><p><strong>通过替换系统时区文件，或者创建链接文件</strong></p></blockquote><p>1、在目录/usr/share/zoneinfo中有所有的时区文件，通过复制替换到/etc/locatime即可<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803081715_394.png-960.jpg" alt="替换"><br>但是有的时候会出现没有效果的情况，比如上例子。这是因为修改了在profile或.bash_profile中设置了TZ。这个时候就需要重新修改TZ。</p><p>2、创建链接文件<br>这里如果出现修改失败，同上。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803081722_543.png-960.jpg" alt="ln"></p><h4 id="查看和修改时间和日期"><a href="#查看和修改时间和日期" class="headerlink" title="查看和修改时间和日期"></a>查看和修改时间和日期</h4><blockquote><p><strong>date</strong><br>date用于查看和设置 <strong>系统时间</strong></p></blockquote><p><img src="http://p3ax8ersb.bkt.clouddn.com/201803081733_375.png-960.jpg" alt="date"><br>如果不输入命令”hwclock -w”将时间写入硬件时间，电脑重启之后将会返回原样。</p><blockquote><p><strong>hwclock</strong><br>hwclock用来查看设置 <strong>硬件时间</strong>。</p></blockquote><blockquote><p><strong>hwclock –hctosys</strong><br>hc代表硬件时间，sys代表系统时间，即用硬件时钟同步系统时钟</p></blockquote><blockquote><p><strong>hwclock –systohc</strong><br>即用系统时钟同步硬件时钟,等于 <strong>hwclock -w</strong></p></blockquote><p>执行完这两个命令系统没有任何反馈。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803081739_539.png-960.jpg" alt="hwclock"></p><p>解释一下硬件时钟和系统时钟的区别：<br>硬件时钟指的是主板上由电池供电的那个时间，可以在BIOS中设置。<strong>Linux可以通过hwclock设置。当Linux启动的时候，硬件时钟会赋值给系统时钟。然后系统时钟会独立于硬件时钟工作。</strong><br>系统时钟指的是当前Linux Kernel中的时钟。Linux中的所有命令包括函数都是采用系统时钟设置的。<br>这就是为什么当我们用date修改了时间，没有同步到硬件时钟的时候，这个修改是无效的。</p><h4 id="时间自动同步"><a href="#时间自动同步" class="headerlink" title="时间自动同步"></a>时间自动同步</h4><blockquote><p><strong>yum install -y ntpdate</strong><br>首先安装ntpdate软件，用来同步Linux时间服务。</p></blockquote><blockquote><p><strong>ntpdate time.nist.gov</strong></p></blockquote><p><img src="http://p3ax8ersb.bkt.clouddn.com/201803081941_193.png-960.jpg" alt="ntpdate"><br>上面表示同步成功，调整时间为服务器129.6.15.29的时间，时间相差0.136318 sec</p><blockquote><p><strong>hwclock -w</strong><br>调整硬件时间</p></blockquote><blockquote><p><strong>crontab -e</strong><br>设定crontab计划任务自动校时，并添加下列内容<br><strong>0 1 <em> </em> * ntpdate time.nist.gov</strong><br>这样设定一个小时自动进行网络校时。</p></blockquote><p>通过cat /etc/crontab 查看crontab的设置解释，如下：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803082006_609.png-1920.jpg" alt="crontab"><br><a href="https://www.cnblogs.com/kerrycode/p/4217995.html" target="_blank" rel="noopener">参考文章1</a><br><a href="https://www.cnblogs.com/wanghuaijun/p/6547046.html" target="_blank" rel="noopener">参考文章2</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;test: CentOS Linux release 7.4.1708 (Core)&lt;/p&gt;
&lt;h4 id=&quot;查看时区&quot;&gt;&lt;a href=&quot;#查看时区&quot; class=&quot;headerlink&quot; title=&quot;查看时区&quot;&gt;&lt;/a&gt;查看时区&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;data -R&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://p3ax8ersb.bkt.clouddn.com/201803081634_167.png-960.jpg&quot; alt=&quot;查看时区&quot;&gt;&lt;br&gt;+0800 表示在东八区&lt;br&gt;其中：&lt;br&gt;CST：中国标准时间（China Standard Time），这个解释可能是针对RedHat Linux。&lt;br&gt;UTC：协调世界时，又称世界标准时间，简称UTC，从英文国际时间/法文协调时间”Universal Time/Temps Cordonné”而来。中国大陆、香港、澳门、台湾、蒙古国、新加坡、马来西亚、菲律宾、澳洲西部的时间与UTC的时差均为+8，也就是UTC+8。UTC较于GMT更准确。&lt;br&gt;GMT：格林尼治标准时间（旧译格林威治平均时间或格林威治标准时间；英语：Greenwich Mean Time，GMT）是指位于英国伦敦郊区的皇家格林尼治天文台的标准时间，因为本初子午线被定义在通过那里的经线。&lt;/p&gt;
&lt;h4 id=&quot;修改时区&quot;&gt;&lt;a href=&quot;#修改时区&quot; class=&quot;headerlink&quot; title=&quot;修改时区&quot;&gt;&lt;/a&gt;修改时区&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;tzselect&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.jingxxn.cn/categories/Linux/"/>
    
      <category term="method" scheme="http://www.jingxxn.cn/categories/Linux/method/"/>
    
    
  </entry>
  
  <entry>
    <title>判断元素的入栈和出栈顺序是否合法</title>
    <link href="http://www.jingxxn.cn/%E5%88%A4%E6%96%AD%E5%85%83%E7%B4%A0%E7%9A%84%E5%85%A5%E6%A0%88%E5%92%8C%E5%87%BA%E6%A0%88%E9%A1%BA%E5%BA%8F%E6%98%AF%E5%90%A6%E4%B8%80%E8%87%B4.html"/>
    <id>http://www.jingxxn.cn/判断元素的入栈和出栈顺序是否一致.html</id>
    <published>2018-03-07T06:46:00.000Z</published>
    <updated>2018-03-07T07:48:17.619Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>提供两个元素的集合，一个是元素入栈的顺序，另一个是元素出栈的顺序。设计一个函数，判断两个元素集合是否满足入栈出栈的规则。如：入栈顺序：“12345”，出栈顺序是：“54321”，这样就是符合要求的。如果出栈顺序是：“51234”，这样不符合要求。<br><a id="more"></a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>根据题目的要求，就是判断两数组是否满足出栈入栈的顺序。可以这样做：<strong>1、先按照入栈顺序的集合进行入栈。2、在入栈的同时，跟出栈顺序的元素进行比较。如果相同就将入栈的元素pop出来。3、结束的时候，如果栈为空，说明两者的入栈顺序和出栈顺序可以匹配，那么就是符合要求的；如果栈不为空，那就是不符合要求。</strong><br>还有一点：<strong>如果两元素的个数不一样或者同时为空，直接判定不符合要求。</strong></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">stack_io_right</span><span class="params">(<span class="keyword">char</span>* src, <span class="keyword">char</span>* dst)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> src_len = <span class="keyword">sizeof</span>(src);</span><br><span class="line">    <span class="keyword">int</span> dst_len = <span class="keyword">sizeof</span>(dst);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(src_len == <span class="number">0</span> || src_len != dst_len)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(; i &lt; src_len; ++i)&#123;</span><br><span class="line">        s.push(*(src+i));</span><br><span class="line">        <span class="keyword">while</span>(s.size() &amp;&amp; s.top() == *(dst+j))&#123;</span><br><span class="line">            ++j;</span><br><span class="line">            s.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(s.empty())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    system(<span class="string">"clear"</span>);</span><br><span class="line">    <span class="keyword">char</span> src[] = <span class="string">"12345"</span>;</span><br><span class="line">    <span class="keyword">char</span> dst[] = <span class="string">"32145"</span>;</span><br><span class="line">    <span class="keyword">char</span> dst1[] = <span class="string">"51243"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; stack_io_right(src, dst) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; stack_io_right(src, dst1) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="http://p3ax8ersb.bkt.clouddn.com/201803071537_435.png-480.jpg" alt="运行结果"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;提供两个元素的集合，一个是元素入栈的顺序，另一个是元素出栈的顺序。设计一个函数，判断两个元素集合是否满足入栈出栈的规则。如：入栈顺序：“12345”，出栈顺序是：“54321”，这样就是符合要求的。如果出栈顺序是：“51234”，这样不符合要求。&lt;br&gt;
    
    </summary>
    
      <category term="practice" scheme="http://www.jingxxn.cn/categories/practice/"/>
    
      <category term="C/C++" scheme="http://www.jingxxn.cn/categories/practice/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>二叉树的基本实现</title>
    <link href="http://www.jingxxn.cn/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%AE%9E%E7%8E%B0.html"/>
    <id>http://www.jingxxn.cn/二叉树的基本实现.html</id>
    <published>2018-03-06T07:47:19.000Z</published>
    <updated>2018-03-06T09:16:54.673Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>本文将使用c++实现模板类的二叉树，内容包括创建、递归遍历、非递归遍历、结点个数、深度、叶子结点的个数、第K层结点个数等函数。</p><h3 id="结点、二叉树结构"><a href="#结点、二叉树结构" class="headerlink" title="结点、二叉树结构"></a>结点、二叉树结构</h3><p>二叉树的结点是一个结构体，包括值<code>_data</code>，指向左子树的指针和指向右子树的指针<code>_left</code>和<code>_right</code>。还有构造函数，用于创建结点。<a id="more"></a><br>将<code>BinaryTreeNode&lt;T&gt;</code>typedef为<code>Node</code>,很多时候我会遗漏模板的类型名需要加上<code>&lt;T&gt;</code>，这样就会出错。为了减少这种错误，索性用typedef换名。&lt;<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">BinaryTreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    BinaryTreeNode* _left;</span><br><span class="line">    BinaryTreeNode* _right;</span><br><span class="line">    T _data;</span><br><span class="line"></span><br><span class="line">    BinaryTreeNode(<span class="keyword">const</span> T&amp; data = T())&#123;</span><br><span class="line">        _data = data;</span><br><span class="line">        _left = <span class="literal">NULL</span>;</span><br><span class="line">        _right = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">BinaryTree</span>&#123;</span></span><br><span class="line"><span class="keyword">typedef</span> BinaryTreeNode&lt;T&gt; Node;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Node* _root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="默认成员函数"><a href="#默认成员函数" class="headerlink" title="默认成员函数"></a>默认成员函数</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>设置了两个构造函数，一个为空，用于创建一个空的二叉树；另一个参数为两个。<br><code>const T* a</code> 数组名<br><code>const T&amp; invalid</code> 非法值<br>解释一下，这里我用一个数组创建二叉树，同时用’#’表示这个空。如这个例子：</p><pre><code>int a1[] = {1,2,3,&apos;#&apos;,&apos;#&apos;,4,&apos;#&apos;,&apos;#&apos;,5,6,&apos;#&apos;,&apos;#&apos;,&apos;#&apos;};</code></pre><p>如果<code>a1[i] != &#39;#&#39;</code>那么就创建，反之，表示这个位置没有结点。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//constructor</span></span><br><span class="line">BinaryTree()&#123;</span><br><span class="line">    _root = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">BinaryTree(<span class="keyword">const</span> T* a, <span class="keyword">const</span> T&amp; invalid)&#123;</span><br><span class="line">    <span class="keyword">size_t</span> index = <span class="number">0</span>;</span><br><span class="line">    _root = _CreateTree(a, invalid, index);</span><br><span class="line">&#125;</span><br><span class="line">Node* _CreateTree(<span class="keyword">const</span> T* a, <span class="keyword">const</span> T&amp; invalid, <span class="keyword">size_t</span>&amp; index)&#123;</span><br><span class="line">    Node* root = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[index] != invalid)&#123;</span><br><span class="line">        root = <span class="keyword">new</span> Node(a[index]);</span><br><span class="line">        root-&gt;_left = _CreateTree(a, invalid, ++index);</span><br><span class="line">        root-&gt;_right = _CreateTree(a, invalid, ++index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>构造函数利用递归的思想，先跟的次序创建二叉树。<strong>由于要利用到递归，就没有办法直接用构造函数来实现，因为在class之外是没有办法访问到_root的。所以通过一个函数，利用这个函数来实现递归的过程。</strong><br>构造出来的二叉树关系图：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803061638_7.png-480.jpg" alt="二叉树"></p><h3 id="拷贝构造"><a href="#拷贝构造" class="headerlink" title="拷贝构造"></a>拷贝构造</h3><p>拷贝构造利用了一个<code>_CopyTree</code>函数。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">BinaryTree(<span class="keyword">const</span> BinaryTree&amp; tree)&#123;</span><br><span class="line">    _root = _CopyTree(tree._root);</span><br><span class="line">&#125;</span><br><span class="line">Node* _CopyTree(Node* root)&#123;</span><br><span class="line">    Node* node = root;</span><br><span class="line">    <span class="keyword">if</span>(node)&#123;</span><br><span class="line">        node = <span class="keyword">new</span> Node(root-&gt;_data);</span><br><span class="line">        node-&gt;_left = _CopyTree(root-&gt;_left);</span><br><span class="line">        node-&gt;_right = _CopyTree(root-&gt;_right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h3><p>析构函数利用了一个<code>Destroy</code>函数<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//destructor</span></span><br><span class="line">~BinaryTree()&#123;</span><br><span class="line">    Destroy(_root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Destroy</span><span class="params">(Node* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    Destroy(root-&gt;_left);</span><br><span class="line">    Destroy(root-&gt;_right);</span><br><span class="line">    <span class="keyword">delete</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="operator-赋值运算符的重载"><a href="#operator-赋值运算符的重载" class="headerlink" title="operator=(赋值运算符的重载)"></a>operator=(赋值运算符的重载)</h3><p>先调用析构函数的<code>Destroy</code>销毁当前二叉树，然后调用<code>_CopyTree</code>重新构造当前二叉树。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//operator=</span></span><br><span class="line">BinaryTree&lt;T&gt;&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> BinaryTree&lt;T&gt;&amp; tree)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span> != &amp;tree)&#123;</span><br><span class="line">        Destroy(_root);</span><br><span class="line">        _root = _CopyTree(tree._root);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BinaryTree&lt;T&gt;&amp; operator=(BinaryTree&lt;T&gt; tree)&#123;</span></span><br><span class="line">    <span class="comment">//if(this != &amp;tree)&#123;</span></span><br><span class="line">        <span class="comment">//swap(_root, tree._root);</span></span><br><span class="line">        <span class="comment">//return *this;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure></p><p>赋值运算符的重载有两种实现方式，第一种是传统写法，第二种是现代写法。传统写法就是销毁原来的空间，然后重新开辟新的空间。对内存的操作比较多。现代写法是利用拷贝构造的方式，<strong>在传值进来的时候，生成一份临时拷贝</strong>，然后交换当前二叉树和临时拷贝的根节点，返回根节点，同时利用临时拷贝的作用域，交换后的二叉树在出了当前函数之后被销毁。<strong>相当于借用了系统的拷贝机制和自动析构机制来实现赋值的过程。</strong></p><h2 id="递归遍历"><a href="#递归遍历" class="headerlink" title="递归遍历"></a>递归遍历</h2><h3 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h3><p>先序遍历：<code>root left right</code><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//PrevOrder</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrevOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">    _PrevOrder(_root);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> _PrevOrder(Node* root)&#123;</span><br><span class="line">    <span class="keyword">if</span>(root)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; root-&gt;_data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        _PrevOrder(root-&gt;_left);</span><br><span class="line">        _PrevOrder(root-&gt;_right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><p>中序遍历：<code>left root right</code><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//InOrder</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">    _InOreder(_root);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> _InOreder(Node* root)&#123;</span><br><span class="line">    <span class="keyword">if</span>(root)&#123;</span><br><span class="line">        _InOreder(root-&gt;_left);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; root-&gt;_data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        _InOreder(root-&gt;_right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><p>后序遍历：<code>left root right</code><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//PostOrder</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">    _PostOrder(_root);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> _PostOrder(Node* root)&#123;</span><br><span class="line">    <span class="keyword">if</span>(root)&#123;</span><br><span class="line">        _PostOrder(root-&gt;_left);</span><br><span class="line">        _PostOrder(root-&gt;_right);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; root-&gt;_data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="非递归遍历"><a href="#非递归遍历" class="headerlink" title="非递归遍历"></a>非递归遍历</h2><p>之所以要出现非递归遍历，是因为递归遍历有一定的缺陷。比如：当二叉树是一颗父节点只有一个子节点的树，那么对堆栈的使用就很大，<strong>有可能出现堆栈使用太深而栈溢出的情况</strong>。为了避免这种情况的出现，有必要使用非递归遍历。<br><strong>非递归遍历利用栈来实现对之前的结点的存储</strong>，因为每一颗二叉树都有可能有左右子树，所以需要在访问单边的子树的时候，将结点保存下来，这样是为了之后可以返回去访问结点的另一边的子树。</p><h3 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h3><p>层次遍历是一层一层的遍历结点的。它与之前三个的遍历方式都不一样。<strong>他利用的是队列，通过队列让父节点带动子节点。</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//LevelOrder</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//不能是T，要用到root-&gt;_left; root-&gt;_right;</span></span><br><span class="line">    <span class="comment">//不好是Node，结构体太大;</span></span><br><span class="line">    <span class="built_in">queue</span>&lt;Node*&gt; q;</span><br><span class="line">    <span class="keyword">if</span>(_root)&#123;</span><br><span class="line">        q.push(_root);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            Node* top = q.front();</span><br><span class="line">            <span class="comment">//获取到队头之后，将当前结点pop</span></span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; top-&gt;_data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">            <span class="comment">//如果左右子树存在，就入队列</span></span><br><span class="line">            <span class="keyword">if</span>(top-&gt;_left)</span><br><span class="line">                q.push(top-&gt;_left);</span><br><span class="line">            <span class="keyword">if</span>(top-&gt;_right)</span><br><span class="line">                q.push(top-&gt;_right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="先序遍历非递归"><a href="#先序遍历非递归" class="headerlink" title="先序遍历非递归"></a>先序遍历非递归</h3><p>根据先序遍历的特点，先输出当前结点，然后一路向左，访问完左边再返回访问上一个结点的右子树，这个就是子问题，利用上面一样的方法。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//PrevOrderNonR</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrevOrderNonR</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//利用栈得以记录访问过的根，用来以后访问右子树</span></span><br><span class="line">    <span class="built_in">stack</span>&lt;Node*&gt; s;</span><br><span class="line">    Node* cur = _root;</span><br><span class="line">    <span class="keyword">while</span>(cur || !s.empty())&#123;</span><br><span class="line">        <span class="comment">//根据先根的次序，访问当前节点，并一路向左访问</span></span><br><span class="line">        <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; cur-&gt;_data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">            s.push(cur);</span><br><span class="line">            cur = cur-&gt;_left;</span><br><span class="line">        &#125;</span><br><span class="line">        Node* top = s.top();</span><br><span class="line">        <span class="comment">//pop表示左子树已经访问完，接下来访问右子树</span></span><br><span class="line">        s.pop();</span><br><span class="line">        <span class="comment">//右子树的访问是子问题</span></span><br><span class="line">        cur = top-&gt;_right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="中序遍历非递归"><a href="#中序遍历非递归" class="headerlink" title="中序遍历非递归"></a>中序遍历非递归</h3><p>中序遍历和先序遍历唯一的不同就是先序遍历是访问当前结点就打印当前结点，中序遍历就是先走完左边，再回来获取结点，这个时候再输出。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//InOrderNonR</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderNonR</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;Node*&gt; s;</span><br><span class="line">    Node* cur = _root;</span><br><span class="line">    <span class="keyword">while</span>(cur || !s.empty())&#123;</span><br><span class="line">        <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">            s.push(cur);</span><br><span class="line">            cur = cur-&gt;_left;</span><br><span class="line">        &#125;</span><br><span class="line">        Node* top = s.top();</span><br><span class="line">        s.pop();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; top-&gt;_data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        cur = top-&gt;_right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="后序遍历非递归"><a href="#后序遍历非递归" class="headerlink" title="后序遍历非递归"></a>后序遍历非递归</h3><p>后序遍历相比于之前的有一个转弯，看下图：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803061639_158.png-960.jpg" alt="后序遍历非递归"><br>所以为了区分这个点，先设立一个prev，prev指向当前结点cur的上一个结点。如果<code>prev == cur-&gt;_right</code>表示当前结点的右子树已经访问完成，那么就可以输出cur了。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//PostOrderNonR</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderNonR</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;Node*&gt; s;</span><br><span class="line">    Node* cur = _root;</span><br><span class="line">    Node* prev = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(cur || !s.empty())&#123;</span><br><span class="line">        <span class="comment">//一路向左走到底</span></span><br><span class="line">        <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">            s.push(cur);</span><br><span class="line">            cur = cur-&gt;_left;</span><br><span class="line">        &#125;</span><br><span class="line">        Node* top = s.top();</span><br><span class="line">        <span class="comment">//访问当前结点的两个条件</span></span><br><span class="line">        <span class="comment">//1、没有右子树</span></span><br><span class="line">        <span class="comment">//2、右子树已经访问完成</span></span><br><span class="line">        <span class="keyword">if</span>(top-&gt;_right == <span class="literal">NULL</span> || prev == top-&gt;_right)&#123;</span><br><span class="line">            s.pop();</span><br><span class="line">            <span class="comment">//此时的top成为过去式，将top设置为prev</span></span><br><span class="line">            prev = top;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; top-&gt;_data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//此时表示右子树还没有访问</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cur = top-&gt;_right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="结点个数函数"><a href="#结点个数函数" class="headerlink" title="结点个数函数"></a>结点个数函数</h2><p>以下函数都利用了递归的思想。</p><h3 id="统计结点个数函数Size"><a href="#统计结点个数函数Size" class="headerlink" title="统计结点个数函数Size"></a>统计结点个数函数Size</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Size</span></span><br><span class="line"><span class="keyword">size_t</span> Size()&#123;</span><br><span class="line">    <span class="keyword">return</span> _Size(_root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">size_t</span> _Size(Node* root)&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> _Size(root-&gt;_left) + _Size(root-&gt;_right) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="统计深度函数Depth"><a href="#统计深度函数Depth" class="headerlink" title="统计深度函数Depth"></a>统计深度函数Depth</h3><p>统计深度的时候，因为二叉树有左右子树，所以需要区分是左子树结点多还是右子树结点多。通过两个变量来记录，分别统计大小，然后再比较大小，大的是深度。<br>这里默认根节点是第一层<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Depth</span></span><br><span class="line"><span class="keyword">size_t</span> Depth()&#123;</span><br><span class="line">    <span class="keyword">return</span> _Depth(_root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">size_t</span> _Depth(Node* root)&#123;</span><br><span class="line">    <span class="keyword">size_t</span> leftnum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">size_t</span> rightnum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//如果存在就接着往下递归</span></span><br><span class="line">    <span class="keyword">if</span>(root-&gt;_left)</span><br><span class="line">        leftnum += _Depth(root-&gt;_left);</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;_right)</span><br><span class="line">        rightnum += _Depth(root-&gt;_right);</span><br><span class="line">    <span class="keyword">return</span> (leftnum &gt; rightnum ? leftnum : rightnum) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="统计叶子结点个数的函数LeafSize"><a href="#统计叶子结点个数的函数LeafSize" class="headerlink" title="统计叶子结点个数的函数LeafSize"></a>统计叶子结点个数的函数LeafSize</h3><p>叶子结点的统计是在当前结点都没有左右子树的时候返回个数1。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//LeafSize</span></span><br><span class="line"><span class="keyword">size_t</span> LeafSize()&#123;</span><br><span class="line">    <span class="keyword">return</span> _LeafSize(_root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">size_t</span> _LeafSize(Node* root)&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;_left == <span class="literal">NULL</span> &amp;&amp; root-&gt;_right == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> _LeafSize(root-&gt;_left) + _LeafSize(root-&gt;_right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="计算第K层的结点个数函数GetKLevel"><a href="#计算第K层的结点个数函数GetKLevel" class="headerlink" title="计算第K层的结点个数函数GetKLevel"></a>计算第K层的结点个数函数GetKLevel</h3><p>这个函数可以<strong>通过子问题的思想</strong>来解决。比如：我要计算第三层，当指针在第一层的时候，是计算K=3；当指针在第二层的时候，是计算K=2；当指针在第三层的时候，是计算K=1的结点个数。所以只要当K=1的时候返回计算值1就好了。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//GetKLevel</span></span><br><span class="line"><span class="keyword">size_t</span> GetKLevel(<span class="keyword">size_t</span> K)&#123;</span><br><span class="line">    <span class="keyword">return</span> _GetKLevel(_root, K);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">size_t</span> _GetKLevel(Node* root, <span class="keyword">size_t</span> K)&#123;</span><br><span class="line">    <span class="keyword">if</span>(K == <span class="number">0</span> || root == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(K == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//不能使用--K，应该用K-1。</span></span><br><span class="line">    <span class="comment">//不能返回除了K=1的其他情况。</span></span><br><span class="line">    <span class="keyword">return</span> _GetKLevel(root-&gt;_left, K - <span class="number">1</span>) + _GetKLevel(root-&gt;_right, K - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a1[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">'#'</span>,<span class="string">'#'</span>,<span class="number">4</span>,<span class="string">'#'</span>,<span class="string">'#'</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="string">'#'</span>,<span class="string">'#'</span>,<span class="string">'#'</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> a2[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="string">'#'</span>,<span class="number">3</span>,<span class="string">'#'</span>,<span class="string">'#'</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">'#'</span>,<span class="number">6</span>,<span class="string">'#'</span>,<span class="number">7</span>,<span class="string">'#'</span>,<span class="string">'#'</span>,<span class="number">8</span>,<span class="string">'#'</span>,<span class="string">'#'</span>&#125;;</span><br><span class="line">BinaryTree&lt;<span class="keyword">int</span>&gt; tree(a1,<span class="string">'#'</span>);</span><br><span class="line">BinaryTree&lt;<span class="keyword">int</span>&gt; tree1(a2, <span class="string">'#'</span>);</span><br><span class="line">BinaryTree&lt;<span class="keyword">int</span>&gt; tree2(tree);</span><br><span class="line">tree2 = tree1;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"tree.PrevOrder"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">tree.PrevOrder();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"tree1.InOrder"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">tree1.InOrder();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"tree2.PostOrder"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">tree2.PostOrder();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"tree.LevelOrder"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">tree.LevelOrder();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"tree.PrevOrderNonR"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">tree.PrevOrderNonR();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"tree1.InOrderNonR"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">tree1.InOrderNonR();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"tree2.PostOrderNonR"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">tree2.PostOrderNonR();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"tree.Size:"</span> &lt;&lt; tree.Size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"tree.Depth:"</span> &lt;&lt; tree.Depth() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"tree.LeafSize:"</span> &lt;&lt; tree.LeafSize() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"tree.GetKLevel(K=2):"</span> &lt;&lt; tree.GetKLevel(<span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"tree1.Size:"</span> &lt;&lt; tree1.Size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"tree1.Depth:"</span> &lt;&lt; tree1.Depth() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"tree1.LeafSize:"</span> &lt;&lt; tree1.LeafSize() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"tree1.GetKLevel(K=3):"</span> &lt;&lt; tree1.GetKLevel(<span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>截图如下：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803061640_12.png-960.jpg" alt="测试"><br>二叉树的实现，最重要的是要掌握子问题的思想，通过子问题的思想来解决左右子树，只需要一个递归就好了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;二叉树&quot;&gt;&lt;a href=&quot;#二叉树&quot; class=&quot;headerlink&quot; title=&quot;二叉树&quot;&gt;&lt;/a&gt;二叉树&lt;/h2&gt;&lt;p&gt;本文将使用c++实现模板类的二叉树，内容包括创建、递归遍历、非递归遍历、结点个数、深度、叶子结点的个数、第K层结点个数等函数。&lt;/p&gt;
&lt;h3 id=&quot;结点、二叉树结构&quot;&gt;&lt;a href=&quot;#结点、二叉树结构&quot; class=&quot;headerlink&quot; title=&quot;结点、二叉树结构&quot;&gt;&lt;/a&gt;结点、二叉树结构&lt;/h3&gt;&lt;p&gt;二叉树的结点是一个结构体，包括值&lt;code&gt;_data&lt;/code&gt;，指向左子树的指针和指向右子树的指针&lt;code&gt;_left&lt;/code&gt;和&lt;code&gt;_right&lt;/code&gt;。还有构造函数，用于创建结点。
    
    </summary>
    
      <category term="knowledge" scheme="http://www.jingxxn.cn/categories/knowledge/"/>
    
      <category term="C/C++" scheme="http://www.jingxxn.cn/categories/knowledge/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>智能指针</title>
    <link href="http://www.jingxxn.cn/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88.html"/>
    <id>http://www.jingxxn.cn/智能指针.html</id>
    <published>2018-02-25T01:28:08.000Z</published>
    <updated>2018-02-26T07:50:16.314Z</updated>
    
    <content type="html"><![CDATA[<p>智能指针是C++中一个编程技巧。它保证内存的正确释放，解决了内存泄漏的问题。有一个思想叫做RAII，<strong>RAII指的是资源分配即初始化。我们通常会定义一个类来封装资源的分配和释放，在构造函数中完成资源的分配和初始化，在析构函数中完成资源的清理。</strong><br>在C++中，我们一般是使用new和delete来实现内存的初始化和释放。正确的配对使用可以处理绝大部分问题，但是如果出现了执行流的跳转，比如：语句中间出现了return，break，continue，goto，等关键字，我们的delete可能没有执行，这样就导致了内存没有被释放。又或者我们的语句出现了错误，抛出异常导致程序结束，也有可能没有执行delete语句。这 <strong>些问题都导致了内存泄漏。智能指针的出现就是为了解决这些问题的。智能指针其实是一个类，它可以自动的处理指针指向的动态资源的释放。</strong></p><h3 id="发展历程"><a href="#发展历程" class="headerlink" title="发展历程"></a>发展历程<a id="more"></a></h3><ul><li>早期C++98：auto_ptr，最早出现的智能指针，拷贝机制是管理权转移，致命缺陷，不使用。</li><li>boost(非官方)：<ol><li>scoped_ptr/scoped_array：守卫指针，拷贝机制是不拷贝，简单粗暴</li><li><strong>shared_ptr/shared_array：共享指针，拷贝机制是引用计数，比较复杂，会出现循环引用的问题。</strong></li><li><strong>weak_ptr：弱指针，不单独使用，辅助共享指针解决循环引用的问题</strong></li></ol></li><li>C++11：unique_ptr对应boost的scoped_ptr；shared_ptr对应boost的shared_ptr；weak_ptr对应boost的weak_ptr。</li></ul><p>本文主要实现shared_ptr和weak_ptr的模拟，auto_ptr和scoped_ptr模拟拷贝相关的函数。</p><h3 id="auto-ptr"><a href="#auto-ptr" class="headerlink" title="auto_ptr"></a>auto_ptr</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟主要函数：</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">AutoPtr</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T* _ptr;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    AutoPtr(T* ptr)&#123; _ptr = ptr; &#125;</span><br><span class="line">    ~AutoPtr()&#123; <span class="keyword">delete</span> _ptr; &#125;</span><br><span class="line">    T&amp; <span class="keyword">operator</span>*()&#123; <span class="keyword">return</span> *_ptr; &#125;</span><br><span class="line">    T* <span class="keyword">operator</span>-&gt;()&#123; <span class="keyword">return</span> _ptr; &#125;</span><br><span class="line"></span><br><span class="line">    AutoPtr(AutoPtr&lt;T&gt;&amp; ap)&#123;</span><br><span class="line">        <span class="comment">//管理权转移</span></span><br><span class="line">        _ptr = ap._ptr;</span><br><span class="line">        ap._ptr = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    AutoPtr&lt;T&gt;&amp; <span class="keyword">operator</span>=(AutoPtr&lt;T&gt;&amp; ap)&#123;</span><br><span class="line">        <span class="comment">//自己给自己赋值不作处理</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> != &amp;ap)&#123;</span><br><span class="line">            <span class="keyword">if</span>(_ptr)</span><br><span class="line">                <span class="keyword">delete</span> _ptr;</span><br><span class="line">            <span class="comment">//管理权转移</span></span><br><span class="line">            _ptr = ap._ptr;</span><br><span class="line">            ap_ptr = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    AutoPtr&lt;<span class="keyword">int</span>&gt; ap1(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>));</span><br><span class="line">    AutoPtr&lt;<span class="keyword">int</span>&gt;ap2 = ap1;</span><br><span class="line">    <span class="comment">//崩溃，因为ap1已经指向NULL</span></span><br><span class="line">    *ap1 = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图解如下：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201802251035_295.png-960.jpg" alt="AutoPtr"><br><strong>任何时候我们都不使用auto_ptr，因为管理权的转移是不符合我们正常指针的使用的，而且会引起程序崩溃，这个是不允许的。</strong><br>最后，解释一下，<code>operator-&gt;()</code>返回<code>T*</code>的原因：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设定一个类</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span> <span class="keyword">int</span> num; &#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">AutoPtr&lt;student&gt; sp = <span class="keyword">new</span> student;</span><br><span class="line">sp-&gt;num = <span class="number">20</span>;</span><br></pre></td></tr></table></figure></p><p><code>sp-&gt;num</code>等价于<code>sp.operator-&gt;()</code>。<code>sp.operaotr-&gt;()</code>返回<code>T*</code>指针之后，编译器自动将原式优化为<code>_ptr-&gt;num</code>,从而实现对元素的访问。</p><h3 id="scoped-ptr"><a href="#scoped-ptr" class="headerlink" title="scoped_ptr"></a>scoped_ptr</h3><p>防拷贝的智能指针，boost版本相当于C++11的unique_ptr<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟拷贝的主要函数：</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">ScopedPtr</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//与AutoPtr不同的就是这两个函数</span></span><br><span class="line">    ScopedPtr(<span class="keyword">const</span> ScopedPtr&lt;T&gt;&amp; sp);</span><br><span class="line">    ScopedPtr&lt;T&gt;&amp; <span class="keyword">operator</span>= (<span class="keyword">const</span> ScopedPtr&lt;T&gt;&amp; sp);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>scoped_ptr通过将拷贝构造函数和赋值运算符重载定义为私有，同时只声明不定义，这样可以保证该类不能被拷贝。</strong>这就简单的解决了auto_ptr因为拷贝导致的管理权转移问题。</p><h3 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a>shared_ptr</h3><p><strong>引用计数的智能指针，这个类除了有指针之外，再多开辟了一个内存空间，用于存放计数。</strong>这种智能指针是实现的最好的，在boost库中，实现起来很复杂，因为要考虑多线程等情况。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟主要函数</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">SharedPtr</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T* _ptr;</span><br><span class="line">    <span class="keyword">int</span>* _refcount;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造</span></span><br><span class="line">    SharedPtr(<span class="keyword">const</span> T&amp; ptr)&#123;</span><br><span class="line">        _ptr = ptr;</span><br><span class="line">        _refcount = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//析构</span></span><br><span class="line">    ~SharedPtr()&#123;</span><br><span class="line">        <span class="keyword">if</span>(--_refcount == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">delete</span> _ptr;</span><br><span class="line">            <span class="keyword">delete</span> _refcount;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//拷贝构造</span></span><br><span class="line">    SharedPtr(SharedPtr&lt;T&gt;&amp; sp)&#123;</span><br><span class="line">        _ptr = sp._ptr;</span><br><span class="line">        _refcount = sp._refcount;</span><br><span class="line">        ++_refcount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//赋值运算符重载</span></span><br><span class="line">    SharedPtr&lt;T&gt;&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> SharedPtr&lt;T&gt;&amp; sp)&#123;</span><br><span class="line">        <span class="keyword">if</span>(*<span class="keyword">this</span> != &amp;sp)&#123;</span><br><span class="line">            <span class="keyword">if</span>(--(*_refcount) == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">delete</span> _ptr;</span><br><span class="line">                <span class="keyword">delete</span> _refcount;</span><br><span class="line">            &#125;</span><br><span class="line">            _ptr = sp._ptr;</span><br><span class="line">            _refcount = sp._refcount;</span><br><span class="line">            (*_refcount)++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//*重载</span></span><br><span class="line">    T&amp; <span class="keyword">operator</span>*()&#123; <span class="keyword">return</span> *_ptr; &#125;</span><br><span class="line">    <span class="comment">//-&gt;重载</span></span><br><span class="line">    T* <span class="keyword">operator</span>-&gt;()&#123; <span class="keyword">return</span> _ptr; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>这个实现，将是比较实用的。但是依然有一个场景下，会出现问题。这个问题叫做循环引用，问题的根源是引用计数被循环使用，不能减为0，导致死循环。下面以双向链表作为例子：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个链表节点如下</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//为了方便调用，设为public</span></span><br><span class="line">    <span class="keyword">int</span> _data;</span><br><span class="line">    SharedPtr&lt;ListNode&gt; _next;</span><br><span class="line">    SharedPtr&lt;ListNode&gt; _prev;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//调用这个节点，设定这样一个场景</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SharedPtr&lt;ListNode&gt; cur(<span class="keyword">new</span> ListNode);</span><br><span class="line">    SharedPtr&lt;ListNode&gt; next(<span class="keyword">new</span> ListNode);</span><br><span class="line">    cur-&gt;_next = next;</span><br><span class="line">    next-&gt;_prev = cur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建模型如下：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201802251655_141.png-480.jpg" alt="循环引用"><br>根据上面例子，<code>_next</code>和<code>next</code>都指向后面节点这个空间，<code>next._refcount = 2</code>。<code>_prev</code>和<code>cur</code>指向前面那个节点的空间，<code>cur._refcount = 2</code>。当程序结束的时候，<code>next</code>先被析构。若需要析构<code>next</code>就需要析构<code>next._prev</code>;要析构<code>next._prev</code>就需要析构<code>cur</code>;要析构<code>cur</code>就需要析构<code>cur._next</code>;要析构<code>cur._next</code>就需要析构<code>next</code>……这样就造成了死循环。为了解决这个循环引用的问题，引入了弱指针weak_ptr。</p><h3 id="weak-ptr"><a href="#weak-ptr" class="headerlink" title="weak_ptr"></a>weak_ptr</h3><p><strong>弱指针不单独使用，它的存在就是为了解决使用shared_ptr造成的循环引用问题。</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">WeakPtr</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T* _ptr;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    WeakPtr()&#123;</span><br><span class="line">        _ptr = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    WeakPtr(<span class="keyword">const</span> SharedPtr&lt;T&gt;&amp; sp)&#123;</span><br><span class="line">        _ptr = sp._ptr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    T&amp; <span class="keyword">operator</span>*()&#123; <span class="keyword">return</span> *_ptr; &#125;</span><br><span class="line">    T* <span class="keyword">operator</span>-&gt;()&#123; <span class="keyword">return</span> _ptr; &#125;</span><br><span class="line"></span><br><span class="line">    WeakPtr&lt;T&gt;&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> SharedPtr&lt;T&gt;&amp; sp)&#123;</span><br><span class="line">        _ptr = sp._ptr;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//还需要修改一下两处：</span></span><br><span class="line"><span class="comment">//1、修改ListNode的结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> _data;</span><br><span class="line">    WeakPtr&lt;ListNode&gt; _next;</span><br><span class="line">    WeakPtr&lt;ListNode&gt; _prev;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、将WeakPtr定义为SharedPtr的友元，因为WeakPtr中需要访问SharedPtr的私有成员</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">SharedPtr</span>&#123;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">WeakPtr</span>;</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>这样，上面那个例子中，<code>next._refcount = 1</code>，<code>cur._refcount = 1</code>,就不会出现循环引用的问题了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;智能指针是C++中一个编程技巧。它保证内存的正确释放，解决了内存泄漏的问题。有一个思想叫做RAII，&lt;strong&gt;RAII指的是资源分配即初始化。我们通常会定义一个类来封装资源的分配和释放，在构造函数中完成资源的分配和初始化，在析构函数中完成资源的清理。&lt;/strong&gt;&lt;br&gt;在C++中，我们一般是使用new和delete来实现内存的初始化和释放。正确的配对使用可以处理绝大部分问题，但是如果出现了执行流的跳转，比如：语句中间出现了return，break，continue，goto，等关键字，我们的delete可能没有执行，这样就导致了内存没有被释放。又或者我们的语句出现了错误，抛出异常导致程序结束，也有可能没有执行delete语句。这 &lt;strong&gt;些问题都导致了内存泄漏。智能指针的出现就是为了解决这些问题的。智能指针其实是一个类，它可以自动的处理指针指向的动态资源的释放。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;发展历程&quot;&gt;&lt;a href=&quot;#发展历程&quot; class=&quot;headerlink&quot; title=&quot;发展历程&quot;&gt;&lt;/a&gt;发展历程
    
    </summary>
    
      <category term="knowledge" scheme="http://www.jingxxn.cn/categories/knowledge/"/>
    
      <category term="C/C++" scheme="http://www.jingxxn.cn/categories/knowledge/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>模板的类型萃取</title>
    <link href="http://www.jingxxn.cn/%E6%A8%A1%E6%9D%BF%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%90%83%E5%8F%96.html"/>
    <id>http://www.jingxxn.cn/模板的类型萃取.html</id>
    <published>2018-02-24T06:56:38.000Z</published>
    <updated>2018-02-24T09:30:16.478Z</updated>
    
    <content type="html"><![CDATA[<p><strong>类型萃取，是C++中的一种编程技术。当我们希望对模板传递的不同类型进行不同的操作的时候，同时我们又不希望改变该模板的封装方式。我们可以通过这种技术，对传入的不同类型进行不同的原理操作。</strong></p><h3 id="特化"><a href="#特化" class="headerlink" title="特化"></a>特化</h3><p>要明白类型萃取，首先要知道模板中的特化。一般来说，我们的模板是通用类型的，但是如果有一些类型，我们希望有不同的操作方式，我们就可以通过特化的方式。例子如下：<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模板的一般版本</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">number</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"number"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//模板的int类型特化版本</span></span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">number</span>&lt;int&gt;&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"int"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    system(<span class="string">"clear"</span>);</span><br><span class="line">    number&lt;<span class="keyword">int</span>&gt; numint;</span><br><span class="line">    numint.show();</span><br><span class="line"></span><br><span class="line">    number&lt;<span class="keyword">float</span>&gt; numfloat;</span><br><span class="line">    numfloat.show();</span><br><span class="line"></span><br><span class="line">    number&lt;<span class="keyword">char</span>&gt; numchar;</span><br><span class="line">    numchar.show();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>只有int类型才会输出int，其它的就像是float和char类型输出的都是number<br><img src="http://p3ax8ersb.bkt.clouddn.com/201802241550_647.png-480.jpg" alt="特化的输出"><br>特化的方式，其实是十分冗余的。如果我的number类有很多的封装，那么实现它的特化，就需要将这些封装重新实现一遍。这样的复用性就十分低。</p><h3 id="类型萃取TypeTraits"><a href="#类型萃取TypeTraits" class="headerlink" title="类型萃取TypeTraits"></a>类型萃取TypeTraits</h3><p>关于类型萃取的知识，可以看看我的这篇读书笔记中的3.3和3.4<br><a href="http://jingxxn.cn/%E6%B5%85%E8%AF%BB%E3%80%8ASTL%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E3%80%8B%E7%AC%94%E8%AE%B0-3%E7%AB%A0.html" target="_blank" rel="noopener">我的个人博客文章地址</a><br><a href="http://blog.csdn.net/mac_timmy/article/details/79291828" target="_blank" rel="noopener">我的CSDN博客文章地址</a><br>这里我进行一个对于自创类SeqList类(对STL中vector的模拟)的类型萃取举例，情景说明：这里我想要对模板类SeqList进行拷贝，涉及到一个问题。如果我的元素类型是string的话，我必须进行深拷贝，否则就会出现奔溃的情况，这是对内存的使用出现问题。当我的元素类型是int、float、char等平凡类型(即POD:plain old data，基本类型，这些类型的拷贝不会涉及到内存的使用异常)，我就可以使用浅拷贝，这样比起深拷贝提高了效率。<br>这个时候，我通过在SeqList类中进行类型萃取，就可以实现两种不同的拷贝方式：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义两个空类</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">TrueType</span>&#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">FalseType</span>&#123;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一般类型及特化(内嵌重定义IsPODType)</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> __<span class="title">TypeTraits</span>&#123;</span> <span class="keyword">typedef</span> __FalseType IsPODType; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">TypeTraits</span>&lt;int&gt;&#123;</span> <span class="keyword">typedef</span> __TrueType IsPODType; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现功能函数(用__TrueType/__FalseType实现重载)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span>* __<span class="title">TypeCopy</span>(<span class="title">T</span>* <span class="title">dst</span>, <span class="title">const</span> <span class="title">T</span>* <span class="title">src</span>, <span class="title">size_t</span> <span class="title">n</span>, __<span class="title">TrueType</span>)&#123;</span></span><br><span class="line">    <span class="comment">//浅拷贝，调用memcpy</span></span><br><span class="line">    <span class="keyword">return</span> (T*)<span class="built_in">memcpy</span>(dst, src, n*<span class="keyword">sizeof</span>(T));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span>* __<span class="title">TypeCopy</span>(<span class="title">T</span>* <span class="title">dst</span>, <span class="title">const</span> <span class="title">T</span>* <span class="title">src</span>, <span class="title">size_t</span> <span class="title">n</span>, __<span class="title">FalseType</span>)&#123;</span></span><br><span class="line">    <span class="comment">//深拷贝，进行了 operator= 调用</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i&lt;n; ++i)&#123;</span><br><span class="line">        dst[i] = src[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dst;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对外接口(实现IsPODType的__TrueType和__FalseType的转换)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span>* <span class="title">TypeCopy</span>(<span class="title">T</span>* <span class="title">dst</span>, <span class="title">const</span> <span class="title">T</span>* <span class="title">src</span>, <span class="title">size_t</span> <span class="title">n</span>)&#123;</span></span><br><span class="line">    <span class="keyword">return</span> __TypeCopy(dst, src, n, __TypeTraits&lt;T&gt;::IsPODType);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a1[<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> a2[<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> s1[<span class="number">3</span>] = &#123;<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>&#125;;</span><br><span class="line">    <span class="built_in">string</span> s2[<span class="number">3</span>] = &#123;<span class="string">"0"</span>, <span class="string">"0"</span>, <span class="string">"0"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    TypeCopy(a1, a2, <span class="number">3</span>);</span><br><span class="line">    TypeCopy(s1, s2, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样，当传入的参数是s1,s2的时候，<code>__TypeTraits</code>调用的是一般版本，<code>IsPODType</code>为<code>__FalseType</code>,这样<code>__TypeCopy</code>调用的是<code>__FalseType</code>的重载版本，进行深拷贝。当传入的参数是a1，a2的时候，调用的是<code>__TrueType</code>的重载版本，进行浅拷贝。这里只对int进行了特化，所以只有int可以调用<code>__TrueType</code>的版本。但是我们可以对float、double等PODType进行特化，这样就大大提高了代码的复用性。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;类型萃取，是C++中的一种编程技术。当我们希望对模板传递的不同类型进行不同的操作的时候，同时我们又不希望改变该模板的封装方式。我们可以通过这种技术，对传入的不同类型进行不同的原理操作。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;特化&quot;&gt;&lt;a href=&quot;#特化&quot; class=&quot;headerlink&quot; title=&quot;特化&quot;&gt;&lt;/a&gt;特化&lt;/h3&gt;&lt;p&gt;要明白类型萃取，首先要知道模板中的特化。一般来说，我们的模板是通用类型的，但是如果有一些类型，我们希望有不同的操作方式，我们就可以通过特化的方式。例子如下：&lt;br&gt;
    
    </summary>
    
      <category term="knowledge" scheme="http://www.jingxxn.cn/categories/knowledge/"/>
    
      <category term="C/C++" scheme="http://www.jingxxn.cn/categories/knowledge/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>模板与分离编译</title>
    <link href="http://www.jingxxn.cn/%E6%A8%A1%E6%9D%BF%E4%B8%8E%E5%88%86%E7%A6%BB%E7%BC%96%E8%AF%91.html"/>
    <id>http://www.jingxxn.cn/模板与分离编译.html</id>
    <published>2018-02-24T06:56:19.000Z</published>
    <updated>2018-02-24T14:58:30.756Z</updated>
    
    <content type="html"><![CDATA[<h3 id="分离编译模式"><a href="#分离编译模式" class="headerlink" title="分离编译模式"></a>分离编译模式</h3><p>一个项目如果有多个源文件组成，每个源文件单独编译，形成目标文件。最后通过链接器将所有的目标文件链接起来，形成一个可执行的文件。这个过程就叫做分离编译。</p><h3 id="模板不能分离编译"><a href="#模板不能分离编译" class="headerlink" title="模板不能分离编译"></a>模板不能分离编译</h3><p>有一个项目，其中函数声明放在”test.h”中，函数实现放在”test.cpp”中，函数调用放在”main.cpp”中。如果没用使用模板，将不会有任何问题。而且这样是被推荐使用的。<a id="more"></a>但是如果有函数的实现是模板函数或有模板类，将会出现链接错误。代码如下:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">print</span>(<span class="title">T</span> <span class="title">num</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//test.cpp</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">print</span>(<span class="title">T</span> <span class="title">num</span>)&#123;</span> <span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"test.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> number = <span class="number">10</span>;</span><br><span class="line">    print(number);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样的代码看起来是没有问题的。执行的时候并不会出现编译错误，但是会出现链接错误。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201802242117_802.png-1920.jpg" alt="链接错误"><br>这是因为采取了分离编译之后，我们的.cpp文件是独立编译的。test.cpp中的模板函数，由于没有被调用，所以它的T并没有被实例化相应的类型，比如例子中的int类型。main.cpp中调用了函数print，他需要实例print(int num)。在链接的时候，找不到需要的实例化函数，这样就产生了错误。</p><h3 id="解决办法1-显示实例化"><a href="#解决办法1-显示实例化" class="headerlink" title="解决办法1-显示实例化"></a>解决办法1-显示实例化</h3><p>在函数定义的时候，指定我们需要实例化的类型。在头文件定义中添加指定类型的定义：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">print</span>(<span class="title">T</span> <span class="title">num</span>);</span></span><br><span class="line"><span class="comment">//添加int定义</span></span><br><span class="line"><span class="keyword">template</span> <span class="keyword">void</span> print&lt;<span class="keyword">int</span>&gt;(<span class="keyword">int</span> num);</span><br></pre></td></tr></table></figure></p><p>这种方式是最简单，但是这样却是最麻烦的。如果我有多个不同类型，就需要有相应个数的特化。</p><h3 id="解决办法2-不使用分离编译"><a href="#解决办法2-不使用分离编译" class="headerlink" title="解决办法2-不使用分离编译"></a>解决办法2-不使用分离编译</h3><p>既然不能使用，那么我们不使用分离编译就是了。将我们的函数声明和函数定义放在test.h中。这样我们编译的时候，需要将头文件展开，这样就可以将模板函数在编译的时候实例化。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test.h</span></span><br><span class="line"><span class="comment">//不需要test.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">print</span>(<span class="title">T</span> <span class="title">num</span>)&#123;</span> <span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br></pre></td></tr></table></figure></p><p>这样解决了模板的分离编译的问题，但是这样也就暴露了我们的函数定义。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;分离编译模式&quot;&gt;&lt;a href=&quot;#分离编译模式&quot; class=&quot;headerlink&quot; title=&quot;分离编译模式&quot;&gt;&lt;/a&gt;分离编译模式&lt;/h3&gt;&lt;p&gt;一个项目如果有多个源文件组成，每个源文件单独编译，形成目标文件。最后通过链接器将所有的目标文件链接起来，形成一个可执行的文件。这个过程就叫做分离编译。&lt;/p&gt;
&lt;h3 id=&quot;模板不能分离编译&quot;&gt;&lt;a href=&quot;#模板不能分离编译&quot; class=&quot;headerlink&quot; title=&quot;模板不能分离编译&quot;&gt;&lt;/a&gt;模板不能分离编译&lt;/h3&gt;&lt;p&gt;有一个项目，其中函数声明放在”test.h”中，函数实现放在”test.cpp”中，函数调用放在”main.cpp”中。如果没用使用模板，将不会有任何问题。而且这样是被推荐使用的。
    
    </summary>
    
      <category term="knowledge" scheme="http://www.jingxxn.cn/categories/knowledge/"/>
    
      <category term="C/C++" scheme="http://www.jingxxn.cn/categories/knowledge/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>浅读《STL源码剖析》笔记 4章-vector和list</title>
    <link href="http://www.jingxxn.cn/%E6%B5%85%E8%AF%BB%E3%80%8ASTL%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E3%80%8B%E7%AC%94%E8%AE%B0-4%E7%AB%A0-vector%E5%92%8Clist.html"/>
    <id>http://www.jingxxn.cn/浅读《STL源码剖析》笔记-4章-vector和list.html</id>
    <published>2018-02-09T02:13:57.000Z</published>
    <updated>2018-03-06T08:42:21.511Z</updated>
    
    <content type="html"><![CDATA[<h2 id="4-序列式容器"><a href="#4-序列式容器" class="headerlink" title="4 序列式容器"></a>4 序列式容器</h2><h3 id="4-1-容器的概观与分类"><a href="#4-1-容器的概观与分类" class="headerlink" title="4.1 容器的概观与分类"></a>4.1 容器的概观与分类</h3><p><img src="http://p3ax8ersb.bkt.clouddn.com/201801311638_540.png-960.jpg" alt="SGI STL的各个容器"><br>所谓序列式容器，其中的元素都是可序的(ordered),但未必有序(sorted)。C++本身有array，其它是STL提供的。<br><a id="more"></a></p><h3 id="4-2-vector"><a href="#4-2-vector" class="headerlink" title="4.2 vector"></a>4.2 vector</h3><h4 id="4-2-1-vector概述"><a href="#4-2-1-vector概述" class="headerlink" title="4.2.1 vector概述"></a>4.2.1 vector概述</h4><p>array是静态的，vector是动态增长的，随着元素的增加，内部机制自动扩充空间以容纳元素，不需要自己分配空间。</p><h4 id="4-2-3-vector的迭代器"><a href="#4-2-3-vector的迭代器" class="headerlink" title="4.2.3 vector的迭代器"></a>4.2.3 vector的迭代器</h4><p>由于vector维护的是连续线性空间，所以不论元素类型是什么，普通指针都可以作为vector的迭代器而满足要求。vector支持随机存取，普通指针也满足。<code>vector&lt;int&gt; :: iterator ivite;vector&lt;Shape&gt; :: iterator svite;</code>其中 <code>ivite</code>的类型就是<code>int*</code>，<code>svite</code>的类型就是<code>Shape*</code> 。</p><h4 id="4-2-4-vector的数据结构"><a href="#4-2-4-vector的数据结构" class="headerlink" title="4.2.4 vector的数据结构"></a>4.2.4 vector的数据结构</h4><p>vector的数据结构如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Alloc</span> = <span class="title">alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">vecotr</span>&#123;</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">    <span class="comment">//注意STL的左闭右开特性。finish和end_of_storage指向最后一个元素的下一个位置</span></span><br><span class="line">        iterator start;             <span class="comment">//表示目前使用空间的头部</span></span><br><span class="line">        iterator finish;            <span class="comment">//表示目前使用空间的尾部</span></span><br><span class="line">        iterator end_of_storage;    <span class="comment">//表示目前可用空间的尾部</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为了降低空间配置时的成本，实际上，vector配置的空间会比客户端需要的更大一些，这样是为了将来可能扩充的准备。当容量等于大小的时候，开辟新的空间。<br>运用 start，finish，end_of_storage三个迭代器，可以实现begin(),end(),size(),capacity(),empty(),operator[],front(),back()等方法。</p><h4 id="4-2-5-vector的构造与内存管理：constructor，push-back"><a href="#4-2-5-vector的构造与内存管理：constructor，push-back" class="headerlink" title="4.2.5 vector的构造与内存管理：constructor，push_back"></a>4.2.5 vector的构造与内存管理：constructor，push_back</h4><p>push_back：将新元素插入vector尾端的时候，先检查是否还有备用空间，够的话，直接构造元素，并调整finish。如果没有备用空间，动态增长空间。这指并不是在原空间之后开辟新的空间，因为无法保证原空间之后还有可供配置的空间。而是以原大小的两倍例外配置一块大的空间，然后将原内容拷贝过来，然后才开始在原内容之后构造新元素，并释放原空间。<strong>因此，对于vector的任何操作，一旦引起了空间重新配置，指向原vector的所有迭代器都是失效了。</strong>push_back源代码节选如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_back</span><span class="params">( <span class="keyword">const</span> T&amp; x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( finish != end_of_storage )&#123;</span><br><span class="line">        construct( finish, x );</span><br><span class="line">        ++finish;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>    <span class="comment">//无备用空间</span></span><br><span class="line">    insert_aux(end(), x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">vector</span>&lt;T, Alloc&gt;:</span>:insert_aux( iterator positon, <span class="keyword">const</span> T&amp; x )&#123;</span><br><span class="line">    <span class="keyword">if</span>( finish != end_of_storage )&#123; <span class="comment">//为什么还要再次判断</span></span><br><span class="line">        construct( finish, *(finish - <span class="number">1</span>));</span><br><span class="line">        ++finish;</span><br><span class="line">        T x_copy = x;</span><br><span class="line">        <span class="comment">//不懂</span></span><br><span class="line">        copy_backward(position, finish - <span class="number">2</span>, finish - <span class="number">1</span>);</span><br><span class="line">        *position = x_copy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;   <span class="comment">//无备用空间</span></span><br><span class="line">        <span class="keyword">const</span> size_type old_size = size();</span><br><span class="line">        <span class="keyword">const</span> size_type len = old_size != <span class="number">0</span> ? <span class="number">2</span>*old_size : <span class="number">1</span>;</span><br><span class="line">        iterator new_start = data_allocator::allocatr(len); <span class="comment">//实际配置空间</span></span><br><span class="line">        iterator new_finish = new_start;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//将原来vector内容拷贝到新的vector</span></span><br><span class="line">            new_finish = uninitialized_copy(start, position, new_start);</span><br><span class="line">            <span class="comment">//为新元素设定初值x</span></span><br><span class="line">            construct(new_finish, x);</span><br><span class="line">            ++new_finish;</span><br><span class="line">            <span class="comment">//将安插点的原内容也拷贝过来//不懂</span></span><br><span class="line">            new_finish = uninitialized_copy(posiition, finish, new_finish);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(...)&#123;</span><br><span class="line">            <span class="comment">//开辟失败</span></span><br><span class="line">            destroy(new_start, new_finish);</span><br><span class="line">            data_allocator::deallocate(new_start, len);</span><br><span class="line">            <span class="keyword">throw</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//析构并释放原vector</span></span><br><span class="line">        destory(begin(), end());</span><br><span class="line">        deallocate();</span><br><span class="line">        <span class="comment">//调整迭代器，指向新的vector</span></span><br><span class="line">        start = new_start;</span><br><span class="line">        finish = new_finish;</span><br><span class="line">        end_of_storage = new_start+len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="4-2-6-vector的元素操作：pop-back-erase-clear-insert"><a href="#4-2-6-vector的元素操作：pop-back-erase-clear-insert" class="headerlink" title="4.2.6 vector的元素操作：pop_back, erase, clear, insert"></a>4.2.6 vector的元素操作：pop_back, erase, clear, insert</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//清除[first, last)中的元素</span></span><br><span class="line"><span class="function">iterator <span class="title">erase</span><span class="params">(iterator first, iterator last)</span></span>&#123;</span><br><span class="line">    iterator ii = copy(last, finish, first);    <span class="comment">//copy是全局函数，第六章</span></span><br><span class="line">    destory(i, finish);</span><br><span class="line">    finish = finish - (last - first);</span><br><span class="line">    <span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清除某个位置上的元素</span></span><br><span class="line"><span class="function">iterator <span class="title">erase</span><span class="params">(iterator position)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(position + <span class="number">1</span> != end())</span><br><span class="line">        copy(position + <span class="number">1</span>, finish, position);</span><br><span class="line">    --finish;</span><br><span class="line">    destroy(finish);</span><br><span class="line">    <span class="keyword">return</span> position;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123; erase(begin(), end()); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从position开始，插入n个元素，元素初值为x</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">vector</span>&lt;T, Alloc&gt;:</span>:insert(iterator position, size_type n ,<span class="keyword">const</span> T&amp; x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(n != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//备用空间大于等于新增元素个数</span></span><br><span class="line">        <span class="keyword">if</span>(size_type(end_of_storage - finish) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            T x_copy = x;</span><br><span class="line">            <span class="comment">//计算插入点之后的现有元素个数</span></span><br><span class="line">            <span class="keyword">const</span> size_type elems_after = finish - position;</span><br><span class="line">            iterator old_finish = finish;</span><br><span class="line">            <span class="keyword">if</span>(elems_after &gt; n)&#123;    <span class="comment">//插入点之后的现有元素个数 &gt; 新增元素个数</span></span><br><span class="line">                uninitialized_copy(finish - n, finish, finish);</span><br><span class="line">                finish += n;    <span class="comment">//将vector 尾端标记后移</span></span><br><span class="line">                copy_backward(position, old_finish - n, old_finish);</span><br><span class="line">                fill(position, position+n, x_copy); <span class="comment">//从插入点开始填入新值</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                uninitialized_fill_n(finish, n-elems_affter, x_copy);</span><br><span class="line">                finish += n - elems_after;</span><br><span class="line">                uninitialized_copy(position, old_finish, finish);</span><br><span class="line">                finish += elems_after;</span><br><span class="line">                fill(position, old_finish, x_copy);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;   <span class="comment">//备用空间 &lt; 新增元素个数</span></span><br><span class="line">            <span class="keyword">const</span> size_type old_size = size();</span><br><span class="line">            <span class="comment">//决定新的长度为旧长度+新增元素个数</span></span><br><span class="line">            <span class="keyword">const</span> size_type len = old_size + max(old_size, n);</span><br><span class="line">            <span class="comment">//配置新的vector空间</span></span><br><span class="line">            iterator new_start = data_allocaator::allocate(len);</span><br><span class="line">            iterator new_finish = new_start;</span><br><span class="line">            __STL_TRY&#123;  <span class="comment">//&lt;-- 这个是什么</span></span><br><span class="line">                <span class="comment">//将旧的vector在插入点之前的元素复制到新空间</span></span><br><span class="line">                new_finish = uninitialized_copy(start, position, new_start);</span><br><span class="line">                <span class="comment">//将新增元素(初值为x)填入新空间</span></span><br><span class="line">                new_finish = uninitialized_fill_n(new_finish, n, x);</span><br><span class="line">                <span class="comment">//将旧的vector在插入点之后的元素复制到新空间</span></span><br><span class="line">                nwe_finish = uninitialized_copy(position, finish, new_finish);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//异常处理</span></span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//清除释放旧的空间</span></span><br><span class="line">            destroy(start，finish);</span><br><span class="line">            deallocate();</span><br><span class="line">            <span class="comment">//调整迭代器指向新的空间</span></span><br><span class="line">            start = new_start;</span><br><span class="line">            finish = new_finish;</span><br><span class="line">            end_of_storage = new_start+len;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入操作完成之后，新增节点应位于position的后面。</span></span><br></pre></td></tr></table></figure><p>图解如下：<img src="http://p3ax8ersb.bkt.clouddn.com/201802021439_772.png-960.jpg" alt="insert"></p><h3 id="4-3-list"><a href="#4-3-list" class="headerlink" title="4.3 list"></a>4.3 list</h3><h4 id="4-3-1-list概述"><a href="#4-3-1-list概述" class="headerlink" title="4.3.1 list概述"></a>4.3.1 list概述</h4><p>list每次插入或删除一个元素，就配置或释放一个元素空间。对于任何位置的元素插入或元素移除，是时间常数。</p><h4 id="4-3-2-list的节点-node"><a href="#4-3-2-list的节点-node" class="headerlink" title="4.3.2 list的节点(node)"></a>4.3.2 list的节点(node)</h4><p>list的节点和list本身的设计是分开的。以下是STL list的节点结构：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> __<span class="title">list_node</span>&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">void</span>* void_pointer;</span><br><span class="line">    void_pointer prev;  <span class="comment">//型别为void*，其实可以是__list_node&lt;T&gt;</span></span><br><span class="line">    void_pointer next;</span><br><span class="line">    T data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这是一个双向链表节点</span></span><br></pre></td></tr></table></figure></p><h4 id="4-3-3-list的迭代器"><a href="#4-3-3-list的迭代器" class="headerlink" title="4.3.3 list的迭代器"></a>4.3.3 list的迭代器</h4><p><strong>list的迭代器有一个重要性质，insert(插入)和splice(接合)操作都不会造成原有的迭代器失效。list的delete(删除)只有被删除的那个节点的迭代器失效</strong></p><h4 id="4-3-4-list的数据结构"><a href="#4-3-4-list的数据结构" class="headerlink" title="4.3.4 list的数据结构"></a>4.3.4 list的数据结构</h4><p>SGI list 是一个双向循环链表。list结构如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Alloc</span> = <span class="title">alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">list</span>&#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">typedef</span> __list_node&lt;T&gt; list_node;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> list_node* link_type;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    link_type node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>STL中指针node指向尾端的一个空白节点，以符合STL中前闭后开规范。</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">iterator <span class="title">begin</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> (link_type)((*node).next); &#125;</span><br><span class="line"><span class="function">iterator <span class="title">end</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> node; &#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> node-&gt;next == node; &#125;</span><br><span class="line"><span class="function">size_type <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    size_type result = <span class="number">0</span>;</span><br><span class="line">    distance(begin(), end(), result);   <span class="comment">//全局函数，第三章//计算两个迭代器之间的距离</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">reference <span class="title">front</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> *begin(); &#125;</span><br><span class="line"><span class="function">reference <span class="title">back</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> *(--end()); &#125;</span><br></pre></td></tr></table></figure></p><p>图解如下：<img src="http://p3ax8ersb.bkt.clouddn.com/201802021641_929.png-960.jpg" alt="list"></p><h4 id="4-3-5-list的构造与内存管理：constructor，-push-back-insert"><a href="#4-3-5-list的构造与内存管理：constructor，-push-back-insert" class="headerlink" title="4.3.5 list的构造与内存管理：constructor， push_back, insert"></a>4.3.5 list的构造与内存管理：constructor， push_back, insert</h4><p>list缺省使用alloc，并由此定义了一个list_node_alloctor是为了更方便的以节点大小为配置单位。<code>list_node_alloctor(n)</code>表示配置n个节点空间。同时有四个函数，如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置一个节点并传回</span></span><br><span class="line"><span class="function">link_type <span class="title">get_node</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//释放一个节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">put_node</span><span class="params">(link_type p)</span></span>;</span><br><span class="line"><span class="comment">//配置并构造一个节点，带有元素值</span></span><br><span class="line"><span class="function">link_type <span class="title">create_node</span><span class="params">(<span class="keyword">const</span> T&amp; x)</span></span>;</span><br><span class="line"><span class="comment">//析构并释放一个节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy_node</span><span class="params">(link_type p)</span></span>;</span><br></pre></td></tr></table></figure></p><p>list众多构造函数中，有一个允许我们构造一个空list出来：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">list</span>()&#123; empty_initialize(); &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">empty_initialize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//next、prev指针都指向自己</span></span><br><span class="line">        node = get_node();</span><br><span class="line">        node-&gt;next = node;</span><br><span class="line">        node-&gt;prev = node;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>空节点对象模型：<img src="http://p3ax8ersb.bkt.clouddn.com/201802021656_767.png-960.jpg" alt="空节点"><br>当我们用push_back()插入新节点的时候，函数内部调用insert()<code>void push_back(const T&amp; x) { inset( end(), x ); }</code>insert()有很多的重载函数，最简单的如下:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在迭代器position所指位置插入一个节点，值为x</span></span><br><span class="line"><span class="function">iterator <span class="title">insert</span><span class="params">(iterator position, <span class="keyword">const</span> T&amp; x)</span></span>&#123;</span><br><span class="line">    link_type tmp = create_node(x);</span><br><span class="line">    <span class="comment">//插入位置在position之前,这是STL规范。</span></span><br><span class="line">    tmp-&gt;next = position.node;</span><br><span class="line">    tmp-&gt;prev = position.node-&gt;prev;</span><br><span class="line">    (link_type(position.node-&gt;node-&gt;prev))-&gt;next = tmp;</span><br><span class="line">    position.node-&gt;prev = tmp;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="4-3-6-list的元素操作：push-front-push-back-erase-pop-front-pop-back-clear-remove-unique-splice-merge-reverse-sort"><a href="#4-3-6-list的元素操作：push-front-push-back-erase-pop-front-pop-back-clear-remove-unique-splice-merge-reverse-sort" class="headerlink" title="4.3.6 list的元素操作：push_front, push_back, erase, pop_front, pop_back, clear, remove, unique, splice, merge, reverse, sort"></a>4.3.6 list的元素操作：<code>push_front, push_back, erase, pop_front, pop_back, clear, remove, unique, splice, merge, reverse, sort</code></h4><p>push_front, push_back复用insert；pop_front, pop_back复用erase。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//移除迭代器position所指节点</span></span><br><span class="line"><span class="function">iterator <span class="title">erase</span><span class="params">(iterator position)</span></span>&#123;</span><br><span class="line">    link_type next_node = link_type(position.node-&gt;next);</span><br><span class="line">    link_type prev_node = link_type(position.node-&gt;prev);</span><br><span class="line">    prev_node-&gt;next = next_node;</span><br><span class="line">    next_node-&gt;prev = prev_node;</span><br><span class="line">    destroy_node(position.node);</span><br><span class="line">    <span class="keyword">return</span> iterator(next_node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清除所有节点</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">list</span>&lt;T, Alloc&gt;:</span>:clear()&#123;</span><br><span class="line">    link_type cur = (link__type) node-&gt;next;    <span class="comment">//begin();</span></span><br><span class="line">    <span class="keyword">while</span>( cur != node )&#123;</span><br><span class="line">        link_type tmp - cur;</span><br><span class="line">        cur = (link_type)cur-&gt;next;</span><br><span class="line">        destroy_node(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//恢复成空节点的初始结构</span></span><br><span class="line">    node-&gt;next = node;</span><br><span class="line">    node-&gt;prev = node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将数值为value的所有元素移除</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">list</span>&lt;T, Alloc&gt;:</span>:remove(<span class="keyword">const</span> T&amp; value)&#123;</span><br><span class="line">    iterator first = begin();</span><br><span class="line">    iterator last = end();</span><br><span class="line">    <span class="keyword">while</span>(first != last)&#123;</span><br><span class="line">        iterator next = first;</span><br><span class="line">        ++next;</span><br><span class="line">        <span class="keyword">if</span>(*first == value) erase(first);</span><br><span class="line">        first = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//移除相同连续的元素，只有连续相同的元素才会被移除只剩一个</span></span><br><span class="line"><span class="comment">//很帅啊</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">list</span>&lt;T, Alloc&gt;:</span>:unique()&#123;</span><br><span class="line">    iterator first = begin();</span><br><span class="line">    iterator last = end();</span><br><span class="line">    <span class="keyword">if</span>(first == last) <span class="keyword">return</span>;   <span class="comment">//判空</span></span><br><span class="line">    iterator next = first;</span><br><span class="line">    <span class="keyword">while</span>(++next != last)&#123;</span><br><span class="line">        <span class="keyword">if</span>(*first == *next)</span><br><span class="line">            erase(next);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            first = next;</span><br><span class="line">        next = first;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>list 内部提供了一个迁移操作(transfer)：将某连续分为的元素迁移到某特定位置之前。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="comment">//将[first, last)内的所有元素移动到position之前。</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(iterator position, iterator first, iterator last)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(position != last)&#123;</span><br><span class="line">            <span class="comment">//先处理各节点的next</span></span><br><span class="line">            (*(link_type((*last.node).prev))).next = position.node;</span><br><span class="line">            (*(link_type((*first.node).prev))).next = last.node;</span><br><span class="line">            (*(link_type((*position.node).prev))).next = first.node;</span><br><span class="line">            <span class="comment">//tmp为position的prev节点</span></span><br><span class="line">            link_type tmp = link_type((*position.node).prev);</span><br><span class="line">            <span class="comment">//处理各节点的prev</span></span><br><span class="line">            (*position.node).prev = (*last.node).prev;</span><br><span class="line">            (*last.node).prev = (*first.node).prev;</span><br><span class="line">            (*first.node).prev = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>splice各个版本：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//将list x接合与position所指位置之前，x必须不同于*this</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">splice</span><span class="params">(iterator position, <span class="built_in">list</span>&amp; x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!x.empty())</span><br><span class="line">            transfer(position, x.begin(), x.end());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将i 所指元素接合于position所指元素之前。position和i可指向同一个list</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">splice</span><span class="params">(iterator position, <span class="built_in">list</span>&amp;, iterator i)</span></span>&#123;</span><br><span class="line">        iterator j = i;</span><br><span class="line">        ++j;</span><br><span class="line">        <span class="keyword">if</span>(position == i || position == j) <span class="keyword">return</span>;</span><br><span class="line">        trasfer(position, i, j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将[first, last)内的所有元素接合于position所指位置之前，</span></span><br><span class="line">    <span class="comment">//position和[first, last)可指向同一个list。</span></span><br><span class="line">    <span class="comment">//但是position不能在[first, last)范围之内</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">splice</span><span class="params">(iterator posiition, <span class="built_in">list</span>&amp;, iterator first, iterator last)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(first != last)</span><br><span class="line">            transfer(position, first, last);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>merge(), reverse(), sort()源码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//merge()将x合并到*this上，两个list必须是递增排序的</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">list</span>&lt;T, Alloc&gt;:</span>:merge(<span class="built_in">list</span>&lt;T, Alloc&gt;&amp; x)&#123;</span><br><span class="line">    iterator first1 = begin();</span><br><span class="line">    iterator last1 = end();</span><br><span class="line">    iterator first2 = x.begin();</span><br><span class="line">    iterator last2 = x.end();</span><br><span class="line">    <span class="keyword">while</span>(first1 != last1 &amp;&amp; first2 != last2)&#123;</span><br><span class="line">        <span class="keyword">if</span>(*first2 &lt; *first1)&#123;</span><br><span class="line">            iterator next = first2;</span><br><span class="line">            transfer(first1, first2, ++next);</span><br><span class="line">            first2 = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ++first1;</span><br><span class="line">        <span class="keyword">if</span>(first2 !=  last2) transfer(last1, first2,last2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//reverse()将*this的内容逆置</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">list</span>&lt;T, Alloc&gt;:</span>:reverse()&#123;</span><br><span class="line">    <span class="comment">//判空或只有一个节点，用size() == 0 || size() == 1速度比较慢</span></span><br><span class="line">    <span class="keyword">if</span>(node-&gt;next == node || link_type(node-&gt;next)-&gt;next == node)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    iterator first = begin();</span><br><span class="line">    ++first;</span><br><span class="line">    <span class="keyword">while</span>(first != end())&#123;</span><br><span class="line">        iterator old = first;</span><br><span class="line">        ++first;</span><br><span class="line">        transfer(begin(), old, first);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//list不能使用STL中的sort()算法，只能使用自己的sort()</span></span><br><span class="line"><span class="comment">//因为STL的sort()只接受RamdonAccessIterator</span></span><br><span class="line"><span class="comment">//本函数使用quick sort</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">list</span>&lt;T, Alloc&gt;:</span>:sort()&#123;</span><br><span class="line">     <span class="comment">//判空或只有一个节点，用size() == 0 || size() == 1速度比较慢</span></span><br><span class="line">    <span class="keyword">if</span>(node-&gt;next == node || link_type(node-&gt;next)-&gt;next == node)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//创建新的list空间，作为中介数据存放区</span></span><br><span class="line">    <span class="built_in">list</span>&lt;T, Alloc&gt; carry;</span><br><span class="line">    <span class="built_in">list</span>&lt;T, Alloc&gt; counter[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">int</span> fill = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!empty())&#123;</span><br><span class="line">        carry.splice(carry.begin(), *<span class="keyword">this</span>, begin());</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; fill &amp;&amp; !counter[i].empty())&#123;</span><br><span class="line">            counter[i].merge(carry);</span><br><span class="line">            carry.swap(counter[i++]);</span><br><span class="line">        &#125;</span><br><span class="line">        carry.swap(counter[i]);</span><br><span class="line">        <span class="keyword">if</span>(i == fill)</span><br><span class="line">            ++fill;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; fill; ++i)</span><br><span class="line">        counter[i].merge(counter[i<span class="number">-1</span>]);</span><br><span class="line">    swap(counter[fill<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;4-序列式容器&quot;&gt;&lt;a href=&quot;#4-序列式容器&quot; class=&quot;headerlink&quot; title=&quot;4 序列式容器&quot;&gt;&lt;/a&gt;4 序列式容器&lt;/h2&gt;&lt;h3 id=&quot;4-1-容器的概观与分类&quot;&gt;&lt;a href=&quot;#4-1-容器的概观与分类&quot; class=&quot;headerlink&quot; title=&quot;4.1 容器的概观与分类&quot;&gt;&lt;/a&gt;4.1 容器的概观与分类&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://p3ax8ersb.bkt.clouddn.com/201801311638_540.png-960.jpg&quot; alt=&quot;SGI STL的各个容器&quot;&gt;&lt;br&gt;所谓序列式容器，其中的元素都是可序的(ordered),但未必有序(sorted)。C++本身有array，其它是STL提供的。&lt;br&gt;
    
    </summary>
    
      <category term="learning" scheme="http://www.jingxxn.cn/categories/learning/"/>
    
    
  </entry>
  
  <entry>
    <title>浅读《STL源码剖析》笔记 3章</title>
    <link href="http://www.jingxxn.cn/%E6%B5%85%E8%AF%BB%E3%80%8ASTL%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E3%80%8B%E7%AC%94%E8%AE%B0-3%E7%AB%A0.html"/>
    <id>http://www.jingxxn.cn/浅读《STL源码剖析》笔记-3章.html</id>
    <published>2018-02-08T09:07:30.000Z</published>
    <updated>2018-03-06T08:44:24.742Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-迭代器-iterator-概念与traits编程技法"><a href="#3-迭代器-iterator-概念与traits编程技法" class="headerlink" title="3 迭代器(iterator)概念与traits编程技法"></a>3 迭代器(iterator)概念与traits编程技法</h2><p>迭代器(iterator)是一种抽象的设计概念，iterator模式定义如下；提供一种方法，使之能够按照次序访问某个聚合物（容器）所含有的各个元素，而同时又无需暴露该聚合物的内部表述方式</p><h3 id="3-1-迭代器设计思维"><a href="#3-1-迭代器设计思维" class="headerlink" title="3.1 迭代器设计思维"></a>3.1 迭代器设计思维</h3><p><strong>STL的中心是将数据容器和算法分开，然后用一个胶合剂将他们联系在一起，这个就是iterators的作用之一</strong><br><a id="more"></a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.1举例说明迭代器的使用</span></span><br><span class="line"><span class="comment">//find()的定义。</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>, <span class="title">chass</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">InputIterator</span> <span class="title">find</span>( <span class="title">InputIterator</span> <span class="title">first</span>, <span class="title">InputIterator</span> <span class="title">last</span>, <span class="title">const</span> <span class="title">T</span>&amp; <span class="title">value</span> )&#123;</span></span><br><span class="line">    <span class="keyword">while</span> ( first != last &amp;&amp; *first != value )</span><br><span class="line">        ++first;</span><br><span class="line">        <span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> arraySiza = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">int</span> ia[arraySiza] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ivect(ia, ia+arraySiza);</span><br><span class="line">    <span class="comment">//调用vector的iterator用于find()</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it1 = find(ivect.begin(), ivect.end(), <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">if</span>( it1 == ivect.end() )</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"4 not found."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"4 found:"</span> &lt;&lt; *it1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    it1 = find(ivect.begin(), ivect.end(), <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>( it1 == ivect.end() )</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"8 not found."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"8 found"</span> &lt;&lt; *it1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201802011511_588.png-960.jpg" alt="迭代器"></p><h3 id="3-2-迭代器-ierator-是一种smart-pointer"><a href="#3-2-迭代器-ierator-是一种smart-pointer" class="headerlink" title="3.2 迭代器(ierator)是一种smart pointer"></a>3.2 迭代器(ierator)是一种smart pointer</h3><p><strong>迭代器是一个行为类似指针的对象，所以迭代器最重要的编程工作就是对operator* 和 operator-&gt; 进行重载工作。</strong><br>以下，简单模拟一个list的结构，然后设计对应的iterator。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//listnode</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListItem</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">T <span class="title">value</span><span class="params">()</span> <span class="keyword">const</span></span>&#123; <span class="keyword">return</span> _value; &#125;</span><br><span class="line">    <span class="function">ListItem* <span class="title">next</span><span class="params">()</span> <span class="keyword">const</span></span>&#123; <span class="keyword">return</span> _next; &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T _value;</span><br><span class="line">    ListItem* _next; <span class="comment">//单向链表(single linked list)</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//list</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert_front</span><span class="params">(T value)</span></span>; <span class="comment">//省略实现</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert_end</span><span class="params">(T value)</span></span>;   <span class="comment">//省略实现</span></span><br><span class="line">    <span class="function">voide <span class="title">display</span><span class="params">(<span class="built_in">std</span>::ostream &amp;os = <span class="built_in">std</span>::<span class="built_in">cout</span>)</span> <span class="keyword">const</span></span>;<span class="comment">//省略实现</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ListItem&lt;T&gt;* _end;</span><br><span class="line">    ListItem&lt;T&gt;* _front;</span><br><span class="line">    <span class="keyword">long</span> _size;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>当我们解引用这个迭代器的时候，传回的应该是ListItem对象；当我们++迭代器的时候，它应该指向下一个ListItem对象。设计如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//iterator</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Item</span>&gt;//<span class="title">Item</span>可以是单向链表节点或双向链表节点，此处这个迭代器特地为链表服务，因为他的<span class="title">operator</span>++只适用于链表。</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">ListIter</span>&#123;</span></span><br><span class="line">    Item* ptr;  <span class="comment">//保持与容器之间的一个联系</span></span><br><span class="line">    ListIter( Item* p = <span class="number">0</span> )</span><br><span class="line">        :ptr(p)</span><br><span class="line">        &#123;&#125;</span><br><span class="line">    <span class="comment">//不必实现copy ctor，因为编译器提供的缺省行为已经足够</span></span><br><span class="line">    <span class="comment">//不必实现operator=，因为编译器提供的缺省行为已经足够</span></span><br><span class="line">    Item&amp; <span class="keyword">operator</span>*() <span class="keyword">const</span> &#123; <span class="keyword">return</span> *ptr; &#125;</span><br><span class="line">    Item* <span class="keyword">operator</span>-&gt;() <span class="keyword">const</span> &#123; <span class="keyword">return</span> ptr; &#125;</span><br><span class="line">    <span class="comment">//operator++分为两种，一种是前置++(pre-increament operator),另一种是后置++(post-increment operator)</span></span><br><span class="line">    <span class="comment">//pre-increament operator</span></span><br><span class="line">    ListIter&amp; <span class="keyword">operator</span>++()&#123;</span><br><span class="line">        ptr = ptr-&gt;next();</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//post-incteament operator</span></span><br><span class="line">    LostIter <span class="keyword">operator</span>++(<span class="keyword">int</span>)&#123;</span><br><span class="line">        ListIter tmp = *<span class="keyword">this</span>;</span><br><span class="line">        ++*<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> LostIter&amp; i)<span class="keyword">const</span>&#123; <span class="keyword">return</span> ptr == i.ptr; &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> LostIter&amp; i)<span class="keyword">const</span>&#123; <span class="keyword">return</span> ptr != i.ptr; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来，将List和find()由ListIter粘合起来：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;<span class="keyword">int</span>&gt; mylist;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; ++i )&#123;</span><br><span class="line">        mylist.insert_front(i);</span><br><span class="line">        mylist.insert_end(i+<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    mylist.displau();   <span class="comment">//10( 4 3 2 1 0 2 3 4 5 6)</span></span><br><span class="line">    ListIter&lt;ListItem&lt;<span class="keyword">int</span>&gt; &gt; begin(mylist.front());</span><br><span class="line">    ListIter&lt;ListItem&lt;<span class="keyword">int</span>&gt; &gt; end;</span><br><span class="line">    ListIter&lt;ListItem&lt;<span class="keyword">int</span>&gt; &gt; iter;</span><br><span class="line"></span><br><span class="line">    iter = find(begin, end, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span>( iter == end )</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"not found"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"found."</span> &lt;&lt; iter-&gt;value() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//执行结果：found.3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由于find() 函数以<code>*iter != value</code>来检查元素值是否吻合，本例子中value的型别是 int，iter 的型别是 <code>ListIterm&lt;int&gt;</code>,两者之间没有可以使用的operator!=函数，所以需要重载这个函数，全局的，参数是int和<code>ListIterm&lt;int&gt;</code>。如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> ListItem&lt;T&gt;&amp; item, T n)&#123; <span class="keyword">return</span> item.value() != n; &#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-3-迭代器相应型别-associated-types"><a href="#3-3-迭代器相应型别-associated-types" class="headerlink" title="3.3 迭代器相应型别(associated types)"></a>3.3 迭代器相应型别(associated types)</h3><p>当算法中有必要声明一个变量，需要获取“迭代器所指对象的型别”为型别，我们可以通过function template 的参数推导(argument deducation)机制实现。例如：<img src="http://p3ax8ersb.bkt.clouddn.com/201802011841_231.png-960.jpg" alt="function template的例子"><br>以func()为对外接口，实际操作全部置于func_imp中，由于func_imp()是一个function template，一旦被调用，编译器会自动进行template参数推导。推导出型别T，顺利解决了问题。</p><h3 id="3-4-Traits-编程技法——STL源代码门钥"><a href="#3-4-Traits-编程技法——STL源代码门钥" class="headerlink" title="3.4 Traits 编程技法——STL源代码门钥"></a>3.4 Traits 编程技法——STL源代码门钥</h3><p><strong>value type：迭代器所指对象的型别。</strong>上述的参数型别推导技巧在value type需要用于函数的传回值就束手无策了，因为函数的”template参数推导机制”推导的只是参数，无法推导函数的返回值型别。我们需要别的方法，例如声明内嵌型别。如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">MyIter</span>&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> T value_type;   <span class="comment">//内嵌型别声明(nested type)</span></span><br><span class="line">    MyIter(T* p = <span class="number">0</span>)</span><br><span class="line">        :ptr(p)</span><br><span class="line">        &#123;&#125;</span><br><span class="line">    T&amp; <span class="keyword">operator</span>*() <span class="keyword">const</span> &#123; <span class="keyword">return</span> *ptr; &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    T* ptr; <span class="comment">//成员变量</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">typename</span> <span class="title">I</span>:</span>:<span class="function">value_type <span class="title">func</span><span class="params">( I ite )</span></span>&#123; <span class="keyword">return</span> *ite; &#125;    <span class="comment">//typename I::value_type  这是func的返回值型别；</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">MyIter&lt;<span class="keyword">int</span>&gt; ite(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">8</span>));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; func(ite);  <span class="comment">//输出:8</span></span><br></pre></td></tr></table></figure></p><p><code>typename I::value_type</code>必须加上typename，因为T是一个template参数，在它被编译器实例化之前，编译器是不知道他是什么的。<strong>加上了关键字typename的用意在于告诉编译器这个是一个型别，如此才能够顺利编译通过。</strong></p><p>这样有一个缺陷，并不是所有的迭代器都是class type，原生指针就不是。真正可以解决这个问题的是 <strong>偏特化(template partial specialization)</strong>。也就是将泛化版本中的某些template参数赋予明确大的指定内容。见如下例子：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//class template</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>&#123;</span>    <span class="comment">//这个泛化版本接受T为任何型别</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//prartial specialization</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>&lt;T*&gt;&#123;</span>    <span class="comment">//这个特化版本只适用于"T 为原生指针"的情况</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>下面这个例子，<strong>专门用来萃取迭代器的特性，value type正是迭代器的特性之一</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">iterator_traits</span>&#123;</span> <span class="comment">//traits意思为“特性”</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> I::value_type value_type;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>这样，前面那个func函数可以修改成这样。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="class">//<span class="title">typename</span> <span class="title">iterator_traits</span>&lt;I&gt;:</span>:value_type 是函数的返回型别</span><br><span class="line"><span class="keyword">typename</span> iterator_traits&lt;I&gt;::<span class="function">value_type <span class="title">func</span><span class="params">(I ite)</span></span>&#123; <span class="keyword">return</span> *ite; &#125;</span><br></pre></td></tr></table></figure></p><p>跟之前的相比，只是多了一个中间层，但是就是多了这个中间层，traits可以拥有特化版本。如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">iterator_traits</span>&lt;T*&gt;&#123;</span> <span class="comment">//偏特化版本--迭代器是一个原生指针</span></span><br><span class="line">    <span class="keyword">typedef</span> T value_type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此时，就算是原生指针，我们也可以通过traits萃取到它的value type。我们想要的到的原生指针是一个非const值，但当像这样的<code>iterator_traits&lt;const int*&gt;::value_type</code>得到的是const int。所以我们另外设计一个特化版本，让<code>const T*</code>转变为T*：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">iterator_traits</span>&lt;const T*&gt;&#123;</span>   <span class="comment">//偏特化版本，当迭代器是一个const指针的时候，</span></span><br><span class="line">    <span class="keyword">typedef</span> T value_type;           <span class="comment">//萃取出来的是T，而不是const T</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>到这里为止，<strong>不论是面对class-type迭代器，原生指针，const修饰的原生指针。我们都可以通过traits萃取出正确的value type。但是，需要这traits正常运作，每一个迭代器必须自行以内嵌型别定义(nested typedef)的方式定义出相应型别(associated types)。这是一个约定，STL中必须满足。</strong></p><p>图解iterator_traits：<img src="http://p3ax8ersb.bkt.clouddn.com/201802012217_572.png-960.jpg" alt="iterator_traits"><br>常用的迭代器相应型别有以上五种，“特性萃取机”traits会原汁原味的榨取出来：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">iterator_traits</span>&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> I::iterator_category iterator_category;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> I::value_type value_type;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> I::difference_type difference_type;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> I::pointer pointer;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> I::reference reference;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>其中，iterator_traits必须对传入的型别为pointer和pointer-to-const设计特化版本。</strong><br>以上：</p><h4 id="3-4-1-value-type-如上"><a href="#3-4-1-value-type-如上" class="headerlink" title="3.4.1 value type 如上"></a>3.4.1 value type 如上</h4><h4 id="3-4-2-difference-type"><a href="#3-4-2-difference-type" class="headerlink" title="3.4.2 difference type"></a>3.4.2 difference type</h4><h4 id="3-4-3-reference-type"><a href="#3-4-3-reference-type" class="headerlink" title="3.4.3 reference type"></a>3.4.3 reference type</h4><h4 id="3-4-4-pointer-type"><a href="#3-4-4-pointer-type" class="headerlink" title="3.4.4 pointer type"></a>3.4.4 pointer type</h4><h4 id="3-4-5-iterator-catrgory"><a href="#3-4-5-iterator-catrgory" class="headerlink" title="3.4.5 iterator_catrgory"></a>3.4.5 iterator_catrgory</h4>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;3-迭代器-iterator-概念与traits编程技法&quot;&gt;&lt;a href=&quot;#3-迭代器-iterator-概念与traits编程技法&quot; class=&quot;headerlink&quot; title=&quot;3 迭代器(iterator)概念与traits编程技法&quot;&gt;&lt;/a&gt;3 迭代器(iterator)概念与traits编程技法&lt;/h2&gt;&lt;p&gt;迭代器(iterator)是一种抽象的设计概念，iterator模式定义如下；提供一种方法，使之能够按照次序访问某个聚合物（容器）所含有的各个元素，而同时又无需暴露该聚合物的内部表述方式&lt;/p&gt;
&lt;h3 id=&quot;3-1-迭代器设计思维&quot;&gt;&lt;a href=&quot;#3-1-迭代器设计思维&quot; class=&quot;headerlink&quot; title=&quot;3.1 迭代器设计思维&quot;&gt;&lt;/a&gt;3.1 迭代器设计思维&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;STL的中心是将数据容器和算法分开，然后用一个胶合剂将他们联系在一起，这个就是iterators的作用之一&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="learning" scheme="http://www.jingxxn.cn/categories/learning/"/>
    
    
  </entry>
  
  <entry>
    <title>浅读《STL源码剖析》笔记 1、2章</title>
    <link href="http://www.jingxxn.cn/%E6%B5%85%E8%AF%BB%E3%80%8ASTL%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E3%80%8B%E7%AC%94%E8%AE%B0-1%E3%80%812%E7%AB%A0.html"/>
    <id>http://www.jingxxn.cn/浅读《STL源码剖析》笔记-1、2章.html</id>
    <published>2018-02-03T03:15:06.000Z</published>
    <updated>2018-03-06T08:44:54.368Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-STL概论与版本简介"><a href="#1-STL概论与版本简介" class="headerlink" title="1 STL概论与版本简介"></a>1 STL概论与版本简介</h2><h3 id="1-2-STL六大组件"><a href="#1-2-STL六大组件" class="headerlink" title="1.2 STL六大组件"></a>1.2 STL六大组件</h3><ol><li>容器(containers):<code>vector,list,deque,set,map</code>,用来存放数据</li><li>算法(algorithms):<code>sort,search,copy,erase</code></li><li>迭代器(iterators):扮演容器与算法之间的胶合剂，所谓的“泛型指针”。从实现角度来看，<a id="more"></a>迭代器器将<code>operator*,operator++,operator--,operator-&gt;</code>等指针进行了重载的class template。原生指针（native pointer）也是一种迭代器。</li><li>仿函数(functors):行为类似函数，实现来看，重载了operator()的class或class template。</li><li>配接器(adapters):一种用来修饰容器(containers)或仿函数(functors)或迭代器(iterators)接口的东西。如stack和queue他们的底层实现是deque。</li><li>配置器(allocators):负责空间配置与管理，从实现的角度看来，配置器是一个实现了动态空间配置、空间管理、空间释放的class template。</li></ol><h3 id="1-5-1-8-STL版本之二"><a href="#1-5-1-8-STL版本之二" class="headerlink" title="1.5~1.8 STL版本之二"></a>1.5~1.8 STL版本之二</h3><ol><li>P.J.Plauger (Microsoft Visual C++)</li><li>SGI STL (Linux GCC)<br> C++标准规范下的C头文件: <code>cstdio,cstdlib,cstring</code><br> C++标准程序库中不属于STL范畴: <code>stream,string</code><br> STL标准头文件: <code>vector,deque,list,map,algorithm,functional</code><br> C++Standard定案前，HP所规范的STL头文件: <code>vector.h,deque.h,list.h,algo.h,function.h</code><br> SGI STL内部文件(STL真正实现于此): <code>stl_vector.h,stl_deque.h,stl_list.h,stl_map.h,stl_algo.h,stl_function.h</code></li></ol><h3 id="1-9-可能令你困惑的C-语法"><a href="#1-9-可能令你困惑的C-语法" class="headerlink" title="1.9 可能令你困惑的C++语法"></a>1.9 可能令你困惑的C++语法</h3><h4 id="1-9-2-临时对象的产生与运用"><a href="#1-9-2-临时对象的产生与运用" class="headerlink" title="1.9.2 临时对象的产生与运用"></a>1.9.2 临时对象的产生与运用</h4><p>临时对象就是匿名对象，创造临时对象的方法是，在类型后面直接加上()，同时可以赋初值。如：Shape(3,5),int(8)。他的意义相当于调用相应的constructor且不指定对象名称。<strong>STL中最常将此技巧用在仿函数(functor)中。</strong>临时对象的生命周期只有这一行指令。</p><h4 id="1-9-3-静态常量整数成员在class内部直接初始化"><a href="#1-9-3-静态常量整数成员在class内部直接初始化" class="headerlink" title="1.9.3 静态常量整数成员在class内部直接初始化"></a>1.9.3 静态常量整数成员在class内部直接初始化</h4><p>class内含有<code>const static integral data member</code>，我们可以直接给予初值。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.9.3测试代码如下</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">testclass</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> datai = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">long</span> datal = <span class="number">3L</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> datac = <span class="string">'c'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; testclass&lt;<span class="keyword">int</span>&gt;::datai &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; testclass&lt;<span class="keyword">int</span>&gt;::datal &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; testclass&lt;<span class="keyword">int</span>&gt;::datac &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201801291947_629.png-960.jpg" alt="运行结果"></p><h4 id="1-9-5-前闭后开区间表示法"><a href="#1-9-5-前闭后开区间表示法" class="headerlink" title="1.9.5 前闭后开区间表示法[)"></a>1.9.5 前闭后开区间表示法[)</h4><p><strong>STL中范围是用前闭后开。[first, last)元素从first开始，结束于last-1.迭代器中的last指的是最后一个元素的下一个。</strong></p><h4 id="1-9-6-function-call操作符-operator"><a href="#1-9-6-function-call操作符-operator" class="headerlink" title="1.9.6 function call操作符(operator())"></a>1.9.6 function call操作符(operator())</h4><p>function call操作符(oprator())。C语言中用函数指针作为参数传递。有个缺点就是，没有可适配性，也就是确定了这个函数指针之后，无法再加上新的修饰条件从而改变他的状态。STL中用仿函数(functor)实现这个功能。<strong>如果你针对某个class进行operator()重载，它就成为一个仿函数。</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.9.6测试代码如下</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">Add</span>&#123;</span></span><br><span class="line">    <span class="comment">//重载了operator()</span></span><br><span class="line">    <span class="function">T <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> T&amp;x, <span class="keyword">const</span> T&amp;y)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Add&lt;<span class="keyword">int</span>&gt; addxy;</span><br><span class="line">    system( <span class="string">"clear"</span> );</span><br><span class="line">    <span class="comment">//调用重载函数</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; addxy(<span class="number">3</span>,<span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//调用匿名对象</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Add&lt;<span class="keyword">int</span>&gt;()(<span class="number">5</span>,<span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201801292024_990.png-960.jpg" alt="仿函数"></p><h2 id="2-空间配置器-allocator"><a href="#2-空间配置器-allocator" class="headerlink" title="2 空间配置器(allocator)"></a>2 空间配置器(allocator)</h2><p>空间配置器在容器背后工作，整个STL的操作对象(所有的数值)，对存放在容器中，而容器一定要配置空间以置放资料。不一定是内存，也可以是磁盘或其他的辅助存储介质。</p><h3 id="2-2-具备此配置力的SGI空间配置器"><a href="#2-2-具备此配置力的SGI空间配置器" class="headerlink" title="2.2 具备此配置力的SGI空间配置器"></a>2.2 具备此配置力的SGI空间配置器</h3><h4 id="2-2-1-SGI标准的空间配置器-std-allocator"><a href="#2-2-1-SGI标准的空间配置器-std-allocator" class="headerlink" title="2.2.1 SGI标准的空间配置器,std::allocator"></a>2.2.1 SGI标准的空间配置器,std::allocator</h4><p>SGI的空间配置器和标准规范不同，他的名称是alloc而不是allocator，且不接受任何参数。标准写法如下：<code>vector&lt;int,std::allocator&lt;int&gt;&gt;</code>;SGI STL写法如下：<code>vector&lt;int, std::aloc&gt;</code>绝大多数情况下，我们都是使用缺省的空间配置器。</p><h4 id="2-2-2-SGI特殊的空间配置器，std-alloc"><a href="#2-2-2-SGI特殊的空间配置器，std-alloc" class="headerlink" title="2.2.2 SGI特殊的空间配置器，std::alloc"></a>2.2.2 SGI特殊的空间配置器，std::alloc</h4><p>SGI同时也配备了标准空间配置器<code>std::allocator</code>，但是这只是对C++的<code>operator new和operator delete</code>做了一层封装，效率低下，<strong>SGI并不使用，只是为了向前兼容语法。</strong></p><p><strong>SGI自身使用的空间配置器是<code>std::alloc</code></strong>一般来说，我们习惯的C++内存操作和释放操作是这样的：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>&#123;</span>&#125;;</span><br><span class="line">Foo* pf = <span class="keyword">new</span> Foo;</span><br><span class="line"><span class="keyword">delete</span> pf;</span><br></pre></td></tr></table></figure></p><p>这其中的new包含两个操作，一个是调用::operator new配置内存；另一个是调用Foo::Foo()构造对象内容。delete也是两个，一个是调用Foo::~Foo()析构对象，另一个是调用::operator detele 释放内存。<strong>为了分工，STL allocator将这个两个阶段分开来，内存配置操作有alloc:allocate()负责，内存释放操作有alloc::deallocate()负责，对象构造操作有:construct()负责，对象析构操作由::destroy()负责。</strong><br>STL的配置器(allocator)定于于<code>&lt;memory&gt;</code>，其中包含两个文件,一个是负责内存空间的配置与释放&lt;stl_alloc.h&gt;,这里定义了一二级配置器，配置器名为alloc；另一个是负责对象内容的构造与析构&lt;stl_construct.h&gt;，定义了全局函数construct()和destroy()。</p><h4 id="2-2-3-构造和析构基本工具-construct-和destroy"><a href="#2-2-3-构造和析构基本工具-construct-和destroy" class="headerlink" title="2.2.3 构造和析构基本工具:construct()和destroy()"></a>2.2.3 构造和析构基本工具:construct()和destroy()</h4><p>construct()的实现如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;new.h&gt;    //使用placement new 需要这个头文件</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="title">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">construct</span>(<span class="title">T1</span>* <span class="title">p</span>, <span class="title">const</span> <span class="title">T2</span>&amp; <span class="title">value</span>)&#123;</span></span><br><span class="line">    <span class="keyword">new</span> (p) T1(value);  <span class="comment">//使用了placement new;调用T1:T1(value);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码解释：<code>construct()</code>接收一个指针p和一个初始值value，用来将初值设定到指针所指向的空间，<strong>通过<code>placement new</code>实现</strong>。<br>destroy()有两个版本，实现如下:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一个版本，接受一个指针</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">destroy</span>(<span class="title">T</span>* <span class="title">pointer</span>)&#123;</span></span><br><span class="line">    pointer-&gt;~T();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第二个版本，接受两个迭代器。此函数设法找出元素的数值型别，进而利用__type_traits&lt;&gt;求取最适当的措施。</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIterator</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">destroy</span>(<span class="title">ForwardIterator</span> <span class="title">first</span>, <span class="title">ForwardIterator</span> <span class="title">last</span>)&#123;</span></span><br><span class="line">    __destroy(first, last, value_type(first));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断元素的数值型别(value type)是否有 trivial destructor</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIterator</span>, <span class="title">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> __<span class="title">destroy</span>(<span class="title">ForwardIterator</span> <span class="title">first</span>, <span class="title">ForwardIterator</span> <span class="title">last</span>, <span class="title">T</span>*)&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> __type_traits&lt;T&gt;::has_trivial_destructor trivial_destructor;</span><br><span class="line">    __destroy_aux(first, last, trivial_destructor());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果元素的数值型别(value type)有non-truvial destructor，循环释放</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIterator</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> __<span class="title">destroy_aux</span>(<span class="title">ForwardIterator</span> <span class="title">first</span>, <span class="title">ForwardIterator</span> <span class="title">last</span>, __<span class="title">false_type</span>)&#123;</span></span><br><span class="line">    <span class="keyword">for</span>( ; first &lt; last; ++first)</span><br><span class="line">        <span class="comment">//调用第一个版本的destroy()</span></span><br><span class="line">        destroy(&amp;* first);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果元素的数值型别(value type)有trivial destructor,函数什么也不做</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIterator</span>, <span class="title">ForwardIterator</span>, __<span class="title">true_type</span>&gt;&#123;</span></span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">void</span> __destroy_aux(ForwardIterator, ForwardIterator, __true_type)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//destroy()中第二版本针对迭代器为char* 和 wchar_t*的特化版本,函数什么都不做</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">desroy</span><span class="params">(<span class="keyword">char</span>*, <span class="keyword">char</span>*)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">(<span class="keyword">wchar_t</span>*,<span class="keyword">wchar_t</span>*)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>代码解释：<code>destroy()</code>有两个版本，<strong>第一个版本接收一个指针，准备将该指针所指之物析构，这个直接调用该对象的析构函数即可</strong>。第二个版本接收first和last两个迭代器，准备将<code>[firat, last)</code>范围内的所有对象析构。我们不知道范围有多大，万一很大，而每个对象的析构函数都无关痛痒(所谓<code>trivial destructor</code>),那么一次次调用这些无关痛痒的析构函数，对效率是一个伤害，因此，<strong>这里首先利用<code>value_type()</code>获得迭代器所指对象的型别，再利用<code>__type_traits&lt;T&gt;</code>判断该型别的析构函数是否无关痛痒。若是<code>(__true_type)</code>，则什么都不做结束；若不是<code>(__false_type)</code>,这才循环巡防整个范围，并在循环中每经历一个对象就调用第一个版本的<code>destroy()</code>。</strong></p><p>construct()和destroy()图解：对于C++本身并不支持“指针所指之物”的型别判断，也不支持对“对象析构函数是否为trivial”的判断，具体实现value_type()和__type_traits&lt;&gt;在3.7节。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201802011438_654.png-960.jpg" alt="construct()和destroy()图解"></p><h4 id="2-2-4-空间的配置与释放，std-alloc"><a href="#2-2-4-空间的配置与释放，std-alloc" class="headerlink" title="2.2.4 空间的配置与释放，std::alloc"></a>2.2.4 空间的配置与释放，std::alloc</h4><p>对象构造前的空间配置和对象析构后的空间释放，由<code>&lt;stl_alloc.h&gt;</code>负责。</p><ol><li>向 system heap 要求空间</li><li>考虑多线程(multi-threads)状态(这里不考虑多线程的情况)</li><li>考虑内存不足时的应变措施</li><li>考虑过多“小型区域”可能造成的内存碎片(fragment)问题</li></ol><p><strong>C++内存配置的基本操作是:<code>:operator new()</code>，内存释放的基本操作是<code>::operator delete()</code>。这两个全局函数相当于C的malloc()和free()函数，所以SGI正是用malloc()和free()完成内存的配置和释放。</strong></p><p>为了解决小型区块可能造成的内存破碎问题，SGI设计了双层级的配置器，<strong>第一级配置器<code>(__malloc_alloc_template)</code>用malloc()和free()，第二级配置器<code>(__default_alloc_template)</code>看情况而定：当配置区块超过128bytes，调用第一级配置器；小于128bytes，采用复杂的内存池<code>memory bool</code>整理方式。</strong>其中具体是开放了第一级配置器还是两级配置器都开放了由<strong>USE_MEALLOC是否定义决定，定义了</strong>USE_MEALLOC就将alloc定义为第一级配置器，没有定义就将alloc定义为第二级配置器。SGI STL采用第二级配置器。</p><p>无论是第一级配置器还是第二级配置器，SGI都为其包装了一个接口<code>simple_alloc</code>，使其能够符合STL的接口规格。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>,<span class="title">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">simple_alloc</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> T* <span class="title">allocate</span><span class="params">(<span class="keyword">size_t</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> == n?<span class="number">0</span> : (T*) Alloc::allocate(n* <span class="keyword">sizeof</span> (T));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> T* <span class="title">allocate</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T*) Alloc::allocatte(<span class="keyword">sizeof</span> (T));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dallocate</span><span class="params">(T* p, <span class="keyword">size_t</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span> != n)</span><br><span class="line">            Alloc::deallocate(p, n*<span class="keyword">sizeof</span> (T));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deallocat</span><span class="params">(T* p)</span></span>&#123;</span><br><span class="line">        Alloc::deallocate(p, <span class="keyword">sizeof</span> (T));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>内部四个成员函数都是单纯的转调用，这个接口使配置器的单位从bytes转为个别元素的大小(sizeof(T))。</p><p>图解如下：<br>    第一级配置器和第二级配置器：<img src="http://p3ax8ersb.bkt.clouddn.com/201802011620_34.png-960.jpg" alt="第一级配置器和第二级配置器"><br>    包装接口和运用：<img src="http://p3ax8ersb.bkt.clouddn.com/201802011647_747.png-960.jpg" alt="包装接口和运用"></p><p>更新时间：2018.02.17</p><h4 id="2-2-5-第一级配置器-malloc-alloc-template-剖析"><a href="#2-2-5-第一级配置器-malloc-alloc-template-剖析" class="headerlink" title="2.2.5 第一级配置器 __malloc_alloc_template 剖析"></a>2.2.5 第一级配置器 __malloc_alloc_template 剖析</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span> inst&gt; <span class="comment">//inst 没有用到</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> __<span class="title">malloc_alloc_template</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//处理内存不够的情况</span></span><br><span class="line">    <span class="comment">//oom: out of memory</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">oom_malloc</span><span class="params">(<span class="keyword">size_t</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">oom_realloc</span><span class="params">(<span class="keyword">void</span>*, <span class="keyword">size_t</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">void</span> <span class="params">(* __malloc_alloc_oom_handler)</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//直接调用malloc，free，realloc，只是多了一层封装，使之可以处理内存不够的情况</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="title">allocate</span><span class="params">(<span class="keyword">size_t</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">void</span> *result = <span class="built_in">malloc</span>(n);</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span> == result)</span><br><span class="line">            result = oom_malloc(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deallocate</span><span class="params">(<span class="keyword">void</span>* p, <span class="keyword">size_t</span>)</span></span>&#123;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="title">reallocate</span><span class="params">(<span class="keyword">void</span>* p, <span class="keyword">size_t</span>, <span class="keyword">size_t</span> new_sz)</span></span>&#123;</span><br><span class="line">        <span class="keyword">void</span>* result = <span class="built_in">realloc</span>(p, new_sz);</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span> = result)</span><br><span class="line">            result = oom_realloc(p, new_sz);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//仿真c++的set_new_handdler()</span></span><br><span class="line">    static void(* set_malloc_handler(void(*f)()))()&#123;</span><br><span class="line">        <span class="comment">//被调用的函数__malloc_alloc_oom_handler</span></span><br><span class="line">        <span class="keyword">void</span>(* old)() = __malloc_alloc_oom_handler;</span><br><span class="line">        __malloc_alloc_oom_handler = f;</span><br><span class="line">        <span class="keyword">return</span> (old);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//__malloc_alloc_oom_handler函数初始值是0，该值由客端自己设定</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">int</span> inst&gt;</span><br><span class="line">    <span class="keyword">void</span> (* __malloc_alloc_template&lt;inst&gt; :: __malloc_alloc_oom_handler)() = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//oom_malloc</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">int</span> inst&gt;</span><br><span class="line">    <span class="keyword">void</span>* __malloc_alloc_template&lt;inst&gt; :: oom_malloc(<span class="keyword">size_t</span> n)&#123;</span><br><span class="line">        <span class="keyword">void</span> (* my_malloc_handler)();</span><br><span class="line">        <span class="keyword">void</span>* result;</span><br><span class="line">        <span class="keyword">for</span>(; ;)&#123;   <span class="comment">//不停的尝试，释放，配置，释放，配置……</span></span><br><span class="line">            my_malloc_handler = __malloc_alloc_oom_handler;</span><br><span class="line">            <span class="comment">//如果没有设置__malloc_alloc_oom_handler的值，直接抛出异常</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="number">0</span> == my_malloc_handler)&#123;</span><br><span class="line">                __THROW_BAD_ALLOC;</span><br><span class="line">            &#125;</span><br><span class="line">            (*my_malloc_handler)(); <span class="comment">//调用处理例程，企图释放内存</span></span><br><span class="line">            result = <span class="built_in">malloc</span>(n);     <span class="comment">//再次配置</span></span><br><span class="line">            <span class="keyword">if</span>(result)</span><br><span class="line">                <span class="keyword">return</span> (result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//oom_realloc</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">int</span> inst&gt;</span><br><span class="line">    <span class="keyword">void</span>* __malloc_alloc_template&lt;inst&gt; :: oom_realloc(<span class="keyword">void</span>* p, <span class="keyword">size_t</span> n)&#123;</span><br><span class="line">        <span class="keyword">void</span> (* my_malloc_handler)();</span><br><span class="line">        <span class="keyword">void</span>* result;</span><br><span class="line">        <span class="keyword">for</span>(; ;)&#123;   <span class="comment">//不停的尝试，释放，配置，释放，配置……</span></span><br><span class="line">            my_malloc_handler = __malloc_alloc_oom_handler;</span><br><span class="line">            <span class="comment">//如果没有设置__malloc_alloc_oom_handler的值，直接抛出异常</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="number">0</span> == my_malloc_handler)&#123;</span><br><span class="line">                __THROW_BAD_ALLOC;</span><br><span class="line">            &#125;</span><br><span class="line">            (*my_malloc_handler)(); <span class="comment">//调用处理例程，企图释放内存</span></span><br><span class="line">            result = <span class="built_in">malloc</span>(n);     <span class="comment">//再次配置</span></span><br><span class="line">            <span class="keyword">if</span>(result)</span><br><span class="line">                <span class="keyword">return</span> (result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一级配置器以malloc()、free()、realloc()等C函数执行实际的内存的配置、释放、重配置操作，同时实现出类似C++ new-handler的机制。所谓new-handler就是在系统内存配置需求无法被满足的情况下，调用一个指定的函数。</p><h4 id="2-2-6-第二级配置器-default-alloc-template-剖析"><a href="#2-2-6-第二级配置器-default-alloc-template-剖析" class="headerlink" title="2.2.6 第二级配置器__default_alloc_template 剖析"></a>2.2.6 第二级配置器__default_alloc_template 剖析</h4><p>第二级配置器__default_alloc_template多了些机制，避免太多小额区块造成内存的碎片。</p><p>当区块超过128bytes，则用内存池管理，此做法又称为次层配置(sub-allocation)：每次配置一大块内存，并维护对应自由链表(free-lists)。下次如果再有相同大小的内存需求，就直接从free-lists中取出。如果客端释放返还小额区块，就有配置器会受到free-lists中。二级配置器会自动将内存调整为8的倍数，并维护16个free-lists，各自管理8的倍数的小额区块。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//free-list的节点</span></span><br><span class="line"><span class="keyword">union</span> obj&#123;</span><br><span class="line">    <span class="keyword">union</span> obj *free_list_link;</span><br><span class="line">    <span class="keyword">char</span> client_data[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中，obj是一个obj指针，指向下一个相同大小的区块。同时obj是一个指针，指向实际中区块。结合2.2.7的图理解。<br>如图：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201802171615_46.png-480.jpg" alt="free-lists"></p><h4 id="2-2-7-空间配置函数allocate"><a href="#2-2-7-空间配置函数allocate" class="headerlink" title="2.2.7 空间配置函数allocate()"></a>2.2.7 空间配置函数allocate()</h4><p>allocate()是二级配置器__default_alloc_template的一个标准接口函数。这个函数首先判断区块大小，大于128bytes调用的第一级配置器，小于128bytes的查询对应free-list有可以用的区块，就直接拿来用，如果没有，就将区块大小调至8倍数边界，然后调用refill()，为free list重新填充空间。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//n &gt; 0</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="title">allocate</span><span class="params">(<span class="keyword">size_t</span> n)</span></span>&#123;</span><br><span class="line">    <span class="comment">//二级指针，但是volatile的用法不详</span></span><br><span class="line">    obj* <span class="keyword">volatile</span> *my_free_list;</span><br><span class="line">    obj* result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(n&gt;(<span class="keyword">size_t</span>) __MAX_BYTES)&#123;</span><br><span class="line">        <span class="keyword">return</span> (malloc_alloc::allocate(n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//寻找16个free list中适合的一个</span></span><br><span class="line">    my_free_list = free_list + FREELIST_INDEX(n);</span><br><span class="line">    result  = *my_free_list;</span><br><span class="line">    <span class="keyword">if</span>(result == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//准备填充free list</span></span><br><span class="line">        <span class="keyword">void</span>* r = refill(ROUND_UP(n));</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//调整free list</span></span><br><span class="line">    *my_free_list = result -&gt; free_list_link;</span><br><span class="line">    <span class="keyword">return</span> (result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>图解如下：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201802171658_88.png-480.jpg" alt="freel list 拔出"></p><h4 id="2-2-8-空间释放函数-deallocate"><a href="#2-2-8-空间释放函数-deallocate" class="headerlink" title="2.2.8 空间释放函数 deallocate()"></a>2.2.8 空间释放函数 deallocate()</h4><p>deallocate()是配置器__default_alloc_template的一个标准接口函数。大于128bytes调用第一级配置器，小于128bytes找到对应的free list将区块回收。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// p不可以是 0</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deallocate</span><span class="params">(<span class="keyword">void</span> *p, <span class="keyword">size_t</span> n)</span></span>&#123;</span><br><span class="line">    obj* q = (obj* )p;</span><br><span class="line">    <span class="comment">//二级指针，但是volatile的用法不详</span></span><br><span class="line">    obj* <span class="keyword">volatile</span> *my_free_list;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(n&gt;(<span class="keyword">size_t</span>) __MAX_BYTES)&#123;</span><br><span class="line">        malloc_alloc::deallocate(p, n);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//寻找对应的free list</span></span><br><span class="line">    my_free_list = free_list + FREELIST_INDEX(n);</span><br><span class="line">    <span class="comment">//调整free list，回收区域</span></span><br><span class="line">    q-&gt;free_list_link = *my_free_list();</span><br><span class="line">    *my_free_list = q;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>图解如下：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201802171745_127.png-480.jpg" alt="deallocate"></p><h4 id="2-2-9-重新填充-free-lists"><a href="#2-2-9-重新填充-free-lists" class="headerlink" title="2.2.9 重新填充 free lists"></a>2.2.9 重新填充 free lists</h4><p>allocate()中，当它发现free list中没有可用区块的时候，调用refill()，为free list重新填充空间。新的空间将取自内存池(chunk_alloc()完成)。缺省获得20个新节点。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回一个大小为n的对象，并且有时候会为适当的free list增加节点</span></span><br><span class="line"><span class="comment">//假设n已经适当上调至8的倍数</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">bool</span> threads, <span class="keyword">int</span> inst&gt;</span><br><span class="line"><span class="keyword">void</span>* __default_alloc_template&lt;threads, inst&gt; :: refill(<span class="keyword">size_t</span> n)&#123;</span><br><span class="line">    <span class="keyword">int</span> nobjs = <span class="number">20</span>; <span class="comment">//缺省值</span></span><br><span class="line">    <span class="comment">//调用chunk_alloc()，尝试获得nobjs个区块作为free list的新节点</span></span><br><span class="line">    <span class="keyword">char</span>* chunk = chunk_alloc(n, nobjs);</span><br><span class="line">    obj* <span class="keyword">volatile</span>* my_free_list;</span><br><span class="line">    obj* result;</span><br><span class="line">    obj* current_obj, *next_obj;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="comment">//如果只获得一个区块，这个区块就分配给调用者使用，free list无新节点</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span> == nobjs)</span><br><span class="line">        <span class="keyword">return</span> (chunk);</span><br><span class="line">    <span class="comment">//否则调整free list纳入新的节点</span></span><br><span class="line">    my_free_list = free_list + FREELIST_INDEX(n)；</span><br><span class="line">    <span class="comment">//以下在chunk空间创建free list</span></span><br><span class="line">    result = (obj *)chumk;</span><br><span class="line">    <span class="comment">//以下导引free list 指向新配置的空间(取自内存池)</span></span><br><span class="line">    *my_free_list = next_obj = (obj*)(chunk + n);</span><br><span class="line">    <span class="comment">//以下将free list 的各个节点串联起来</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; ; i++)&#123;  <span class="comment">//从n == 1开始，因为0号要返回给客端</span></span><br><span class="line">        current_obj = next_obj;</span><br><span class="line">        next_obj = (obj*)((<span class="keyword">char</span> *)next_obj + n);</span><br><span class="line">        <span class="keyword">if</span>(nobjs - <span class="number">1</span> == i)&#123;</span><br><span class="line">            current_obj -&gt; free_list_link = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            current_obj-&gt;free_list_link = next_obj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>内存池暂时先按下……</p><h4 id="2-2-10-内存池-memory-pool"><a href="#2-2-10-内存池-memory-pool" class="headerlink" title="2.2.10 内存池(memory pool)"></a>2.2.10 内存池(memory pool)</h4><h3 id="2-3-内存基本处理工具"><a href="#2-3-内存基本处理工具" class="headerlink" title="2.3 内存基本处理工具"></a>2.3 内存基本处理工具</h3><p>STL定义了五个全局函数，作用于未初始化化空间上：用于构造的<code>construct()</code>和析构的<code>destroy()</code>,另外三个是：<code>uninitialized_copy(),uninitialized_fill(),uninitialozed_fill_n()</code>(定于于<code>&lt;memory&gt;</code>),分别对应于高层次函数<code>copy(),fill(),fill_n()</code>,这些都是STL的算法。</p><h4 id="2-3-1-uninitialized-copy"><a href="#2-3-1-uninitialized-copy" class="headerlink" title="2.3.1 uninitialized_copy"></a>2.3.1 uninitialized_copy</h4><h4 id="2-3-2-uninitialized-fill"><a href="#2-3-2-uninitialized-fill" class="headerlink" title="2.3.2 uninitialized_fill"></a>2.3.2 uninitialized_fill</h4><h4 id="2-3-3-uninitialized-fill-n"><a href="#2-3-3-uninitialized-fill-n" class="headerlink" title="2.3.3 uninitialized_fill_n"></a>2.3.3 uninitialized_fill_n</h4>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-STL概论与版本简介&quot;&gt;&lt;a href=&quot;#1-STL概论与版本简介&quot; class=&quot;headerlink&quot; title=&quot;1 STL概论与版本简介&quot;&gt;&lt;/a&gt;1 STL概论与版本简介&lt;/h2&gt;&lt;h3 id=&quot;1-2-STL六大组件&quot;&gt;&lt;a href=&quot;#1-2-STL六大组件&quot; class=&quot;headerlink&quot; title=&quot;1.2 STL六大组件&quot;&gt;&lt;/a&gt;1.2 STL六大组件&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;容器(containers):&lt;code&gt;vector,list,deque,set,map&lt;/code&gt;,用来存放数据&lt;/li&gt;
&lt;li&gt;算法(algorithms):&lt;code&gt;sort,search,copy,erase&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;迭代器(iterators):扮演容器与算法之间的胶合剂，所谓的“泛型指针”。从实现角度来看，
    
    </summary>
    
      <category term="learning" scheme="http://www.jingxxn.cn/categories/learning/"/>
    
    
  </entry>
  
  <entry>
    <title>复杂单链表的复制</title>
    <link href="http://www.jingxxn.cn/%E5%A4%8D%E6%9D%82%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6.html"/>
    <id>http://www.jingxxn.cn/复杂单链表的复制.html</id>
    <published>2018-01-31T06:54:57.000Z</published>
    <updated>2018-02-08T06:19:39.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目:"></a>题目:</h2><p>有一个单链表，该链表节点有两个指针，一个<code>_next</code>指向下一个节点，另一个<code>_random</code>指向任意节点，可能为NULL，可能是前面或后面的节点。请复制该链表，并返回头结点指针。</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><ol><li>单链表的复制比较简单，但是<code>_random</code>不好处理，如果<code>_random</code>指向前面的节点，我们该如何处理。<code>_random</code>还有可能是指向NULL，这种情况也需要单独处理。<a id="more"></a></li><li>为了解决这个问题，我们可以用一个比较巧妙的方法，对每一个节点都复制，同时插入到当前节点的后面。这样我们就得到了一个重复的链表，此时有一个优势，新<code>_random</code>就是原来<code>_random</code>的后一个。我们就不需要在考虑往前寻找的问题了。只需要找到当前节点的<code>_random</code>的<code>_next</code>就行。</li><li>这样处理之后，我们就得到了一个新的链表，接着只需要进行拆分就好了。</li></ol><h3 id="看图如下："><a href="#看图如下：" class="headerlink" title="看图如下："></a>看图如下：</h3><p>创建了一个复杂链表<br><img src="http://p3ax8ersb.bkt.clouddn.com/201801311509_357.png" alt="复杂链表"></p><p>进行对每一个节点的复制同时插入到原链表中<br><img src="http://p3ax8ersb.bkt.clouddn.com/201801311511_432.png" alt="复制并插入"></p><h3 id="给出节点的结构如下："><a href="#给出节点的结构如下：" class="headerlink" title="给出节点的结构如下："></a>给出节点的结构如下：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> datatype int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">complexnode</span>&#123;</span></span><br><span class="line">    complexnode(datatype val)&#123;</span><br><span class="line">        _data = val;</span><br><span class="line">        _next = <span class="literal">NULL</span>;</span><br><span class="line">        _random = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    datatype _data;</span><br><span class="line">    complexnode* _next;</span><br><span class="line">    complexnode* _random;</span><br><span class="line">&#125;comnode;</span><br></pre></td></tr></table></figure><h3 id="实现代码如下："><a href="#实现代码如下：" class="headerlink" title="实现代码如下："></a>实现代码如下：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="function">comnode* <span class="title">copy_complex_list</span><span class="params">( comnode* head )</span></span>&#123;</span><br><span class="line">    comnode* cur = head;</span><br><span class="line">    comnode* next = cur-&gt;_next;</span><br><span class="line">    <span class="keyword">if</span>( cur == <span class="literal">NULL</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将每一个节点复制到当前节点的后面，并链入链表</span></span><br><span class="line">    <span class="keyword">while</span>( cur )&#123;</span><br><span class="line">        comnode* tmp = <span class="keyword">new</span> comnode(cur-&gt;_data);</span><br><span class="line">        cur-&gt;_next = tmp;</span><br><span class="line">        tmp-&gt;_next = next;</span><br><span class="line">        cur = next;</span><br><span class="line">        <span class="comment">//防止对NULL访问</span></span><br><span class="line">        <span class="keyword">if</span>( cur )</span><br><span class="line">            next = cur-&gt;_next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将指针重置指向头结点</span></span><br><span class="line">    cur = head;</span><br><span class="line">    next = cur-&gt;_next;</span><br><span class="line">    <span class="comment">//给新链入的节点置random</span></span><br><span class="line">    <span class="keyword">while</span>( cur )&#123;</span><br><span class="line">        <span class="comment">//分类处理_random为NULL的情况</span></span><br><span class="line">        <span class="keyword">if</span>( cur-&gt;_random )</span><br><span class="line">            next-&gt;_random = cur-&gt;_random-&gt;_next;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            next-&gt;_random = <span class="literal">NULL</span>;</span><br><span class="line">        cur = next-&gt;_next;</span><br><span class="line">        <span class="keyword">if</span>( cur )</span><br><span class="line">            next = cur-&gt;_next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cur = head;</span><br><span class="line">    next = cur-&gt;_next;</span><br><span class="line">    comnode* result = next;</span><br><span class="line">    <span class="comment">//拆分两个链表</span></span><br><span class="line">    <span class="keyword">while</span>( cur )&#123;</span><br><span class="line">        cur-&gt;_next = next-&gt;_next;</span><br><span class="line">        cur = cur-&gt;_next;</span><br><span class="line">        <span class="keyword">if</span>( cur )&#123;</span><br><span class="line">            next-&gt;_next = cur-&gt;_next;</span><br><span class="line">            next = next-&gt;_next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_random</span><span class="params">( comnode* head )</span></span>&#123;</span><br><span class="line">    comnode* cur = head;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"list:"</span>;</span><br><span class="line">    <span class="keyword">while</span>( cur )&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; cur-&gt;_data &lt;&lt; <span class="string">"-&gt;"</span>;</span><br><span class="line">        cur = cur-&gt;_next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"NULL"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"random:"</span>;</span><br><span class="line">    cur = head;</span><br><span class="line">    <span class="keyword">while</span>( cur )&#123;</span><br><span class="line">        <span class="keyword">if</span>( cur-&gt;_random )</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; cur-&gt;_random-&gt;_data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"NULL"</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        cur = cur-&gt;_next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    comnode* head = <span class="keyword">new</span> comnode(<span class="number">1</span>);</span><br><span class="line">    comnode* n1 = <span class="keyword">new</span> comnode(<span class="number">2</span>);</span><br><span class="line">    comnode* n2 = <span class="keyword">new</span> comnode(<span class="number">4</span>);</span><br><span class="line">    comnode* n3 = <span class="keyword">new</span> comnode(<span class="number">5</span>);</span><br><span class="line">    comnode* n4 = <span class="keyword">new</span> comnode(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">    head-&gt;_next = n1;</span><br><span class="line">    n1-&gt;_next = n2;</span><br><span class="line">    n2-&gt;_next = n3;</span><br><span class="line">    n3-&gt;_next = n4;</span><br><span class="line">    n4-&gt;_next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    head-&gt;_random = n2;</span><br><span class="line">    n1-&gt;_random = head;</span><br><span class="line">    n2-&gt;_random = n3;</span><br><span class="line">    n3-&gt;_random = <span class="literal">NULL</span>;</span><br><span class="line">    n4-&gt;_random = n4;</span><br><span class="line"></span><br><span class="line">    system( <span class="string">"clear"</span> );</span><br><span class="line">    comnode* copy_list = copy_complex_list( head );</span><br><span class="line">    print_random(head);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"copy_list:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    print_random(copy_list);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果如下："><a href="#运行结果如下：" class="headerlink" title="运行结果如下："></a>运行结果如下：</h3><p>同时打印了原来的链表和复制的链表<br><img src="http://p3ax8ersb.bkt.clouddn.com/201801311519_393.png" alt="打印结果"></p><p><a href="http://blog.csdn.net/mac_timmy/article/details/78482792" target="_blank" rel="noopener">CSDN上用C写的，同时也将各个部分功能进行了函数封装</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目:&quot;&gt;&lt;/a&gt;题目:&lt;/h2&gt;&lt;p&gt;有一个单链表，该链表节点有两个指针，一个&lt;code&gt;_next&lt;/code&gt;指向下一个节点，另一个&lt;code&gt;_random&lt;/code&gt;指向任意节点，可能为NULL，可能是前面或后面的节点。请复制该链表，并返回头结点指针。&lt;/p&gt;
&lt;h3 id=&quot;思路：&quot;&gt;&lt;a href=&quot;#思路：&quot; class=&quot;headerlink&quot; title=&quot;思路：&quot;&gt;&lt;/a&gt;思路：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;单链表的复制比较简单，但是&lt;code&gt;_random&lt;/code&gt;不好处理，如果&lt;code&gt;_random&lt;/code&gt;指向前面的节点，我们该如何处理。&lt;code&gt;_random&lt;/code&gt;还有可能是指向NULL，这种情况也需要单独处理。
    
    </summary>
    
      <category term="practice" scheme="http://www.jingxxn.cn/categories/practice/"/>
    
      <category term="C/C++" scheme="http://www.jingxxn.cn/categories/practice/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>浅读《More Effective C++》笔记</title>
    <link href="http://www.jingxxn.cn/%E6%B5%85%E8%AF%BB%E3%80%8AMore%20Effective%20C++%E3%80%8B%E7%AC%94%E8%AE%B0.html"/>
    <id>http://www.jingxxn.cn/浅读《More Effective C++》笔记.html</id>
    <published>2018-01-30T06:27:03.000Z</published>
    <updated>2018-03-13T04:03:44.524Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章-基础议题"><a href="#第一章-基础议题" class="headerlink" title="第一章 基础议题"></a>第一章 基础议题</h2><h3 id="条款1：区分指针和引用"><a href="#条款1：区分指针和引用" class="headerlink" title="条款1：区分指针和引用"></a>条款1：区分指针和引用</h3><p><strong>不存在空引用，引用必须要指向某个对象。当确定某个对象不允许有空值，就需要定义为引用，而不是指针。</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这种做法语法上没有错误，出现了引用为空的情况。但是不同的编译器会有不同的报错。不允许出现这样的代码。</span></span><br><span class="line"><span class="keyword">char</span>* pc = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> &amp;rc = *pc;</span><br></pre></td></tr></table></figure></p><p>因为不存在空引用这种情况，所以使引用会比指针更高效。<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引用不用判空</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_double</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span>&amp; rd)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; rd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//指针要判空</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_double1</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span> *pd)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pd)&#123; <span class="built_in">cout</span> &lt;&lt; *pd; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>指针可以被重新赋值用以指向另外一个不同的对象，而引用则总是指向初始化时它指向的对象。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s1</span><span class="params">(<span class="string">"nancy"</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s2</span><span class="params">(<span class="string">"clancy"</span>)</span></span>;</span><br><span class="line"><span class="built_in">string</span>&amp; rs = s1;</span><br><span class="line"><span class="built_in">string</span> *ps = &amp;s1;</span><br><span class="line"><span class="comment">//rs依然是s1的引用，此时rs = s1 = s2 = "clancy"</span></span><br><span class="line">rs = s2;</span><br><span class="line"><span class="comment">//ps指向了s2,不再指向s1</span></span><br><span class="line">ps = &amp;s2;</span><br></pre></td></tr></table></figure></p><p><strong>实现某些操作符的时候，最常见的是[]操作符，绝大多数应该返回引用。</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//一般情况下的返回值，此时是引用</span></span><br><span class="line">v[<span class="number">5</span>] = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//如果返回的是指针就需要这样解引用，看起来v就像是一个指针vector一样。</span></span><br><span class="line">*v[<span class="number">5</span>] = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></p><h3 id="条款2：优先考虑C-风格的类型转换"><a href="#条款2：优先考虑C-风格的类型转换" class="headerlink" title="条款2：优先考虑C++风格的类型转换"></a>条款2：优先考虑C++风格的类型转换</h3><p>四个类型转换操作符：static_cast,const_cast,dynamic_cast,reinterpret_cast</p><ul><li><strong>static_cast：作用类似于C中的隐式类型转换，只能转换相近类型的变量。比如struct到int的转换就不能实现。而且在C++中，static_cast并不能将const属性转换为非const属性。</strong></li><li><strong>const_cast：专门用来去除const属性和volatile属性。const_cast被用来用作其他的类型转换会被拒绝。</strong></li><li><strong>dynamic_cast：它是用来针对一个继承体系做向下或者横向的安全转换的。也就是说，用dynamic_cast把指向基类的指针或引用转换成指向派生类或者基类的兄弟类的指针或引用，同时可以知道是否成功。出现空指针(转换指针的时候)或者出现异常(转换引用的时候)意味着失败。他不能用于哪些没有虚函数的类型，也不能去除const属性。</strong></li><li><strong>reinterpret_const：这个操作符，转换结果往往是编译器定义的。因此它几乎是不可以移植的。最常见的用法是在函数指针之间进行类型转换。但是一般我们不使用这种转换，因为c++没有规定这种做法，有可能出现未知的错误，除非万不得已，不然不使用。</strong></li></ul><p>使用格式举例：<br><code>static_cast&lt;double&gt; (first); const_cast&lt;special*&gt;(first); dynamic_cast&lt;special *&gt;(&amp;first); reinterpret_cast&lt;funcptr&gt; (&amp;dosomething)</code></p><h3 id="条款3：绝不要把多态应用于数组"><a href="#条款3：绝不要把多态应用于数组" class="headerlink" title="条款3：绝不要把多态应用于数组"></a>条款3：绝不要把多态应用于数组</h3><p>继承的一大特性，它允许你通过指向基类的指针和引用来操纵派生类对象。这种指针和引用的行为具有多态性。<strong>同时C++也允许你通过基类指针和引用来操纵派生类数组，但是这个应该不被允许</strong>。见下面这个例子：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个BST类，有一个BalancedBST的类，它继承与BST</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BST</span>&#123;</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BalancedBST</span>&#123;</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//一个用于打印BST数组中BST元素的函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printBSTArray</span><span class="params">(ostream&amp;s, <span class="keyword">const</span> BST <span class="built_in">array</span>[], <span class="keyword">int</span> numElements)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numElements; ++i )&#123;</span><br><span class="line">        s &lt;&lt; <span class="built_in">array</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第一种情况，传递的数组是BST数组，程序没有问题；第二种情况，传递的数组是BalancedBST数组(继承于BST),编译器并不会报错，但是会出现问题，关键在于对array[i]的使用。<code>array[i]=*(array+i)</code>，我们知道array是指向数组的首地址的指针，其中array+i偏移的地址是根据元素的大小而定的。因为上例子中，array的类型是BST，所以array[i]的偏移是array+i*sizeof(SBT)。但我们传递了BST的子类BalancedBST给array，这样array的访问就会出现问题。</p><p>同时，如果打算通过一个基类指针删除一个包含派生类对象的数组，一样会出现问题。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteArray</span><span class="params">(ostream&amp; logStream, BST <span class="built_in">array</span>[])</span></span>&#123;</span><br><span class="line">    logStream &lt;&lt; <span class="keyword">static_cast</span>&lt;<span class="keyword">void</span>*&gt;(<span class="built_in">array</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">delete</span>[] <span class="built_in">array</span>;</span><br><span class="line">&#125;</span><br><span class="line">BalancedBST *balTreeArray = <span class="keyword">new</span> BalancedBST[<span class="number">50</span>];</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">deleteArray(<span class="built_in">cout</span>, balTreeArray);</span><br></pre></td></tr></table></figure></p><p>明面上这里并没有调用指针，但是当删除数组的时候，数组元素的析构函数必须被调用。</p><h3 id="条款4-避免不必要的默认构造函数"><a href="#条款4-避免不必要的默认构造函数" class="headerlink" title="条款4 避免不必要的默认构造函数"></a>条款4 避免不必要的默认构造函数</h3><p>更新时间：2018.02.19<br>默认构造函数指的是在C++语言中，不需要传参数就可以调用的构造函数，用于对象的初始化。但有的时候，我们要求这个对象，必须包含一些特定的值。比如下面例子：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EquipmentPiece</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    EquipmentPiece( <span class="keyword">int</span> IDNumber )&#123;&#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>此时EquipmentPiece类没有默认的构造函数，有三种情况，对它的应用会出现问题。第一种情况，如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EquipmentPiece bestPieces[<span class="number">10</span>];  <span class="comment">//没法调用构造函数</span></span><br><span class="line">EquipmentPiece *bestPieces = <span class="keyword">new</span> EquipmentPiece[<span class="number">10</span>];    <span class="comment">//没法调用构造函数</span></span><br></pre></td></tr></table></figure></p><p>这里有三种方法可以避开这个限制。第一种，对于不在堆上分配内存的数组，在定义数组的时候，提供必要参数。<strong>第二种，不使用对象数组，使用一个指针数组</strong>，如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> EquipmentPiece* PEP;</span><br><span class="line">PEP bestPieces[<span class="number">10</span>];</span><br><span class="line">PEP *bestPieces = <span class="keyword">new</span> PEP[<span class="number">10</span>];</span><br><span class="line"><span class="comment">//这样，数值的每一个指针都可以被重新赋值以指向不同的EquipmentPiece对象。</span></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i )&#123;</span><br><span class="line">    bestPieces[i] = <span class="keyword">new</span> EquipmentPiece( ID Number );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是这两种方法有两个缺点，<strong>第一个是，你必须记住删除数组指针所指向的所有对象，不然会出现内存泄漏。第二，这样的方法所需要的内存需求总量会增加，需要额外的空间去存储指针。</strong></p><p>第三种方法，为数组分配原始内存，可以避免额外的内存消耗，利用placement new技术，如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> * rawMemory = <span class="keyword">operator</span> <span class="keyword">new</span>[](<span class="number">10</span>*<span class="keyword">sizeof</span>(EquipmentPiece));</span><br><span class="line">EquipmentPiece* bestPieces = <span class="keyword">static_cast</span>&lt;EquipmentPiece*&gt;(rawMemory);</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i )&#123;</span><br><span class="line">    <span class="keyword">new</span>(bestPieces+i) EquipmentPiece( ID Number );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个方法的缺点是，删除的时候，先要手工调用析构函数，然后再手工调用delete[]函数，这样才能够释放原始内存。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">9</span>; i &gt;= <span class="number">0</span>; --i )&#123;</span><br><span class="line">    bestPieces[i].~EquipmentPiece();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">operator</span> <span class="keyword">delete</span>[](rawMemory);</span><br></pre></td></tr></table></figure></p><p>没有默认构造函数所造成的第二个问题是，他们没有办法作为许多基于模板的容器类的类型参数使用。因为通常用于实例化模板的那些类型需要提供默认构造函数。这个要求大多数时候来自模板内部需要创建关于模板参数类型的数组。例子如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Array</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Array( <span class="keyword">int</span> size );</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T* data;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">Array</span>&lt;T&gt;:</span>:Array(<span class="keyword">int</span> size)&#123;</span><br><span class="line">    date = <span class="keyword">new</span> T[size];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在大多数情况下，可以通过谨慎的设计排除对默认构造函数的需要。标准的vector模板就不要求。<br>没有默认构造函数的第三个问题是。在有虚基类的时候，到底要不要提供默认构造函数。没有默认构造函数的虚基类使用起来十分痛苦。这是因为虚基类的构造函数所要求的参数必须由被创建对象所属的最远的派生类提供。这样就导致了，没有默认构造函数的虚基类会要求所有由它继承下来的派生类都必须知道、理解虚基类构造函数的参数的含义并提供这些参数。</p><h2 id="第二章-运算符"><a href="#第二章-运算符" class="headerlink" title="第二章 运算符"></a>第二章 运算符</h2><h3 id="条款5：小心用户自定义的转换函数"><a href="#条款5：小心用户自定义的转换函数" class="headerlink" title="条款5：小心用户自定义的转换函数"></a>条款5：小心用户自定义的转换函数</h3><p>C++允许编译器在两种数据类型之间进行隐式转换，char到int、short到double。甚至会出现数据丢失的也可以，int到char、double到short的转换。<br>接下来介绍两种类型函数可以让编译器实施这种隐式转换：单个参数的构造函数和隐式的类型转换运算符。<br><strong>单个参数的构造函数</strong>指的是，只传递给它一个参数就可以调用的构造函数。这种构造函数可以只定义一个参数，也可以定义多个参数。定义多个参数的时候，除了第一个参数，后面的参数应该是有默认值的。例子如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Name(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ratinal</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Rational(<span class="keyword">int</span> numerator = <span class="number">0</span>, <span class="keyword">int</span> denominator = <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>隐式的类型转换运算符只不过是名字看上去比较奇怪的成员函数：在operator关键字后面指定类型。</p><h3 id="条款6：区分自增运算符和自减运算符的前缀形式和后缀形式"><a href="#条款6：区分自增运算符和自减运算符的前缀形式和后缀形式" class="headerlink" title="条款6：区分自增运算符和自减运算符的前缀形式和后缀形式"></a>条款6：区分自增运算符和自减运算符的前缀形式和后缀形式</h3><h4 id="前缀形式和后缀形式的区别"><a href="#前缀形式和后缀形式的区别" class="headerlink" title="前缀形式和后缀形式的区别"></a>前缀形式和后缀形式的区别</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UPInt</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    UPInt&amp; <span class="keyword">operator</span>++();</span><br><span class="line">    <span class="keyword">const</span> UPInt <span class="keyword">operator</span>++(<span class="keyword">int</span>);</span><br><span class="line">    UPInt&amp; <span class="keyword">operator</span>--();</span><br><span class="line">    <span class="keyword">const</span> UPInt <span class="keyword">operator</span>--(<span class="keyword">int</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当函数被调用的时候，编译器悄无声息的传递一个0作为int参数的值给该函数。<strong>其中前缀形式返回一个引用，后缀形式返回一个const对象。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">UPInt&amp; UPInt::<span class="keyword">operator</span>++()&#123;</span><br><span class="line">    *<span class="keyword">this</span> += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> UPInt UPInt::<span class="keyword">operator</span>++(<span class="keyword">int</span>)&#123;</span><br><span class="line">    count UPInt oldvalue = *<span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">//*this += 1;</span></span><br><span class="line">    <span class="comment">//复用前缀自增</span></span><br><span class="line">    ++(*<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> oldvalue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后缀形式返回const"><a href="#后缀形式返回const" class="headerlink" title="后缀形式返回const"></a>后缀形式返回const</h4><p>后缀自增形式的返回值是一个const对象，为什么是一个const对象呢？如果不是const对象，那么下面这个代码就是正确的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UPInt i;</span><br><span class="line">i++++;</span><br></pre></td></tr></table></figure><p>但是很明显这样是不正确的。根据内置类型的性质，当我们自增两次int类型的数据的时候，这个是不允许发生的。<br>有一个点需要说明的是，如果不是很必要使用后缀自增的形式，那么尽量使用前缀自增。<strong>因为后缀自增首先需要显示创建一个临时变量，然后返回的时候，还需要创建一个临时对象作为返回。最后结束函数的时候需要析构两者。如果十分在意效率问题，尽量使用前缀自增。</strong><br>最后，为了降低维护成本，后缀自增或自减最好复用前缀自增或自减。这样只需要维护前缀自增或自减即可。</p><h3 id="条款7：不要重载“-amp-amp-”、“-”和“-”"><a href="#条款7：不要重载“-amp-amp-”、“-”和“-”" class="headerlink" title="条款7：不要重载“ &amp;&amp; ”、“ || ”和“ , ”"></a>条款7：不要重载“ &amp;&amp; ”、“ || ”和“ , ”</h3><h4 id="短路求值法"><a href="#短路求值法" class="headerlink" title="短路求值法"></a>短路求值法</h4><p>C++使用了<strong>短路求值法</strong>对布尔表达式求值。这个表示，一旦确定了布尔表达式为真或为假，即使还有部分表达式还没有测试，布尔表达式也会停止运算。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>* p;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">if</span>(p != <span class="number">0</span> &amp;&amp; <span class="built_in">strlen</span>(p) &gt; <span class="number">10</span>)</span><br><span class="line">    <span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>这里我们永远不需要担心strlen中的p是否为0值，因为p=0的时候，strlen(p)根本就不会进行运算。</p><h4 id="不要重载“-amp-amp-”-和-“-”"><a href="#不要重载“-amp-amp-”-和-“-”" class="headerlink" title="不要重载“ &amp;&amp; ” 和 “ || ”"></a>不要重载“ &amp;&amp; ” 和 “ || ”</h4><p>实际上，C++允许我们对<code>&amp;&amp; ||</code>进行重载，但是为了保证短路求值法的正确性，我们要确定不要重载<code>&amp;&amp; ||</code>这两个运算符。如果重载了<code>&amp;&amp;</code>，效果如下：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(<span class="name">exp1</span> <span class="symbol">&amp;&amp;</span> exp2)</span><br><span class="line">if(<span class="name">exp1</span>.operator&amp;&amp;(<span class="name">exp2</span>)</span><br><span class="line">if(<span class="name">operator</span>(<span class="name">ex1</span>, ex2)</span><br></pre></td></tr></table></figure><p>这样就变成了函数的调用，首先，函数的调用需要求出两个参数的运算结果，这样就不能实现短路求值的功能；其次，函数的调用没有规定先运算哪个参数，有可能是第一个，也有可能是第二个。</p><h3 id="不要重载逗号运算符"><a href="#不要重载逗号运算符" class="headerlink" title="不要重载逗号运算符"></a>不要重载逗号运算符</h3><p>逆置一个字符串的例子：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">char</span> s[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="built_in">strlen</span>(s) - <span class="number">1</span>; i &lt; j; ++i, --j)&#123;</span><br><span class="line">        <span class="keyword">int</span> c = s[i];</span><br><span class="line">        s[i] = s[j];</span><br><span class="line">        s[j] = c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>包含逗号的表达式，首先计算逗号左边的表达式，然后计算右边的表达式；整个表达式返回最右边的表达式的值。</strong>鉴于你完全没有办法模拟这个行为，所以不要重载逗号运算符。</p><h4 id="同时也不要重载以下的运算符"><a href="#同时也不要重载以下的运算符" class="headerlink" title="同时也不要重载以下的运算符"></a>同时也不要重载以下的运算符</h4><ul><li><code>.</code></li><li><code>.*</code></li><li><code>::</code></li><li><code>?:</code></li><li><code>new delete sizeof typeid</code></li><li><code>static_cast dynamic_cast const_cast reinterpret_cast</code></li></ul><h3 id="条款8：理解new和delete在不同情形下的含义"><a href="#条款8：理解new和delete在不同情形下的含义" class="headerlink" title="条款8：理解new和delete在不同情形下的含义"></a>条款8：理解new和delete在不同情形下的含义</h3><h4 id="区分-new-操作符-new-operator-和-operator-new-函数"><a href="#区分-new-操作符-new-operator-和-operator-new-函数" class="headerlink" title="区分 new 操作符(new operator)和 operator new 函数"></a>区分 new 操作符(new operator)和 operator new 函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> *ps = <span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">"Memory Management"</span>);</span><br></pre></td></tr></table></figure><p>上面的代码中使用的new 指的是 new 操作符。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一章-基础议题&quot;&gt;&lt;a href=&quot;#第一章-基础议题&quot; class=&quot;headerlink&quot; title=&quot;第一章 基础议题&quot;&gt;&lt;/a&gt;第一章 基础议题&lt;/h2&gt;&lt;h3 id=&quot;条款1：区分指针和引用&quot;&gt;&lt;a href=&quot;#条款1：区分指针和引用&quot; class=&quot;headerlink&quot; title=&quot;条款1：区分指针和引用&quot;&gt;&lt;/a&gt;条款1：区分指针和引用&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;不存在空引用，引用必须要指向某个对象。当确定某个对象不允许有空值，就需要定义为引用，而不是指针。&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//这种做法语法上没有错误，出现了引用为空的情况。但是不同的编译器会有不同的报错。不允许出现这样的代码。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* pc = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; &amp;amp;rc = *pc;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因为不存在空引用这种情况，所以使引用会比指针更高效。&lt;br&gt;
    
    </summary>
    
      <category term="learning" scheme="http://www.jingxxn.cn/categories/learning/"/>
    
    
  </entry>
  
  <entry>
    <title>static const integral data member在类中的初始化</title>
    <link href="http://www.jingxxn.cn/static-const-integral-data-member%E5%9C%A8%E7%B1%BB%E4%B8%AD%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96.html"/>
    <id>http://www.jingxxn.cn/static-const-integral-data-member在类中的初始化.html</id>
    <published>2018-01-30T06:25:04.000Z</published>
    <updated>2018-02-09T02:36:56.418Z</updated>
    
    <content type="html"><![CDATA[<p><strong>当我们在类中定义了一个静态成员变量的时候，我们需要在类之外初始化它，因为他是属于所有的类的。</strong>该类的其它对象对这个静态变量也是可以进行修改的。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//非常量静态成员变量初始化对比</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">person</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> num;</span><br><span class="line">        <span class="comment">//static int num = 11;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> person::num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    person bob;</span><br><span class="line">    system(<span class="string">"clear"</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; bob.num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>在类内初始化非常量静态成员变量失败<br><img src="http://p3ax8ersb.bkt.clouddn.com/201801301358_611.png" alt="在类内初始化非常量静态成员变量"><br>在类外初始化静态成员变量成功<br><img src="http://p3ax8ersb.bkt.clouddn.com/201801301359_872.png" alt="在类外初始化静态成员变量"><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义另外一个对象timmy</span></span><br><span class="line">person timmy;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"timmy:"</span> &lt;&lt; timmy.num&lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure></p><p>同一个类的不同对象共用一个静态成员变量<br><img src="http://p3ax8ersb.bkt.clouddn.com/201801301406_632.png" alt="同一个类的不同对象共用一个静态成员变量"></p><p><strong>但是，常量的静态成员变量可以在类里面定义。</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">person</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> num = <span class="number">11</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> age = <span class="number">23</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    system(<span class="string">"clear"</span>);</span><br><span class="line">    person tom;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"tom:"</span> &lt;&lt; tom.num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"tom:"</span> &lt;&lt; tom.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>static const和const static一样的。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201801301417_598.png" alt="static const"></p><p><strong>可是只有integral data member才可以，像 int，long，char才行。double，float等都不行</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">person</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">double</span> num = <span class="number">2.2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    system(<span class="string">"clear"</span>);</span><br><span class="line">    person tom;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"tom:"</span> &lt;&lt; tom.num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>用 static const double 初始化失败<br><img src="http://p3ax8ersb.bkt.clouddn.com/201801301421_850.png" alt="double失败"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;当我们在类中定义了一个静态成员变量的时候，我们需要在类之外初始化它，因为他是属于所有的类的。&lt;/strong&gt;该类的其它对象对这个静态变量也是可以进行修改的。&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//非常量静态成员变量初始化对比&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;person&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//static int num = 11;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; person::num = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    person bob;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    system(&lt;span class=&quot;string&quot;&gt;&quot;clear&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; bob.num &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="knowledge" scheme="http://www.jingxxn.cn/categories/knowledge/"/>
    
      <category term="C/C++" scheme="http://www.jingxxn.cn/categories/knowledge/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>创建一个不能被继承的类</title>
    <link href="http://www.jingxxn.cn/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%8D%E8%83%BD%E8%A2%AB%E7%BB%A7%E6%89%BF%E7%9A%84%E7%B1%BB.html"/>
    <id>http://www.jingxxn.cn/创建一个不能被继承的类.html</id>
    <published>2018-01-29T02:23:19.000Z</published>
    <updated>2018-02-24T08:04:44.249Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p><strong>题目很简单，就是创建一个不能够被继承的类，同时能够正常使用。</strong></p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><ul><li>题目分为两部分组成，第一个是不能被继承的类。类如果要不能被继承，那么子类肯定不能够调用基类的构造函数或者析构函数。<a id="more"></a>那么我们只要将构造函数或析构函数定义为私有成员函数就好了。</li><li>第二个要求，能够正常使用，这样显然之前的方式是行不通的。构造函数为私有了，就无法创建对象了。那我再给他加一个友元函数，这样对象也可以创建了。</li><li>可是题目的要求是正常使用这个类，显然通过一个友元函数是不符合我们正常使用类的方式。</li><li>这个时候，正真正确的思路就出来了。我们借用一个中间类。例如：我们不能被继承的类是man，我们创建一个 <strong>私有构造函数的父类person</strong>，同时将 <strong>man定义为person的友元类</strong>。这样man就可以正常访问person的私有构造函数了。接着我们让 <strong>man虚继承person</strong>，到这里我们就完成了这个题目。</li><li><strong>让man虚继承person是为了让继承man的类，都需要在man的父类，即person中调用构造函数，但只有man是person的友元类，其他的类都不能访问person的构造函数。因此man就成为了不能被继承的类，而man本身可以正常使用。</strong></li></ul><h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//设计一个不能被继承的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">person</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">man</span>;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="comment">//构造函数为private</span></span><br><span class="line">        person()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//man虚拟继承person</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">man</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> person &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        man()&#123;</span><br><span class="line">            age = <span class="number">18</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class son:public man&#123;</span></span><br><span class="line"><span class="comment">//  public:</span></span><br><span class="line"><span class="comment">//      son()&#123;&#125;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    man bob;</span><br><span class="line">    system( <span class="string">"clear"</span> );</span><br><span class="line">    bob.show();</span><br><span class="line">    <span class="comment">//son tom;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不定义man的继承类son，正常输出man的age = 18<br><img src="http://p3ax8ersb.bkt.clouddn.com/201801291732_992.png-960.jpg" alt=""></p><p>定义man的继承类son失败<br><img src="http://p3ax8ersb.bkt.clouddn.com/201801291733_414.png-&lt;960 class=&quot;jpg&quot;&gt;&lt;/960" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目：&quot;&gt;&lt;a href=&quot;#题目：&quot; class=&quot;headerlink&quot; title=&quot;题目：&quot;&gt;&lt;/a&gt;题目：&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;题目很简单，就是创建一个不能够被继承的类，同时能够正常使用。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;思路：&quot;&gt;&lt;a href=&quot;#思路：&quot; class=&quot;headerlink&quot; title=&quot;思路：&quot;&gt;&lt;/a&gt;思路：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;题目分为两部分组成，第一个是不能被继承的类。类如果要不能被继承，那么子类肯定不能够调用基类的构造函数或者析构函数。
    
    </summary>
    
      <category term="practice" scheme="http://www.jingxxn.cn/categories/practice/"/>
    
      <category term="C/C++" scheme="http://www.jingxxn.cn/categories/practice/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>位运算实现Add</title>
    <link href="http://www.jingxxn.cn/%E4%BD%8D%E8%BF%90%E7%AE%97%E5%AE%9E%E7%8E%B0Add.html"/>
    <id>http://www.jingxxn.cn/位运算实现Add.html</id>
    <published>2018-01-28T05:30:43.000Z</published>
    <updated>2018-02-08T06:20:27.616Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p><strong>实现一个Add函数，让两个整数相加，不能够使用<code>+-*/、++、--</code></strong></p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><ul><li>正常实现两个数相加，有两个步骤，第一将两个数对应位相加，第二相加之后有进位，将进位值与对应位相加。举个例子，<code>15+5=20</code>先将位进行相加，不进行进位，得到<code>10</code>，再将进位加上，个位没有进位，十位进1，得到<code>20</code>。<a id="more"></a></li><li>题目要求不能使用<code>+-*/</code>，所以想到了位运算。15的二进制是<code>1111</code>，5的二进制是<code>0101</code>。根据上面的思路，我们先进行不进位相加，得到<code>1010</code>。(这个运算方式正好对应<code>^</code>)然后将进位加上(只求进位的运算正好对应<code>&amp;</code>再左移一位)，例子中只有第四位、第二位数值有进位值。得到<code>10100</code>，这个值就是<code>20</code>。</li></ul><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、递归实现，每次将不进位相加的值赋给a，将计算出来的进位值赋给b，递归进行两者的分步相加，直到进位值`b=0`，返回a。</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Add</span><span class="params">( <span class="keyword">int</span> a, <span class="keyword">int</span> b )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( b == <span class="number">0</span> )</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">int</span> sum = a^b;</span><br><span class="line">    b = (a&amp;b)&lt;&lt;<span class="number">1</span>;</span><br><span class="line">    a = sum;</span><br><span class="line">    <span class="keyword">return</span> Add( a, b );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    system( <span class="string">"clear"</span> );</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Add(<span class="number">3</span>, <span class="number">7</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、同时可以用迭代实现(非函数)，思路一样，进位值b最后肯定会等于0，因为总有进位结束的时候。</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">49</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">while</span>( b != <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = a^b;</span><br><span class="line">        b = (a&amp;b)&lt;&lt;<span class="number">1</span>;</span><br><span class="line">        a = sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目：&quot;&gt;&lt;a href=&quot;#题目：&quot; class=&quot;headerlink&quot; title=&quot;题目：&quot;&gt;&lt;/a&gt;题目：&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;实现一个Add函数，让两个整数相加，不能够使用&lt;code&gt;+-*/、++、--&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;思路：&quot;&gt;&lt;a href=&quot;#思路：&quot; class=&quot;headerlink&quot; title=&quot;思路：&quot;&gt;&lt;/a&gt;思路：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;正常实现两个数相加，有两个步骤，第一将两个数对应位相加，第二相加之后有进位，将进位值与对应位相加。举个例子，&lt;code&gt;15+5=20&lt;/code&gt;先将位进行相加，不进行进位，得到&lt;code&gt;10&lt;/code&gt;，再将进位加上，个位没有进位，十位进1，得到&lt;code&gt;20&lt;/code&gt;。
    
    </summary>
    
      <category term="practice" scheme="http://www.jingxxn.cn/categories/practice/"/>
    
      <category term="C/C++" scheme="http://www.jingxxn.cn/categories/practice/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>1+2+……+n的特殊求法</title>
    <link href="http://www.jingxxn.cn/1-%E2%80%A6%E2%80%A6-n%E7%9A%84%E7%89%B9%E6%AE%8A%E6%B1%82%E6%B3%95.html"/>
    <id>http://www.jingxxn.cn/1-……-n的特殊求法.html</id>
    <published>2018-01-26T16:44:40.000Z</published>
    <updated>2018-02-08T06:20:15.815Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p><strong>求1+2+3+…+n，要求不能使用乘除法，for,while，if,else,switch,case等关键字以及条件判断语句。</strong></p><p>自己思考想到了一种方法，递归的思路，但是判断终止的条件不是if，利用了&amp;&amp;的性质，当前操作数为假的时候，不再进行后操作数的运算。然后在网上查阅，得到了其他的做法。</p><h3 id="更新：18-1-28"><a href="#更新：18-1-28" class="headerlink" title="更新：18.1.28"></a>更新：18.1.28</h3><p>发现了一个时间复杂度为O(1)的做法，这种做法只能在GCC、C99标准中使用，因为它使用了<a href="https://gcc.gnu.org/onlinedocs/gcc/Variable-Length.html" target="_blank" rel="noopener">柔性数组</a>，这种数组的长度的可变的，不需要用常量定义。</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">Sum_Solution</span><span class="params">( <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">            <span class="keyword">bool</span> a[n][n+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">sizeof</span>(a)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Solution s;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s.Sum_Solution(<span class="number">10</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>原文：</p><h3 id="利用-amp-amp-操作符，-也一样的做法。"><a href="#利用-amp-amp-操作符，-也一样的做法。" class="headerlink" title="利用&amp;&amp;操作符，|| 也一样的做法。"></a>利用&amp;&amp;操作符，|| 也一样的做法。</h3><p>思路：当result = 0 的时候，&amp;&amp;不再判断右操作数，递归停止。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">( <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = n;</span><br><span class="line">    result &amp;&amp; (result += sum(n<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; sum(<span class="number">100</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用构造函数以及静态成员变量"><a href="#利用构造函数以及静态成员变量" class="headerlink" title="利用构造函数以及静态成员变量"></a>利用构造函数以及静态成员变量</h3><p>思路：构造N次对象，每次对静态变量sum++，对n赋值。利用静态变量对所有同类对象有效的特点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">tmp</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造</span></span><br><span class="line">    tmp( )&#123;</span><br><span class="line">        ++n;</span><br><span class="line">        sum += n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="keyword">static</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        n = <span class="number">0</span>;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获得sum</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="keyword">static</span> <span class="title">getsum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> sum;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tmp::n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> tmp::sum = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//运行的函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    tmp::init();</span><br><span class="line">    tmp* a = <span class="keyword">new</span> tmp[n];</span><br><span class="line">    <span class="keyword">delete</span>[] a;</span><br><span class="line">    a = <span class="literal">NULL</span>;</span><br><span class="line">    tmp::getsum();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; count(<span class="number">100</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用虚函数、继承和函数指针"><a href="#利用虚函数、继承和函数指针" class="headerlink" title="利用虚函数、继承和函数指针"></a>利用虚函数、继承和函数指针</h3><p>思路：</p><ol><li>定义两个类，A是基类，B是子类。</li><li>定义一个<code>A* Array[2]</code>,其中Array[0]存放A对象的地址，Array[1]存放B对象的地址。</li><li>调用函数Sum中调用Sum的递归。同时对变量n两次取反<code>Array[!!n]-&gt;Sum(n-1)+n</code>,这样当n不为0的时候，得到bool值1。<code>Array[!!n] = Array[1]</code></li><li>当n=0调用基类A的sum。充分利用虚函数参数与类型有关的性质。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、虚函数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>;</span></span><br><span class="line">A* Array[<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">Sum</span><span class="params">( <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">Sum</span><span class="params">( <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">        <span class="comment">//当 n != 0, !!n = 1</span></span><br><span class="line">        <span class="keyword">return</span> Array[!!n]-&gt;Sum(n<span class="number">-1</span>)+n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sum2</span><span class="params">( <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">    A a;</span><br><span class="line">    B b;</span><br><span class="line">    Array[<span class="number">0</span>] = &amp;a;</span><br><span class="line">    Array[<span class="number">1</span>] = &amp;b;</span><br><span class="line">    <span class="comment">//调用虚函数</span></span><br><span class="line">    <span class="keyword">int</span> value = Array[<span class="number">1</span>]-&gt;Sum(n);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Sum2(<span class="number">100</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、同上，这里利用函数指针来实现。</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*fun)</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sum</span><span class="params">( <span class="keyword">int</span> i )</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sum2</span><span class="params">( <span class="keyword">int</span> i )</span></span>&#123;</span><br><span class="line">    fun f[<span class="number">2</span>] = &#123; Sum, Sum2 &#125;;</span><br><span class="line">    <span class="keyword">return</span> i + f[!!n](i<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用异常处理的机制"><a href="#利用异常处理的机制" class="headerlink" title="利用异常处理的机制"></a>利用异常处理的机制</h3><p>思路：try接收到的异常会在catch中捕获。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//n = 2 的时候，出现异常，程序流跳转到catch</span></span><br><span class="line">        <span class="keyword">int</span>[] <span class="built_in">array</span> = <span class="keyword">new</span> <span class="keyword">int</span>[n<span class="number">-2</span>];</span><br><span class="line">        <span class="keyword">return</span> n+sum(n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        <span class="comment">//返回1到上一个递归处，n = 2处。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用模板"><a href="#利用模板" class="headerlink" title="利用模板"></a>利用模板</h3><p>思路：利用了模板的特化作为递归结束的条件，并借用枚举类型。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">unsigned</span> N&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sum</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">enum</span>&#123;</span><br><span class="line">            sum = N+Sum&lt;N<span class="number">-1</span>&gt;::sum</span><br><span class="line">        &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//模板特化，当N=1 的时候，调用</span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sum</span>&lt;1&gt;&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">enum</span>&#123;</span><br><span class="line">            sum = <span class="number">1</span></span><br><span class="line">        &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Sum&lt;<span class="number">100</span>&gt;::sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法来源地址"><a href="#方法来源地址" class="headerlink" title="方法来源地址"></a><a href="http://blog.csdn.net/u010993983/article/details/37730317" target="_blank" rel="noopener">方法来源地址</a></h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目：&quot;&gt;&lt;a href=&quot;#题目：&quot; class=&quot;headerlink&quot; title=&quot;题目：&quot;&gt;&lt;/a&gt;题目：&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;求1+2+3+…+n，要求不能使用乘除法，for,while，if,else,switch,case等关键字以及条件判断语句。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;自己思考想到了一种方法，递归的思路，但是判断终止的条件不是if，利用了&amp;amp;&amp;amp;的性质，当前操作数为假的时候，不再进行后操作数的运算。然后在网上查阅，得到了其他的做法。&lt;/p&gt;
&lt;h3 id=&quot;更新：18-1-28&quot;&gt;&lt;a href=&quot;#更新：18-1-28&quot; class=&quot;headerlink&quot; title=&quot;更新：18.1.28&quot;&gt;&lt;/a&gt;更新：18.1.28&lt;/h3&gt;&lt;p&gt;发现了一个时间复杂度为O(1)的做法，这种做法只能在GCC、C99标准中使用，因为它使用了&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc/Variable-Length.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;柔性数组&lt;/a&gt;，这种数组的长度的可变的，不需要用常量定义。&lt;/p&gt;
    
    </summary>
    
      <category term="practice" scheme="http://www.jingxxn.cn/categories/practice/"/>
    
      <category term="C/C++" scheme="http://www.jingxxn.cn/categories/practice/C-C/"/>
    
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青匆</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-31T07:26:48.490Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>timmy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>复杂单链表的复制</title>
    <link href="http://yoursite.com/2018/01/31/%E5%A4%8D%E6%9D%82%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/"/>
    <id>http://yoursite.com/2018/01/31/复杂单链表的复制/</id>
    <published>2018-01-31T06:54:57.000Z</published>
    <updated>2018-01-31T07:26:48.490Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目"><a href="#题目" class="headerlink" title="题目:"></a>题目:</h4><p>有一个单链表，该链表节点有两个指针，一个<code>_next</code>指向下一个节点，另一个<code>_random</code>指向任意节点，可能为NULL，可能是前面或后面的节点。请复制该链表，并返回头结点指针。</p><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><ol><li>单链表的复制比较简单，但是<code>_random</code>不好处理，如果<code>_random</code>指向前面的节点，我们该如何处理。<code>_random</code>还有可能是指向NULL，这种情况也需要单独处理。<a id="more"></a></li><li>为了解决这个问题，我们可以用一个比较巧妙的方法，对每一个节点都复制，同时插入到当前节点的后面。这样我们就得到了一个重复的链表，此时有一个优势，新<code>_random</code>就是原来<code>_random</code>的后一个。我们就不需要在考虑往前寻找的问题了。只需要找到当前节点的<code>_random</code>的<code>_next</code>就行。</li><li>这样处理之后，我们就得到了一个新的链表，接着只需要进行拆分就好了。</li></ol><h5 id="看图如下："><a href="#看图如下：" class="headerlink" title="看图如下："></a>看图如下：</h5><p>创建了一个复杂链表<br><img src="http://p3ax8ersb.bkt.clouddn.com/201801311509_357.png" alt="复杂链表"></p><p>进行对每一个节点的复制同时插入到原链表中<br><img src="http://p3ax8ersb.bkt.clouddn.com/201801311511_432.png" alt="复制并插入"></p><h5 id="给出节点的结构如下："><a href="#给出节点的结构如下：" class="headerlink" title="给出节点的结构如下："></a>给出节点的结构如下：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> datatype int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">complexnode</span>&#123;</span></span><br><span class="line">    complexnode(datatype val)&#123;</span><br><span class="line">        _data = val;</span><br><span class="line">        _next = <span class="literal">NULL</span>;</span><br><span class="line">        _random = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    datatype _data;</span><br><span class="line">    complexnode* _next;</span><br><span class="line">    complexnode* _random;</span><br><span class="line">&#125;comnode;</span><br></pre></td></tr></table></figure><h5 id="实现代码如下："><a href="#实现代码如下：" class="headerlink" title="实现代码如下："></a>实现代码如下：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="function">comnode* <span class="title">copy_complex_list</span><span class="params">( comnode* head )</span></span>&#123;</span><br><span class="line">    comnode* cur = head;</span><br><span class="line">    comnode* next = cur-&gt;_next;</span><br><span class="line">    <span class="keyword">if</span>( cur == <span class="literal">NULL</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将每一个节点复制到当前节点的后面，并链入链表</span></span><br><span class="line">    <span class="keyword">while</span>( cur )&#123;</span><br><span class="line">        comnode* tmp = <span class="keyword">new</span> comnode(cur-&gt;_data);</span><br><span class="line">        cur-&gt;_next = tmp;</span><br><span class="line">        tmp-&gt;_next = next;</span><br><span class="line">        cur = next;</span><br><span class="line">        <span class="comment">//防止对NULL访问</span></span><br><span class="line">        <span class="keyword">if</span>( cur )</span><br><span class="line">            next = cur-&gt;_next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将指针重置指向头结点</span></span><br><span class="line">    cur = head;</span><br><span class="line">    next = cur-&gt;_next;</span><br><span class="line">    <span class="comment">//给新链入的节点置random</span></span><br><span class="line">    <span class="keyword">while</span>( cur )&#123;</span><br><span class="line">        <span class="comment">//分类处理_random为NULL的情况</span></span><br><span class="line">        <span class="keyword">if</span>( cur-&gt;_random )</span><br><span class="line">            next-&gt;_random = cur-&gt;_random-&gt;_next;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            next-&gt;_random = <span class="literal">NULL</span>;</span><br><span class="line">        cur = next-&gt;_next;</span><br><span class="line">        <span class="keyword">if</span>( cur )</span><br><span class="line">            next = cur-&gt;_next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cur = head;</span><br><span class="line">    next = cur-&gt;_next;</span><br><span class="line">    comnode* result = next;</span><br><span class="line">    <span class="comment">//拆分两个链表</span></span><br><span class="line">    <span class="keyword">while</span>( cur )&#123;</span><br><span class="line">        cur-&gt;_next = next-&gt;_next;</span><br><span class="line">        cur = cur-&gt;_next;</span><br><span class="line">        <span class="keyword">if</span>( cur )&#123;</span><br><span class="line">            next-&gt;_next = cur-&gt;_next;</span><br><span class="line">            next = next-&gt;_next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_random</span><span class="params">( comnode* head )</span></span>&#123;</span><br><span class="line">    comnode* cur = head;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"list:"</span>;</span><br><span class="line">    <span class="keyword">while</span>( cur )&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; cur-&gt;_data &lt;&lt; <span class="string">"-&gt;"</span>;</span><br><span class="line">        cur = cur-&gt;_next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"NULL"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"random:"</span>;</span><br><span class="line">    cur = head;</span><br><span class="line">    <span class="keyword">while</span>( cur )&#123;</span><br><span class="line">        <span class="keyword">if</span>( cur-&gt;_random )</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; cur-&gt;_random-&gt;_data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"NULL"</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        cur = cur-&gt;_next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    comnode* head = <span class="keyword">new</span> comnode(<span class="number">1</span>);</span><br><span class="line">    comnode* n1 = <span class="keyword">new</span> comnode(<span class="number">2</span>);</span><br><span class="line">    comnode* n2 = <span class="keyword">new</span> comnode(<span class="number">4</span>);</span><br><span class="line">    comnode* n3 = <span class="keyword">new</span> comnode(<span class="number">5</span>);</span><br><span class="line">    comnode* n4 = <span class="keyword">new</span> comnode(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">    head-&gt;_next = n1;</span><br><span class="line">    n1-&gt;_next = n2;</span><br><span class="line">    n2-&gt;_next = n3;</span><br><span class="line">    n3-&gt;_next = n4;</span><br><span class="line">    n4-&gt;_next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    head-&gt;_random = n2;</span><br><span class="line">    n1-&gt;_random = head;</span><br><span class="line">    n2-&gt;_random = n3;</span><br><span class="line">    n3-&gt;_random = <span class="literal">NULL</span>;</span><br><span class="line">    n4-&gt;_random = n4;</span><br><span class="line"></span><br><span class="line">    system( <span class="string">"clear"</span> );</span><br><span class="line">    comnode* copy_list = copy_complex_list( head );</span><br><span class="line">    print_random(head);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"copy_list:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    print_random(copy_list);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果如下："><a href="#运行结果如下：" class="headerlink" title="运行结果如下："></a>运行结果如下：</h5><p>同时打印了原来的链表和复制的链表<br><img src="http://p3ax8ersb.bkt.clouddn.com/201801311519_393.png" alt="打印结果"></p><p><a href="http://blog.csdn.net/mac_timmy/article/details/78482792" target="_blank" rel="noopener">CSDN上用C写的，同时也将各个部分功能进行了函数封装</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目:&quot;&gt;&lt;/a&gt;题目:&lt;/h4&gt;&lt;p&gt;有一个单链表，该链表节点有两个指针，一个&lt;code&gt;_next&lt;/code&gt;指向下一个节点，另一个&lt;code&gt;_random&lt;/code&gt;指向任意节点，可能为NULL，可能是前面或后面的节点。请复制该链表，并返回头结点指针。&lt;/p&gt;
&lt;h5 id=&quot;思路：&quot;&gt;&lt;a href=&quot;#思路：&quot; class=&quot;headerlink&quot; title=&quot;思路：&quot;&gt;&lt;/a&gt;思路：&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;单链表的复制比较简单，但是&lt;code&gt;_random&lt;/code&gt;不好处理，如果&lt;code&gt;_random&lt;/code&gt;指向前面的节点，我们该如何处理。&lt;code&gt;_random&lt;/code&gt;还有可能是指向NULL，这种情况也需要单独处理。
    
    </summary>
    
      <category term="practice" scheme="http://yoursite.com/categories/practice/"/>
    
      <category term="C/C++" scheme="http://yoursite.com/categories/practice/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>浅读《More Effective C++》笔记</title>
    <link href="http://yoursite.com/2018/01/30/%E6%B5%85%E8%AF%BB%E3%80%8AMore-Effective-C-%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/01/30/浅读《More-Effective-C-》笔记/</id>
    <published>2018-01-30T06:27:03.000Z</published>
    <updated>2018-01-30T06:40:12.997Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基础议题"><a href="#基础议题" class="headerlink" title="基础议题"></a>基础议题</h4><h5 id="条款1：区分指针和引用"><a href="#条款1：区分指针和引用" class="headerlink" title="条款1：区分指针和引用"></a>条款1：区分指针和引用</h5><ul><li><p>不存在空引用，引用必须要指向某个对象。当确定某个对象不允许有空值，就需要定义为引用，而不是指针。</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这种做法语法上没有错误，出现了引用为空的情况。但是不同的编译器会有不同的报错。不允许出现这样的代码。</span></span><br><span class="line"><span class="keyword">char</span>* pc = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> &amp;rc = *pc;</span><br></pre></td></tr></table></figure></li><li><p>因为不存在空引用这种情况，所以使引用会比指针更高效。</p><a id="more"></a>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引用不用判空</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_double</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span>&amp; rd)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; rd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//指针要判空</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_double1</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span> *pd)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pd)&#123; <span class="built_in">cout</span> &lt;&lt; *pd; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>指针可以被重新赋值用以指向另外一个不同的对象，而引用则总是指向初始化时它指向的对象。</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s1</span><span class="params">(<span class="string">"nancy"</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s2</span><span class="params">(<span class="string">"clancy"</span>)</span></span>;</span><br><span class="line"><span class="built_in">string</span>&amp; rs = s1;</span><br><span class="line"><span class="built_in">string</span> *ps = &amp;s1;</span><br><span class="line"><span class="comment">//rs依然是s1的引用，此时rs = s1 = s2 = "clancy"</span></span><br><span class="line">rs = s2;</span><br><span class="line"><span class="comment">//ps指向了s2,不再指向s1</span></span><br><span class="line">ps = &amp;s2;</span><br></pre></td></tr></table></figure></li><li><p>实现某些操作符的时候，最常见的是[]操作符，绝大多数应该返回引用。</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//一般情况下的返回值，此时是引用</span></span><br><span class="line">v[<span class="number">5</span>] = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//如果返回的是指针就需要这样解引用，看起来v就像是一个指针vector一样。</span></span><br><span class="line">*v[<span class="number">5</span>] = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li></ul><h5 id="条款2：优先考虑C-风格的类型转换"><a href="#条款2：优先考虑C-风格的类型转换" class="headerlink" title="条款2：优先考虑C++风格的类型转换"></a>条款2：优先考虑C++风格的类型转换</h5><ul><li>四个类型转换操作符：static_cast,const_cast,dynamic_cast,reinterpret_cast</li><li>static_cast：作用类似于C中的隐式类型转换，只能转换相近类型的变量。比如struct到int的转换就不能实现。而且在C++中，static_cast并不能将const属性转换为非const属性。</li><li>const_cast：专门用来去除const属性和volatile属性。const_cast被用来用作其他的类型转换会被拒绝。</li><li>dynamic_cast：它是用来针对一个继承体系做向下或者横向的安全转换的。也就是说，用dynamic_cast把指向基类的指针或引用转换成指向派生类或者基类的兄弟类的指针或引用，同时可以知道是否成功。出现空指针(转换指针的时候)或者出现异常(转换引用的时候)意味着失败。他不能用于哪些没有虚函数的类型，也不能去除const属性。</li><li>reinterpret_const：这个操作符，转换结果往往是编译器定义的。因此它几乎是不可以移植的。最常见的用法是在函数指针之间进行类型转换。</li><li>使用格式举例：static_cast<double> (first); const_cast<special*>(first); dynamic_cast<special *="">(&amp;first); reinterpret_cast<funcptr> (&amp;dosomething);</funcptr></special></special*></double></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;基础议题&quot;&gt;&lt;a href=&quot;#基础议题&quot; class=&quot;headerlink&quot; title=&quot;基础议题&quot;&gt;&lt;/a&gt;基础议题&lt;/h4&gt;&lt;h5 id=&quot;条款1：区分指针和引用&quot;&gt;&lt;a href=&quot;#条款1：区分指针和引用&quot; class=&quot;headerlink&quot; title=&quot;条款1：区分指针和引用&quot;&gt;&lt;/a&gt;条款1：区分指针和引用&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;不存在空引用，引用必须要指向某个对象。当确定某个对象不允许有空值，就需要定义为引用，而不是指针。&lt;/p&gt;
  &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//这种做法语法上没有错误，出现了引用为空的情况。但是不同的编译器会有不同的报错。不允许出现这样的代码。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* pc = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; &amp;amp;rc = *pc;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;因为不存在空引用这种情况，所以使引用会比指针更高效。&lt;/p&gt;
    
    </summary>
    
      <category term="learning" scheme="http://yoursite.com/categories/learning/"/>
    
    
  </entry>
  
  <entry>
    <title>static const integral data member在类中的初始化</title>
    <link href="http://yoursite.com/2018/01/30/static-const-integral-data-member%E5%9C%A8%E7%B1%BB%E4%B8%AD%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>http://yoursite.com/2018/01/30/static-const-integral-data-member在类中的初始化/</id>
    <published>2018-01-30T06:25:04.000Z</published>
    <updated>2018-01-31T07:32:07.346Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>当我们在类中定义了一个静态成员变量的时候，我们需要在类之外初始化它，因为他是属于所有的类的。该类的其它对象对这个静态变量也是可以进行修改的。</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//非常量静态成员变量初始化对比</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">person</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> num;</span><br><span class="line">        <span class="comment">//static int num = 11;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> person::num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    person bob;</span><br><span class="line">    system(<span class="string">"clear"</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; bob.num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <a id="more"></a><p> 在类内初始化非常量静态成员变量失败<br> <img src="http://p3ax8ersb.bkt.clouddn.com/201801301358_611.png" alt="在类内初始化非常量静态成员变量"><br> 在类外初始化静态成员变量成功<br> <img src="http://p3ax8ersb.bkt.clouddn.com/201801301359_872.png" alt="在类外初始化静态成员变量"></p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义另外一个对象timmy</span></span><br><span class="line">person timmy;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"timmy:"</span> &lt;&lt; timmy.num&lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p> 同一个类的不同对象共用一个静态成员变量<br> <img src="http://p3ax8ersb.bkt.clouddn.com/201801301406_632.png" alt="同一个类的不同对象共用一个静态成员变量"></p></li><li><p>但是，常量的静态成员变量可以在类里面定义。</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">person</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> num = <span class="number">11</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> age = <span class="number">23</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    system(<span class="string">"clear"</span>);</span><br><span class="line">    person tom;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"tom:"</span> &lt;&lt; tom.num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"tom:"</span> &lt;&lt; tom.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> static const和const static一样的。<br> <img src="http://p3ax8ersb.bkt.clouddn.com/201801301417_598.png" alt="static const"></p></li><li><p>可是只有integral data member才可以，像 int，long，char才行。double，float等都不行</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">person</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">double</span> num = <span class="number">2.2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    system(<span class="string">"clear"</span>);</span><br><span class="line">    person tom;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"tom:"</span> &lt;&lt; tom.num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 用 static const double 初始化失败<br> <img src="http://p3ax8ersb.bkt.clouddn.com/201801301421_850.png" alt="double失败"></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;当我们在类中定义了一个静态成员变量的时候，我们需要在类之外初始化它，因为他是属于所有的类的。该类的其它对象对这个静态变量也是可以进行修改的。&lt;/p&gt;
 &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//非常量静态成员变量初始化对比&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;person&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//static int num = 11;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; person::num = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    person bob;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    system(&lt;span class=&quot;string&quot;&gt;&quot;clear&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; bob.num &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="knowledge" scheme="http://yoursite.com/categories/knowledge/"/>
    
      <category term="C/C++" scheme="http://yoursite.com/categories/knowledge/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>浅读《STL源码剖析》笔记</title>
    <link href="http://yoursite.com/2018/01/29/%E6%B5%85%E8%AF%BB%E3%80%8ASTL%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/01/29/浅读《STL源码剖析》笔记/</id>
    <published>2018-01-29T06:26:27.000Z</published>
    <updated>2018-02-02T06:54:45.778Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-STL概论与版本简介"><a href="#1-STL概论与版本简介" class="headerlink" title="1 STL概论与版本简介"></a>1 STL概论与版本简介</h4><p>(更新时间：18.1.29)</p><h5 id="1-2-STL六大组件"><a href="#1-2-STL六大组件" class="headerlink" title="1.2 STL六大组件"></a>1.2 STL六大组件</h5><ol><li>容器(containers):<code>vector,list,deque,set,map</code>,用来存放数据</li><li>算法(algorithms):<code>sort,search,copy,erase</code></li><li>迭代器(iterators):扮演容器与算法之间的胶合剂，所谓的“泛型指针”。从实现角度来看，<a id="more"></a>迭代器器将<code>operator*,operator++,operator--,operator-&gt;</code>等指针进行了重载的class template。原生指针（native pointer）也是一种迭代器。</li><li>仿函数(functors):行为类似函数，实现来看，重载了operator()的class或class template。</li><li>配接器(adapters):一种用来修饰容器(containers)或仿函数(functors)或迭代器(iterators)接口的东西。如stack和queue他们的底层实现是deque。</li><li>配置器(allocators):负责空间配置与管理，从实现的角度看来，配置器是一个实现了动态空间配置、空间管理、空间释放的class template。</li></ol><h5 id="1-5-1-8-STL版本之二"><a href="#1-5-1-8-STL版本之二" class="headerlink" title="1.5~1.8 STL版本之二"></a>1.5~1.8 STL版本之二</h5><ol><li>P.J.Plauger (Microsoft Visual C++)</li><li>SGI STL (Linux GCC)<ul><li>C++标准规范下的C头文件: <code>cstdio,cstdlib,cstring</code></li><li>C++标准程序库中不属于STL范畴: <code>stream,string</code></li><li>STL标准头文件: <code>vector,deque,list,map,algorithm,functional</code></li><li>C++Standard定案前，HP所规范的STL头文件: <code>vector.h,deque.h,list.h,algo.h,function.h</code></li><li>SGI STL内部文件(STL真正实现于此): <code>stl_vector.h,stl_deque.h,stl_list.h,stl_map.h,stl_algo.h,stl_function.h</code></li></ul></li></ol><h5 id="1-9-可能令你困惑的C-语法"><a href="#1-9-可能令你困惑的C-语法" class="headerlink" title="1.9 可能令你困惑的C++语法"></a>1.9 可能令你困惑的C++语法</h5><h6 id="1-9-2-临时对象的产生与运用"><a href="#1-9-2-临时对象的产生与运用" class="headerlink" title="1.9.2 临时对象的产生与运用"></a>1.9.2 临时对象的产生与运用</h6><p>临时对象就是匿名对象，创造临时对象的方法是，在类型后面直接加上()，同时可以赋初值。如：Shape(3,5),int(8)。他的意义相当于调用相应的constructor且不指定对象名称。<strong>STL中最常将此技巧用在仿函数(functor)中。</strong>临时对象的生命周期只有这一行指令。</p><h6 id="1-9-3-静态常量整数成员在class内部直接初始化"><a href="#1-9-3-静态常量整数成员在class内部直接初始化" class="headerlink" title="1.9.3 静态常量整数成员在class内部直接初始化"></a>1.9.3 静态常量整数成员在class内部直接初始化</h6><p>class内含有<code>const static integral data member</code>，我们可以直接给予初值。<br>    <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.9.3测试代码如下</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">testclass</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> datai = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">long</span> datal = <span class="number">3L</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> datac = <span class="string">'c'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; testclass&lt;<span class="keyword">int</span>&gt;::datai &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; testclass&lt;<span class="keyword">int</span>&gt;::datal &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; testclass&lt;<span class="keyword">int</span>&gt;::datac &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201801291947_629.png" alt="运行结果"></p><h6 id="1-9-5-前闭后开区间表示法"><a href="#1-9-5-前闭后开区间表示法" class="headerlink" title="1.9.5 前闭后开区间表示法[)"></a>1.9.5 前闭后开区间表示法[)</h6><p><strong>STL中范围是用前闭后开。[first, last)元素从first开始，结束于last-1.迭代器中的last指的是最后一个元素的下一个。</strong></p><h6 id="1-9-6-function-call操作符-operator"><a href="#1-9-6-function-call操作符-operator" class="headerlink" title="1.9.6 function call操作符(operator())"></a>1.9.6 function call操作符(operator())</h6><p>function call操作符(oprator())。C语言中用函数指针作为参数传递。有个缺点就是，没有可适配性，也就是确定了这个函数指针之后，无法再加上新的修饰条件从而改变他的状态。STL中用仿函数(functor)实现这个功能。<strong>如果你针对某个class进行operator()重载，它就成为一个仿函数。</strong><br>    <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.9.6测试代码如下</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">Add</span>&#123;</span></span><br><span class="line">    <span class="comment">//重载了operator()</span></span><br><span class="line">    <span class="function">T <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> T&amp;x, <span class="keyword">const</span> T&amp;y)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Add&lt;<span class="keyword">int</span>&gt; addxy;</span><br><span class="line">    system( <span class="string">"clear"</span> );</span><br><span class="line">    <span class="comment">//调用重载函数</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; addxy(<span class="number">3</span>,<span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//调用匿名对象</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Add&lt;<span class="keyword">int</span>&gt;()(<span class="number">5</span>,<span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201801292024_990.png" alt="仿函数"></p><h4 id="2-空间配置器-allocator"><a href="#2-空间配置器-allocator" class="headerlink" title="2 空间配置器(allocator)"></a>2 空间配置器(allocator)</h4><p>空间配置器在容器背后工作，整个STL的操作对象(所有的数值)，对存放在容器中，而容器一定要配置空间以置放资料。不一定是内存，也可以是磁盘或其他的辅助存储介质。<br>(更新时间：18.1.31)</p><h5 id="2-2-具备此配置力的SGI空间配置器"><a href="#2-2-具备此配置力的SGI空间配置器" class="headerlink" title="2.2 具备此配置力的SGI空间配置器"></a>2.2 具备此配置力的SGI空间配置器</h5><h6 id="2-2-1-SGI标准的空间配置器-std-allocator"><a href="#2-2-1-SGI标准的空间配置器-std-allocator" class="headerlink" title="2.2.1 SGI标准的空间配置器,std::allocator"></a>2.2.1 SGI标准的空间配置器,std::allocator</h6><p>SGI的空间配置器和标准规范不同，他的名称是alloc而不是allocator，且不接受任何参数。标准写法如下：<code>vector&lt;int,std::allocator&lt;int&gt;&gt;</code>;SGI STL写法如下：<code>vector&lt;int, std::aloc&gt;</code>绝大多数情况下，我们都是使用缺省的空间配置器。</p><h6 id="2-2-2-SGI特殊的空间配置器，std-alloc"><a href="#2-2-2-SGI特殊的空间配置器，std-alloc" class="headerlink" title="2.2.2 SGI特殊的空间配置器，std::alloc"></a>2.2.2 SGI特殊的空间配置器，std::alloc</h6><ul><li>SGI同时也配备了标准空间配置器<code>std::allocator</code>，但是这只是对C++的<code>operator new和operator delete</code>做了一层封装，效率低下，<strong>SGI并不使用，只是为了向前兼容语法。</strong></li><li><p><strong>SGI自身使用的空间配置器是<code>std::alloc</code></strong>一般来说，我们习惯的C++内存操作和释放操作是这样的：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>&#123;</span>&#125;;</span><br><span class="line">Foo* pf = <span class="keyword">new</span> Foo;</span><br><span class="line"><span class="keyword">delete</span> pf;</span><br></pre></td></tr></table></figure><p>  这其中的new包含两个操作，一个是调用::operator new配置内存；另一个是调用Foo::Foo()构造对象内容。delete也是两个，一个是调用Foo::~Foo()析构对象，另一个是调用::operator detele 释放内存。<strong>为了分工，STL allocator将这个两个阶段分开来，内存配置操作有alloc:allocate()负责，内存释放操作有alloc::deallocate()负责，对象构造操作有:construct()负责，对象析构操作由::destroy()负责。</strong></p></li><li>STL的配置器(allocator)定于于<code>&lt;memory&gt;</code>，其中包含两个文件,一个是负责内存空间的配置与释放<stl_alloc.h>,这里定义了一二级配置器，配置器名为alloc；另一个是负责对象内容的构造与析构<stl_construct.h>，定义了全局函数construct()和destroy()。</stl_construct.h></stl_alloc.h></li></ul><h6 id="2-2-3-构造和析构基本工具-construct-和destroy"><a href="#2-2-3-构造和析构基本工具-construct-和destroy" class="headerlink" title="2.2.3 构造和析构基本工具:construct()和destroy()"></a>2.2.3 构造和析构基本工具:construct()和destroy()</h6><ul><li><p>construct()的实现如下：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;new.h&gt;    //使用placement new 需要这个头文件</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="title">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">construct</span>(<span class="title">T1</span>* <span class="title">p</span>, <span class="title">const</span> <span class="title">T2</span>&amp; <span class="title">value</span>)&#123;</span></span><br><span class="line">    <span class="keyword">new</span> (p) T1(value);  <span class="comment">//使用了placement new;调用T1:T1(value);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  代码解释：<code>construct()</code>接收一个指针p和一个初始值value，用来将初值设定到指针所指向的空间，<strong>通过<code>placement new</code>实现</strong>。</p></li><li><p>destroy()有两个版本，实现如下:</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一个版本，接受一个指针</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">destroy</span>(<span class="title">T</span>* <span class="title">pointer</span>)&#123;</span></span><br><span class="line">    pointer-&gt;~T();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第二个版本，接受两个迭代器。此函数设法找出元素的数值型别，进而利用__type_traits&lt;&gt;求取最适当的措施。</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIterator</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">destroy</span>(<span class="title">ForwardIterator</span> <span class="title">first</span>, <span class="title">ForwardIterator</span> <span class="title">last</span>)&#123;</span></span><br><span class="line">    __destroy(first, last, value_type(first));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断元素的数值型别(value type)是否有 trivial destructor</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIterator</span>, <span class="title">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> __<span class="title">destroy</span>(<span class="title">ForwardIterator</span> <span class="title">first</span>, <span class="title">ForwardIterator</span> <span class="title">last</span>, <span class="title">T</span>*)&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> __type_traits&lt;T&gt;::has_trivial_destructor trivial_destructor;</span><br><span class="line">    __destroy_aux(first, last, trivial_destructor());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果元素的数值型别(value type)有non-truvial destructor，循环释放</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIterator</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> __<span class="title">destroy_aux</span>(<span class="title">ForwardIterator</span> <span class="title">first</span>, <span class="title">ForwardIterator</span> <span class="title">last</span>, __<span class="title">false_type</span>)&#123;</span></span><br><span class="line">    <span class="keyword">for</span>( ; first &lt; last; ++first)</span><br><span class="line">        <span class="comment">//调用第一个版本的destroy()</span></span><br><span class="line">        destroy(&amp;* first);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果元素的数值型别(value type)有trivial destructor,函数什么也不做</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIterator</span>, <span class="title">ForwardIterator</span>, __<span class="title">true_type</span>&gt;&#123;</span></span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">void</span> __destroy_aux(ForwardIterator, ForwardIterator, __true_type)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//destroy()中第二版本针对迭代器为char* 和 wchar_t*的特化版本,函数什么都不做</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">desroy</span><span class="params">(<span class="keyword">char</span>*, <span class="keyword">char</span>*)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">(<span class="keyword">wchar_t</span>*,<span class="keyword">wchar_t</span>*)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>  代码解释：<code>destroy()</code>有两个版本，<strong>第一个版本接收一个指针，准备将该指针所指之物析构，这个直接调用该对象的析构函数即可</strong>。第二个版本接收first和last两个迭代器，准备将<code>[firat, last)</code>范围内的所有对象析构。我们不知道范围有多大，万一很大，而每个对象的析构函数都无关痛痒(所谓<code>trivial destructor</code>),那么一次次调用这些无关痛痒的析构函数，对效率是一个伤害，因此，<strong>这里首先利用<code>value_type()</code>获得迭代器所指对象的型别，再利用<code>__type_traits&lt;T&gt;</code>判断该型别的析构函数是否无关痛痒。若是<code>(__true_type)</code>，则什么都不做结束；若不是<code>(__false_type)</code>,这才循环巡防整个范围，并在循环中每经历一个对象就调用第一个版本的<code>destroy()</code>。</strong></p></li><li>construct()和destroy()图解：对于C++本身并不支持“指针所指之物”的型别判断，也不支持对“对象析构函数是否为trivial”的判断，具体实现value_type()和__type_traits&lt;&gt;在3.7节。<img src="http://p3ax8ersb.bkt.clouddn.com/201802011438_654.png" alt="construct()和destroy()图解"></li></ul><h6 id="2-2-4-空间的配置与释放，std-alloc"><a href="#2-2-4-空间的配置与释放，std-alloc" class="headerlink" title="2.2.4 空间的配置与释放，std::alloc"></a>2.2.4 空间的配置与释放，std::alloc</h6><ul><li>对象构造前的空间配置和对象析构后的空间释放，由<code>&lt;stl_alloc.h&gt;</code>负责。<ul><li>向 system heap 要求空间</li><li>考虑多线程(multi-threads)状态(这里不考虑多线程的情况)</li><li>考虑内存不足时的应变措施</li><li>考虑过多“小型区域”可能造成的内存碎片(fragment)问题</li></ul></li><li><strong>C++内存配置的基本操作是:<code>:operator new()</code>，内存释放的基本操作是<code>::operator delete()</code>。这两个全局函数相当于C的malloc()和free()函数，所以SGI正是用malloc()和free()完成内存的配置和释放。</strong></li><li>为了解决小型区块可能造成的内存破碎问题，SGI设计了双层级的配置器，<strong>第一级配置器<code>(__malloc_alloc_template)</code>用malloc()和free()，第二级配置器<code>(__default_alloc_template)</code>看情况而定：当配置区块超过128bytes，调用第一级配置器；小于128bytes，采用复杂的内存池<code>memory bool</code>整理方式。</strong>其中具体是开放了第一级配置器还是两级配置器都开放了由<strong>USE_MEALLOC是否定义决定，定义了</strong>USE_MEALLOC就将alloc定义为第一级配置器，没有定义就将alloc定义为第二级配置器。SGI STL采用第二级配置器。</li><li><p>无论是第一级配置器还是第二级配置器，SGI都为其包装了一个接口<code>simple_alloc</code>，使其能够符合STL的接口规格。</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>,<span class="title">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">simple_alloc</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> T* <span class="title">allocate</span><span class="params">(<span class="keyword">size_t</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> == n?<span class="number">0</span> : (T*) Alloc::allocate(n* <span class="keyword">sizeof</span> (T));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> T* <span class="title">allocate</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T*) Alloc::allocatte(<span class="keyword">sizeof</span> (T));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dallocate</span><span class="params">(T* p, <span class="keyword">size_t</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span> != n)</span><br><span class="line">            Alloc::deallocate(p, n*<span class="keyword">sizeof</span> (T));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deallocat</span><span class="params">(T* p)</span></span>&#123;</span><br><span class="line">        Alloc::deallocate(p, <span class="keyword">sizeof</span> (T));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>  内部四个成员函数都是单纯的转调用，这个接口使配置器的单位从bytes转为个别元素的大小(sizeof(T))。</p></li><li>图解如下：<ul><li>第一级配置器和第二级配置器：<img src="http://p3ax8ersb.bkt.clouddn.com/201802011620_34.png" alt="第一级配置器和第二级配置器"></li><li>包装接口和运用：<img src="http://p3ax8ersb.bkt.clouddn.com/201802011647_747.png" alt="包装接口和运用"></li></ul></li></ul><p>接下来几节，暂时先压住……</p><h6 id="2-2-5-第一级配置器-malloc-alloc-template-剖析"><a href="#2-2-5-第一级配置器-malloc-alloc-template-剖析" class="headerlink" title="2.2.5 第一级配置器 __malloc_alloc_template 剖析"></a>2.2.5 第一级配置器 __malloc_alloc_template 剖析</h6><h6 id="2-2-6-第二级配置器-default-alloc-template-剖析"><a href="#2-2-6-第二级配置器-default-alloc-template-剖析" class="headerlink" title="2.2.6 第二级配置器__default_alloc_template 剖析"></a>2.2.6 第二级配置器__default_alloc_template 剖析</h6><h6 id="2-2-7-空间配置函数allocate"><a href="#2-2-7-空间配置函数allocate" class="headerlink" title="2.2.7 空间配置函数allocate()"></a>2.2.7 空间配置函数allocate()</h6><h6 id="2-2-8-空间释放函数-deallocate"><a href="#2-2-8-空间释放函数-deallocate" class="headerlink" title="2.2.8 空间释放函数 deallocate()"></a>2.2.8 空间释放函数 deallocate()</h6><h6 id="2-2-9-重新填充-free-lists"><a href="#2-2-9-重新填充-free-lists" class="headerlink" title="2.2.9 重新填充 free lists"></a>2.2.9 重新填充 free lists</h6><h6 id="2-2-10-内存池-memory-pool"><a href="#2-2-10-内存池-memory-pool" class="headerlink" title="2.2.10 内存池(memory pool)"></a>2.2.10 内存池(memory pool)</h6><h5 id="2-3-内存基本处理工具"><a href="#2-3-内存基本处理工具" class="headerlink" title="2.3 内存基本处理工具"></a>2.3 内存基本处理工具</h5><p>STL定义了五个全局函数，作用于未初始化化空间上：用于构造的<code>construct()</code>和析构的<code>destroy()</code>,另外三个是：<code>uninitialized_copy(),uninitialized_fill(),uninitialozed_fill_n()</code>(定于于<code>&lt;memory&gt;</code>),分别对应于高层次函数<code>copy(),fill(),fill_n()</code>,这些都是STL的算法。</p><h6 id="2-3-1-uninitialized-copy"><a href="#2-3-1-uninitialized-copy" class="headerlink" title="2.3.1 uninitialized_copy"></a>2.3.1 uninitialized_copy</h6><h6 id="2-3-2-uninitialized-fill"><a href="#2-3-2-uninitialized-fill" class="headerlink" title="2.3.2 uninitialized_fill"></a>2.3.2 uninitialized_fill</h6><h6 id="2-3-3-uninitialized-fill-n"><a href="#2-3-3-uninitialized-fill-n" class="headerlink" title="2.3.3 uninitialized_fill_n"></a>2.3.3 uninitialized_fill_n</h6><h4 id="3-迭代器-iterator-概念与traits编程技法"><a href="#3-迭代器-iterator-概念与traits编程技法" class="headerlink" title="3 迭代器(iterator)概念与traits编程技法"></a>3 迭代器(iterator)概念与traits编程技法</h4><p>(更新时间：18.2.1)<br>迭代器(iterator)是一种抽象的设计概念，iterator模式定义如下；提供一种方法，使之能够按照次序访问某个聚合物（容器）所含有的各个元素，而同时又无需暴露该聚合物的内部表述方式</p><h5 id="3-1-迭代器设计思维"><a href="#3-1-迭代器设计思维" class="headerlink" title="3.1 迭代器设计思维"></a>3.1 迭代器设计思维</h5><p><strong>STL的中心是将数据容器和算法分开，然后用一个胶合剂将他们联系在一起，这个就是iterators的作用之一</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.1举例说明迭代器的使用</span></span><br><span class="line"><span class="comment">//find()的定义。</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>, <span class="title">chass</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">InputIterator</span> <span class="title">find</span>( <span class="title">InputIterator</span> <span class="title">first</span>, <span class="title">InputIterator</span> <span class="title">last</span>, <span class="title">const</span> <span class="title">T</span>&amp; <span class="title">value</span> )&#123;</span></span><br><span class="line">    <span class="keyword">while</span> ( first != last &amp;&amp; *first != value )</span><br><span class="line">        ++first;</span><br><span class="line">        <span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> arraySiza = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">int</span> ia[arraySiza] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ivect(ia, ia+arraySiza);</span><br><span class="line">    <span class="comment">//调用vector的iterator用于find()</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it1 = find(ivect.begin(), ivect.end(), <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">if</span>( it1 == ivect.end() )</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"4 not found."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"4 found:"</span> &lt;&lt; *it1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    it1 = find(ivect.begin(), ivect.end(), <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>( it1 == ivect.end() )</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"8 not found."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"8 found"</span> &lt;&lt; *it1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201802011511_588.png" alt="迭代器"></p><h5 id="3-2-迭代器-ierator-是一种smart-pointer"><a href="#3-2-迭代器-ierator-是一种smart-pointer" class="headerlink" title="3.2 迭代器(ierator)是一种smart pointer"></a>3.2 迭代器(ierator)是一种smart pointer</h5><p><strong>迭代器是一个行为类似指针的对象，所以迭代器最重要的编程工作就是对operator* 和 operator-&gt; 进行重载工作。</strong><br>以下，简单模拟一个list的结构，然后设计对应的iterator。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//listnode</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListItem</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">T <span class="title">value</span><span class="params">()</span> <span class="keyword">const</span></span>&#123; <span class="keyword">return</span> _value; &#125;</span><br><span class="line">    <span class="function">ListItem* <span class="title">next</span><span class="params">()</span> <span class="keyword">const</span></span>&#123; <span class="keyword">return</span> _next; &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T _value;</span><br><span class="line">    ListItem* _next; <span class="comment">//单向链表(single linked list)</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//list</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert_front</span><span class="params">(T value)</span></span>; <span class="comment">//省略实现</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert_end</span><span class="params">(T value)</span></span>;   <span class="comment">//省略实现</span></span><br><span class="line">    <span class="function">voide <span class="title">display</span><span class="params">(<span class="built_in">std</span>::ostream &amp;os = <span class="built_in">std</span>::<span class="built_in">cout</span>)</span> <span class="keyword">const</span></span>;<span class="comment">//省略实现</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ListItem&lt;T&gt;* _end;</span><br><span class="line">    ListItem&lt;T&gt;* _front;</span><br><span class="line">    <span class="keyword">long</span> _size;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>当我们解引用这个迭代器的时候，传回的应该是ListItem对象；当我们++迭代器的时候，它应该指向下一个ListItem对象。设计如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//iterator</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Item</span>&gt;//<span class="title">Item</span>可以是单向链表节点或双向链表节点，此处这个迭代器特地为链表服务，因为他的<span class="title">operator</span>++只适用于链表。</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">ListIter</span>&#123;</span></span><br><span class="line">    Item* ptr;  <span class="comment">//保持与容器之间的一个联系</span></span><br><span class="line">    ListIter( Item* p = <span class="number">0</span> )</span><br><span class="line">        :ptr(p)</span><br><span class="line">        &#123;&#125;</span><br><span class="line">    <span class="comment">//不必实现copy ctor，因为编译器提供的缺省行为已经足够</span></span><br><span class="line">    <span class="comment">//不必实现operator=，因为编译器提供的缺省行为已经足够</span></span><br><span class="line">    Item&amp; <span class="keyword">operator</span>*() <span class="keyword">const</span> &#123; <span class="keyword">return</span> *ptr; &#125;</span><br><span class="line">    Item* <span class="keyword">operator</span>-&gt;() <span class="keyword">const</span> &#123; <span class="keyword">return</span> ptr; &#125;</span><br><span class="line">    <span class="comment">//operator++分为两种，一种是前置++(pre-increament operator),另一种是后置++(post-increment operator)</span></span><br><span class="line">    <span class="comment">//pre-increament operator</span></span><br><span class="line">    ListIter&amp; <span class="keyword">operator</span>++()&#123;</span><br><span class="line">        ptr = ptr-&gt;next();</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//post-incteament operator</span></span><br><span class="line">    LostIter <span class="keyword">operator</span>++(<span class="keyword">int</span>)&#123;</span><br><span class="line">        ListIter tmp = *<span class="keyword">this</span>;</span><br><span class="line">        ++*<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> LostIter&amp; i)<span class="keyword">const</span>&#123; <span class="keyword">return</span> ptr == i.ptr; &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> LostIter&amp; i)<span class="keyword">const</span>&#123; <span class="keyword">return</span> ptr != i.ptr; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来，将List和find()由ListIter粘合起来：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;<span class="keyword">int</span>&gt; mylist;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; ++i )&#123;</span><br><span class="line">        mylist.insert_front(i);</span><br><span class="line">        mylist.insert_end(i+<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    mylist.displau();   <span class="comment">//10( 4 3 2 1 0 2 3 4 5 6)</span></span><br><span class="line">    ListIter&lt;ListItem&lt;<span class="keyword">int</span>&gt; &gt; begin(mylist.front());</span><br><span class="line">    ListIter&lt;ListItem&lt;<span class="keyword">int</span>&gt; &gt; end;</span><br><span class="line">    ListIter&lt;ListItem&lt;<span class="keyword">int</span>&gt; &gt; iter;</span><br><span class="line"></span><br><span class="line">    iter = find(begin, end, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span>( iter == end )</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"not found"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"found."</span> &lt;&lt; iter-&gt;value() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//执行结果：found.3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由于find() 函数以<code>*iter != value</code>来检查元素值是否吻合，本例子中value的型别是 int，iter 的型别是 <code>ListIterm&lt;int&gt;</code>,两者之间没有可以使用的operator!=函数，所以需要重载这个函数，全局的，参数是int和<code>ListIterm&lt;int&gt;</code>。如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> ListItem&lt;T&gt;&amp; item, T n)&#123; <span class="keyword">return</span> item.value() != n; &#125;</span><br></pre></td></tr></table></figure></p><h5 id="3-3-迭代器相应型别-associated-types"><a href="#3-3-迭代器相应型别-associated-types" class="headerlink" title="3.3 迭代器相应型别(associated types)"></a>3.3 迭代器相应型别(associated types)</h5><p>当算法中有必要声明一个变量，需要获取“迭代器所指对象的型别”为型别，我们可以通过function template 的参数推导(argument deducation)机制实现。例如：<img src="http://p3ax8ersb.bkt.clouddn.com/201802011841_231.png" alt="function template的例子"><br>以func()为对外接口，实际操作全部置于func_imp中，由于func_imp()是一个function template，一旦被调用，编译器会自动进行template参数推导。推导出型别T，顺利解决了问题。</p><h5 id="3-4-Traits-编程技法——STL源代码门钥"><a href="#3-4-Traits-编程技法——STL源代码门钥" class="headerlink" title="3.4 Traits 编程技法——STL源代码门钥"></a>3.4 Traits 编程技法——STL源代码门钥</h5><ul><li><p><strong>value type：迭代器所指对象的型别。</strong>上述的参数型别推导技巧在value type需要用于函数的传回值就束手无策了，因为函数的”template参数推导机制”推导的只是参数，无法推导函数的返回值型别。我们需要别的方法，例如声明内嵌型别。如下：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">MyIter</span>&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> T value_type;   <span class="comment">//内嵌型别声明(nested type)</span></span><br><span class="line">    MyIter(T* p = <span class="number">0</span>)</span><br><span class="line">        :ptr(p)</span><br><span class="line">        &#123;&#125;</span><br><span class="line">    T&amp; <span class="keyword">operator</span>*() <span class="keyword">const</span> &#123; <span class="keyword">return</span> *ptr; &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    T* ptr; <span class="comment">//成员变量</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">typename</span> <span class="title">I</span>:</span>:<span class="function">value_type <span class="title">func</span><span class="params">( I ite )</span></span>&#123; <span class="keyword">return</span> *ite; &#125;    <span class="comment">//typename I::value_type  这是func的返回值型别；</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">MyIter&lt;<span class="keyword">int</span>&gt; ite(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">8</span>));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; func(ite);  <span class="comment">//输出:8</span></span><br></pre></td></tr></table></figure><p>  <code>typename I::value_type</code>必须加上typename，因为T是一个template参数，在它被编译器实例化之前，编译器是不知道他是什么的。<strong>加上了关键字typename的用意在于告诉编译器这个是一个型别，如此才能够顺利编译通过。</strong></p></li><li><p>这样有一个缺陷，并不是所有的迭代器都是class type，原生指针就不是。真正可以解决这个问题的是 <strong>偏特化(template partial specialization)</strong>。也就是将泛化版本中的某些template参数赋予明确大的指定内容。见如下例子：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//class template</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>&#123;</span>    <span class="comment">//这个泛化版本接受T为任何型别</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//prartial specialization</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>&lt;T*&gt;&#123;</span>    <span class="comment">//这个特化版本只适用于"T 为原生指针"的情况</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>下面这个例子，<strong>专门用来萃取迭代器的特性，value type正是迭代器的特性之一</strong></p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">iterator_traits</span>&#123;</span> <span class="comment">//traits意思为“特性”</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> I::value_type value_type;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>  这样，前面那个func函数可以修改成这样。</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="class">//<span class="title">typename</span> <span class="title">iterator_traits</span>&lt;I&gt;:</span>:value_type 是函数的返回型别</span><br><span class="line"><span class="keyword">typename</span> iterator_traits&lt;I&gt;::<span class="function">value_type <span class="title">func</span><span class="params">(I ite)</span></span>&#123; <span class="keyword">return</span> *ite; &#125;</span><br></pre></td></tr></table></figure><p>  跟之前的相比，只是多了一个中间层，但是就是多了这个中间层，traits可以拥有特化版本。如下：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">iterator_traits</span>&lt;T*&gt;&#123;</span> <span class="comment">//偏特化版本--迭代器是一个原生指针</span></span><br><span class="line">    <span class="keyword">typedef</span> T value_type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  此时，就算是原生指针，我们也可以通过traits萃取到它的value type。我们想要的到的原生指针是一个非const值，但当像这样的<code>iterator_traits&lt;const int*&gt;::value_type</code>得到的是const int。所以我们另外设计一个特化版本，让<code>const T*</code>转变为T*：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">iterator_traits</span>&lt;const T*&gt;&#123;</span>   <span class="comment">//偏特化版本，当迭代器是一个const指针的时候，</span></span><br><span class="line">    <span class="keyword">typedef</span> T value_type;           <span class="comment">//萃取出来的是T，而不是const T</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>  到这里为止，<strong>不论是面对class-type迭代器，原生指针，const修饰的原生指针。我们都可以通过traits萃取出正确的value type。但是，需要这traits正常运作，每一个迭代器必须自行以内嵌型别定义(nested typedef)的方式定义出相应型别(associated types)。这是一个约定，STL中必须满足。</strong></p></li><li>图解iterator_traits：<img src="http://p3ax8ersb.bkt.clouddn.com/201802012217_572.png" alt="iterator_traits"></li><li><p>常用的迭代器相应型别有以上五种，“特性萃取机”traits会原汁原味的榨取出来：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">iterator_traits</span>&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> I::iterator_category iterator_category;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> I::value_type value_type;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> I::difference_type difference_type;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> I::pointer pointer;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> I::reference reference;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>  <strong>其中，iterator_traits必须对传入的型别为pointer和pointer-to-const设计特化版本。</strong></p></li></ul><p>本章先到这里，往下就是对STL原原本本的探究了。</p><h6 id="3-4-1-value-type-如上"><a href="#3-4-1-value-type-如上" class="headerlink" title="3.4.1 value type 如上"></a>3.4.1 value type 如上</h6><h6 id="3-4-2-difference-type"><a href="#3-4-2-difference-type" class="headerlink" title="3.4.2 difference type"></a>3.4.2 difference type</h6><h6 id="3-4-3-reference-type"><a href="#3-4-3-reference-type" class="headerlink" title="3.4.3 reference type"></a>3.4.3 reference type</h6><h6 id="3-4-4-pointer-type"><a href="#3-4-4-pointer-type" class="headerlink" title="3.4.4 pointer type"></a>3.4.4 pointer type</h6><h6 id="3-4-5-iterator-catrgory"><a href="#3-4-5-iterator-catrgory" class="headerlink" title="3.4.5 iterator_catrgory"></a>3.4.5 iterator_catrgory</h6><h4 id="4-序列式容器"><a href="#4-序列式容器" class="headerlink" title="4 序列式容器"></a>4 序列式容器</h4><h5 id="4-1-容器的概观与分类"><a href="#4-1-容器的概观与分类" class="headerlink" title="4.1 容器的概观与分类"></a>4.1 容器的概观与分类</h5><p><img src="http://p3ax8ersb.bkt.clouddn.com/201801311638_540.png" alt="SGI STL的各个容器"><br>所谓序列式容器，其中的元素都是可序的(ordered),但未必有序(sorted)。C++本身有array，其它是STL提供的。</p><h5 id="4-2-vector"><a href="#4-2-vector" class="headerlink" title="4.2 vector"></a>4.2 vector</h5><h6 id="4-2-1-vector概述"><a href="#4-2-1-vector概述" class="headerlink" title="4.2.1 vector概述"></a>4.2.1 vector概述</h6><p>array是静态的，vector是动态增长的，随着元素的增加，内部机制自动扩充空间以容纳元素，不需要自己分配空间。</p><h6 id="4-2-3-vector的迭代器"><a href="#4-2-3-vector的迭代器" class="headerlink" title="4.2.3 vector的迭代器"></a>4.2.3 vector的迭代器</h6><p>由于vector维护的是连续线性空间，所以不论元素类型是什么，普通指针都可以作为vector的迭代器而满足要求。vector支持随机存取，普通指针也满足。<code>vector&lt;int&gt; :: iterator ivite;vector&lt;Shape&gt; :: iterator svite;</code>其中 <code>ivite</code>的类型就是<code>int*</code>，<code>svite</code>的类型就是<code>Shape*</code> 。</p><h6 id="4-2-4-vector的数据结构"><a href="#4-2-4-vector的数据结构" class="headerlink" title="4.2.4 vector的数据结构"></a>4.2.4 vector的数据结构</h6><ul><li><p>vector的数据结构如下：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Alloc</span> = <span class="title">alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">vecotr</span>&#123;</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">    <span class="comment">//注意STL的左闭右开特性。finish和end_of_storage指向最后一个元素的下一个位置</span></span><br><span class="line">        iterator start;             <span class="comment">//表示目前使用空间的头部</span></span><br><span class="line">        iterator finish;            <span class="comment">//表示目前使用空间的尾部</span></span><br><span class="line">        iterator end_of_storage;    <span class="comment">//表示目前可用空间的尾部</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>为了降低空间配置时的成本，实际上，vector配置的空间会比客户端需要的更大一些，这样是为了将来可能扩充的准备。当容量等于大小的时候，开辟新的空间。</p></li><li>运用 start，finish，end_of_storage三个迭代器，可以实现begin(),end(),size(),capacity(),empty(),operator[],front(),back()等方法。</li></ul><h6 id="4-2-5-vector的构造与内存管理：constructor，push-back"><a href="#4-2-5-vector的构造与内存管理：constructor，push-back" class="headerlink" title="4.2.5 vector的构造与内存管理：constructor，push_back"></a>4.2.5 vector的构造与内存管理：constructor，push_back</h6><p>push_back：将新元素插入vector尾端的时候，先检查是否还有备用空间，够的话，直接构造元素，并调整finish。如果没有备用空间，动态增长空间。这指并不是在原空间之后开辟新的空间，因为无法保证原空间之后还有可供配置的空间。而是以原大小的两倍例外配置一块大的空间，然后将原内容拷贝过来，然后才开始在原内容之后构造新元素，并释放原空间。<strong>因此，对于vector的任何操作，一旦引起了空间重新配置，指向原vector的所有迭代器都是失效了。</strong>push_back源代码节选如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_back</span><span class="params">( <span class="keyword">const</span> T&amp; x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( finish != end_of_storage )&#123;</span><br><span class="line">        construct( finish, x );</span><br><span class="line">        ++finish;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>    <span class="comment">//无备用空间</span></span><br><span class="line">    insert_aux(end(), x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">vector</span>&lt;T, Alloc&gt;:</span>:insert_aux( iterator positon, <span class="keyword">const</span> T&amp; x )&#123;</span><br><span class="line">    <span class="keyword">if</span>( finish != end_of_storage )&#123; <span class="comment">//为什么还要再次判断</span></span><br><span class="line">        construct( finish, *(finish - <span class="number">1</span>));</span><br><span class="line">        ++finish;</span><br><span class="line">        T x_copy = x;</span><br><span class="line">        <span class="comment">//不懂</span></span><br><span class="line">        copy_backward(position, finish - <span class="number">2</span>, finish - <span class="number">1</span>);</span><br><span class="line">        *position = x_copy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;   <span class="comment">//无备用空间</span></span><br><span class="line">        <span class="keyword">const</span> size_type old_size = size();</span><br><span class="line">        <span class="keyword">const</span> size_type len = old_size != <span class="number">0</span> ? <span class="number">2</span>*old_size : <span class="number">1</span>;</span><br><span class="line">        iterator new_start = data_allocator::allocatr(len); <span class="comment">//实际配置空间</span></span><br><span class="line">        iterator new_finish = new_start;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//将原来vector内容拷贝到新的vector</span></span><br><span class="line">            new_finish = uninitialized_copy(start, position, new_start);</span><br><span class="line">            <span class="comment">//为新元素设定初值x</span></span><br><span class="line">            construct(new_finish, x);</span><br><span class="line">            ++new_finish;</span><br><span class="line">            <span class="comment">//将安插点的原内容也拷贝过来//不懂</span></span><br><span class="line">            new_finish = uninitialized_copy(posiition, finish, new_finish);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(...)&#123;</span><br><span class="line">            <span class="comment">//开辟失败</span></span><br><span class="line">            destroy(new_start, new_finish);</span><br><span class="line">            data_allocator::deallocate(new_start, len);</span><br><span class="line">            <span class="keyword">throw</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//析构并释放原vector</span></span><br><span class="line">        destory(begin(), end());</span><br><span class="line">        deallocate();</span><br><span class="line">        <span class="comment">//调整迭代器，指向新的vector</span></span><br><span class="line">        start = new_start;</span><br><span class="line">        finish = new_finish;</span><br><span class="line">        end_of_storage = new_start+len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(更新时间：18.2.2)</p><h6 id="4-2-6-vector的元素操作：pop-back-erase-clear-insert"><a href="#4-2-6-vector的元素操作：pop-back-erase-clear-insert" class="headerlink" title="4.2.6 vector的元素操作：pop_back, erase, clear, insert"></a>4.2.6 vector的元素操作：pop_back, erase, clear, insert</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//清除[first, last)中的元素</span></span><br><span class="line"><span class="function">iterator <span class="title">erase</span><span class="params">(iterator first, iterator last)</span></span>&#123;</span><br><span class="line">    iterator ii = copy(last, finish, first);    <span class="comment">//copy是全局函数，第六章</span></span><br><span class="line">    destory(i, finish);</span><br><span class="line">    finish = finish - (last - first);</span><br><span class="line">    <span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清除某个位置上的元素</span></span><br><span class="line"><span class="function">iterator <span class="title">erase</span><span class="params">(iterator position)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(position + <span class="number">1</span> != end())</span><br><span class="line">        copy(position + <span class="number">1</span>, finish, position);</span><br><span class="line">    --finish;</span><br><span class="line">    destroy(finish);</span><br><span class="line">    <span class="keyword">return</span> position;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123; erase(begin(), end()); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从position开始，插入n个元素，元素初值为x</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">vector</span>&lt;T, Alloc&gt;:</span>:insert(iterator position, size_type n ,<span class="keyword">const</span> T&amp; x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(n != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//备用空间大于等于新增元素个数</span></span><br><span class="line">        <span class="keyword">if</span>(size_type(end_of_storage - finish) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            T x_copy = x;</span><br><span class="line">            <span class="comment">//计算插入点之后的现有元素个数</span></span><br><span class="line">            <span class="keyword">const</span> size_type elems_after = finish - position;</span><br><span class="line">            iterator old_finish = finish;</span><br><span class="line">            <span class="keyword">if</span>(elems_after &gt; n)&#123;    <span class="comment">//插入点之后的现有元素个数 &gt; 新增元素个数</span></span><br><span class="line">                uninitialized_copy(finish - n, finish, finish);</span><br><span class="line">                finish += n;    <span class="comment">//将vector 尾端标记后移</span></span><br><span class="line">                copy_backward(position, old_finish - n, old_finish);</span><br><span class="line">                fill(position, position+n, x_copy); <span class="comment">//从插入点开始填入新值</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                uninitialized_fill_n(finish, n-elems_affter, x_copy);</span><br><span class="line">                finish += n - elems_after;</span><br><span class="line">                uninitialized_copy(position, old_finish, finish);</span><br><span class="line">                finish += elems_after;</span><br><span class="line">                fill(position, old_finish, x_copy);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;   <span class="comment">//备用空间 &lt; 新增元素个数</span></span><br><span class="line">            <span class="keyword">const</span> size_type old_size = size();</span><br><span class="line">            <span class="comment">//决定新的长度为旧长度+新增元素个数</span></span><br><span class="line">            <span class="keyword">const</span> size_type len = old_size + max(old_size, n);</span><br><span class="line">            <span class="comment">//配置新的vector空间</span></span><br><span class="line">            iterator new_start = data_allocaator::allocate(len);</span><br><span class="line">            iterator new_finish = new_start;</span><br><span class="line">            __STL_TRY&#123;  <span class="comment">//&lt;-- 这个是什么</span></span><br><span class="line">                <span class="comment">//将旧的vector在插入点之前的元素复制到新空间</span></span><br><span class="line">                new_finish = uninitialized_copy(start, position, new_start);</span><br><span class="line">                <span class="comment">//将新增元素(初值为x)填入新空间</span></span><br><span class="line">                new_finish = uninitialized_fill_n(new_finish, n, x);</span><br><span class="line">                <span class="comment">//将旧的vector在插入点之后的元素复制到新空间</span></span><br><span class="line">                nwe_finish = uninitialized_copy(position, finish, new_finish);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//异常处理</span></span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//清除释放旧的空间</span></span><br><span class="line">            destroy(start，finish);</span><br><span class="line">            deallocate();</span><br><span class="line">            <span class="comment">//调整迭代器指向新的空间</span></span><br><span class="line">            start = new_start;</span><br><span class="line">            finish = new_finish;</span><br><span class="line">            end_of_storage = new_start+len;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入操作完成之后，新增节点应位于position的后面。</span></span><br></pre></td></tr></table></figure><p>图解如下：<img src="http://p3ax8ersb.bkt.clouddn.com/201802021439_772.png" alt="insert"></p><h5 id="4-3-list"><a href="#4-3-list" class="headerlink" title="4.3 list"></a>4.3 list</h5><h6 id="4-3-1-list概述"><a href="#4-3-1-list概述" class="headerlink" title="4.3.1 list概述"></a>4.3.1 list概述</h6><p>list每次插入或删除一个元素，就配置或释放一个元素空间。对于任何位置的元素插入或元素移除，是时间常数。</p><h6 id="4-3-2-list的节点-node"><a href="#4-3-2-list的节点-node" class="headerlink" title="4.3.2 list的节点(node)"></a>4.3.2 list的节点(node)</h6><p>list的节点和list本身的设计是分开的。以下是STL list的节点结构：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> __<span class="title">list_node</span>&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">void</span>* void_pointer;</span><br><span class="line">    void_pointer prev;  <span class="comment">//型别为void*，其实可以是__list_node&lt;T&gt;</span></span><br><span class="line">    void_pointer next;</span><br><span class="line">    T data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这是一个双向链表</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-STL概论与版本简介&quot;&gt;&lt;a href=&quot;#1-STL概论与版本简介&quot; class=&quot;headerlink&quot; title=&quot;1 STL概论与版本简介&quot;&gt;&lt;/a&gt;1 STL概论与版本简介&lt;/h4&gt;&lt;p&gt;(更新时间：18.1.29)&lt;/p&gt;
&lt;h5 id=&quot;1-2-STL六大组件&quot;&gt;&lt;a href=&quot;#1-2-STL六大组件&quot; class=&quot;headerlink&quot; title=&quot;1.2 STL六大组件&quot;&gt;&lt;/a&gt;1.2 STL六大组件&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;容器(containers):&lt;code&gt;vector,list,deque,set,map&lt;/code&gt;,用来存放数据&lt;/li&gt;
&lt;li&gt;算法(algorithms):&lt;code&gt;sort,search,copy,erase&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;迭代器(iterators):扮演容器与算法之间的胶合剂，所谓的“泛型指针”。从实现角度来看，
    
    </summary>
    
      <category term="learning" scheme="http://yoursite.com/categories/learning/"/>
    
    
  </entry>
  
  <entry>
    <title>创建一个不能被继承的类</title>
    <link href="http://yoursite.com/2018/01/29/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%8D%E8%83%BD%E8%A2%AB%E7%BB%A7%E6%89%BF%E7%9A%84%E7%B1%BB/"/>
    <id>http://yoursite.com/2018/01/29/创建一个不能被继承的类/</id>
    <published>2018-01-29T02:23:19.000Z</published>
    <updated>2018-01-29T09:33:50.498Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h4><p><strong>题目很简单，就是创建一个不能够被继承的类，同时能够正常使用。</strong></p><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><ul><li>题目分为两部分组成，第一个是不能被继承的类。类如果要不能被继承，那么子类肯定不能够调用基类的构造函数或者析构函数。<a id="more"></a>那么我们只要将构造函数或析构函数定义为私有成员函数就好了。</li><li>第二个要求，能够正常使用，这样显然之前的方式是行不通的。构造函数为私有了，就无法创建对象了。那我再给他加一个友元函数，这样对象也可以创建了。</li><li>可是题目的要求是正常使用这个类，显然通过一个友元函数是不符合我们正常使用类的方式。</li><li>这个时候，正真正确的思路就出来了。我们借用一个中间类。例如：我们不能被继承的类是man，我们创建一个 <strong>私有构造函数的父类person</strong>，同时将 <strong>man定义为person的友元类</strong>。这样man就可以正常访问person的私有构造函数了。接着我们让 <strong>man虚继承person</strong>，到这里我们就完成了这个题目。</li><li><strong>让man虚继承person是为了让继承man的类，都需要在man的父类，即person中调用构造函数，但只有man是person的友元类，其他的类都不能访问person的构造函数。因此man就成为了不能被继承的类，而man本身可以正常使用。</strong></li></ul><h5 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//设计一个不能被继承的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">person</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">man</span>;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="comment">//构造函数为private</span></span><br><span class="line">        person()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//man虚拟继承person</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">man</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> person &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        man()&#123;</span><br><span class="line">            age = <span class="number">18</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class son:public man&#123;</span></span><br><span class="line"><span class="comment">//  public:</span></span><br><span class="line"><span class="comment">//      son()&#123;&#125;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    man bob;</span><br><span class="line">    system( <span class="string">"clear"</span> );</span><br><span class="line">    bob.show();</span><br><span class="line">    <span class="comment">//son tom;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不定义man的继承类son，正常输出man的age = 18<br><img src="http://p3ax8ersb.bkt.clouddn.com/201801291732_992.png" alt=""></p><p>定义man的继承类son失败<br><img src="http://p3ax8ersb.bkt.clouddn.com/201801291733_414.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;题目：&quot;&gt;&lt;a href=&quot;#题目：&quot; class=&quot;headerlink&quot; title=&quot;题目：&quot;&gt;&lt;/a&gt;题目：&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;题目很简单，就是创建一个不能够被继承的类，同时能够正常使用。&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&quot;思路：&quot;&gt;&lt;a href=&quot;#思路：&quot; class=&quot;headerlink&quot; title=&quot;思路：&quot;&gt;&lt;/a&gt;思路：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;题目分为两部分组成，第一个是不能被继承的类。类如果要不能被继承，那么子类肯定不能够调用基类的构造函数或者析构函数。
    
    </summary>
    
      <category term="practice" scheme="http://yoursite.com/categories/practice/"/>
    
      <category term="C/C++" scheme="http://yoursite.com/categories/practice/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>位运算实现Add</title>
    <link href="http://yoursite.com/2018/01/28/%E4%BD%8D%E8%BF%90%E7%AE%97%E5%AE%9E%E7%8E%B0Add/"/>
    <id>http://yoursite.com/2018/01/28/位运算实现Add/</id>
    <published>2018-01-28T05:30:43.000Z</published>
    <updated>2018-01-28T07:41:12.827Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h4><p><strong>实现一个Add函数，让两个整数相加，不能够使用<code>+-*/、++、--</code></strong></p><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><ul><li>正常实现两个数相加，有两个步骤，第一将两个数对应位相加，第二相加之后有进位，将进位值与对应位相加。举个例子，<code>15+5=20</code>先将位进行相加，不进行进位，得到<code>10</code>，再将进位加上，个位没有进位，十位进1，得到<code>20</code>。<a id="more"></a></li><li>题目要求不能使用<code>+-*/</code>，所以想到了位运算。15的二进制是<code>1111</code>，5的二进制是<code>0101</code>。根据上面的思路，我们先进行不进位相加，得到<code>1010</code>。(这个运算方式正好对应<code>^</code>)然后将进位加上(只求进位的运算正好对应<code>&amp;</code>再左移一位)，例子中只有第四位、第二位数值有进位值。得到<code>10100</code>，这个值就是<code>20</code>。</li></ul><h5 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、递归实现，每次将不进位相加的值赋给a，将计算出来的进位值赋给b，递归进行两者的分步相加，直到进位值`b=0`，返回a。</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Add</span><span class="params">( <span class="keyword">int</span> a, <span class="keyword">int</span> b )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( b == <span class="number">0</span> )</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">int</span> sum = a^b;</span><br><span class="line">    b = (a&amp;b)&lt;&lt;<span class="number">1</span>;</span><br><span class="line">    a = sum;</span><br><span class="line">    <span class="keyword">return</span> Add( a, b );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    system( <span class="string">"clear"</span> );</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Add(<span class="number">3</span>, <span class="number">7</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、同时可以用迭代实现(非函数)，思路一样，进位值b最后肯定会等于0，因为总有进位结束的时候。</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">49</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">while</span>( b != <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = a^b;</span><br><span class="line">        b = (a&amp;b)&lt;&lt;<span class="number">1</span>;</span><br><span class="line">        a = sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;题目：&quot;&gt;&lt;a href=&quot;#题目：&quot; class=&quot;headerlink&quot; title=&quot;题目：&quot;&gt;&lt;/a&gt;题目：&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;实现一个Add函数，让两个整数相加，不能够使用&lt;code&gt;+-*/、++、--&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&quot;思路：&quot;&gt;&lt;a href=&quot;#思路：&quot; class=&quot;headerlink&quot; title=&quot;思路：&quot;&gt;&lt;/a&gt;思路：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;正常实现两个数相加，有两个步骤，第一将两个数对应位相加，第二相加之后有进位，将进位值与对应位相加。举个例子，&lt;code&gt;15+5=20&lt;/code&gt;先将位进行相加，不进行进位，得到&lt;code&gt;10&lt;/code&gt;，再将进位加上，个位没有进位，十位进1，得到&lt;code&gt;20&lt;/code&gt;。
    
    </summary>
    
      <category term="practice" scheme="http://yoursite.com/categories/practice/"/>
    
      <category term="C/C++" scheme="http://yoursite.com/categories/practice/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>1+2+……+n的特殊求法</title>
    <link href="http://yoursite.com/2018/01/27/1-%E2%80%A6%E2%80%A6-n%E7%9A%84%E7%89%B9%E6%AE%8A%E6%B1%82%E6%B3%95/"/>
    <id>http://yoursite.com/2018/01/27/1-……-n的特殊求法/</id>
    <published>2018-01-26T16:44:40.000Z</published>
    <updated>2018-01-28T10:25:03.701Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h4><p><strong>求1+2+3+…+n，要求不能使用乘除法，for,while，if,else,switch,case等关键字以及条件判断语句。</strong></p><p>自己思考想到了一种方法，递归的思路，但是判断终止的条件不是if，利用了&amp;&amp;的性质，当前操作数为假的时候，不再进行后操作数的运算。然后在网上查阅，得到了其他的做法。</p><h5 id="更新：18-1-28"><a href="#更新：18-1-28" class="headerlink" title="更新：18.1.28"></a>更新：18.1.28</h5><p>发现了一个时间复杂度为O(1)的做法，这种做法只能在GCC、C99标准中使用，因为它使用了<a href="https://gcc.gnu.org/onlinedocs/gcc/Variable-Length.html" target="_blank" rel="noopener">柔性数组</a>，这种数组的长度的可变的，不需要用常量定义。</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">Sum_Solution</span><span class="params">( <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">            <span class="keyword">bool</span> a[n][n+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">sizeof</span>(a)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Solution s;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s.Sum_Solution(<span class="number">10</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>原文：</p><h5 id="利用-amp-amp-操作符，-也一样的做法。"><a href="#利用-amp-amp-操作符，-也一样的做法。" class="headerlink" title="利用&amp;&amp;操作符，|| 也一样的做法。"></a>利用&amp;&amp;操作符，|| 也一样的做法。</h5><p>思路：当result = 0 的时候，&amp;&amp;不再判断右操作数，递归停止。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">( <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = n;</span><br><span class="line">    result &amp;&amp; (result += sum(n<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; sum(<span class="number">100</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="利用构造函数以及静态成员变量"><a href="#利用构造函数以及静态成员变量" class="headerlink" title="利用构造函数以及静态成员变量"></a>利用构造函数以及静态成员变量</h5><p>思路：构造N次对象，每次对静态变量sum++，对n赋值。利用静态变量对所有同类对象有效的特点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">tmp</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造</span></span><br><span class="line">    tmp( )&#123;</span><br><span class="line">        ++n;</span><br><span class="line">        sum += n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="keyword">static</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        n = <span class="number">0</span>;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获得sum</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="keyword">static</span> <span class="title">getsum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> sum;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tmp::n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> tmp::sum = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//运行的函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    tmp::init();</span><br><span class="line">    tmp* a = <span class="keyword">new</span> tmp[n];</span><br><span class="line">    <span class="keyword">delete</span>[] a;</span><br><span class="line">    a = <span class="literal">NULL</span>;</span><br><span class="line">    tmp::getsum();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; count(<span class="number">100</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="利用虚函数、继承和函数指针"><a href="#利用虚函数、继承和函数指针" class="headerlink" title="利用虚函数、继承和函数指针"></a>利用虚函数、继承和函数指针</h5><p>思路：</p><ol><li>定义两个类，A是基类，B是子类。</li><li>定义一个<code>A* Array[2]</code>,其中Array[0]存放A对象的地址，Array[1]存放B对象的地址。</li><li>调用函数Sum中调用Sum的递归。同时对变量n两次取反<code>Array[!!n]-&gt;Sum(n-1)+n</code>,这样当n不为0的时候，得到bool值1。<code>Array[!!n] = Array[1]</code></li><li>当n=0调用基类A的sum。充分利用虚函数参数与类型有关的性质。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、虚函数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>;</span></span><br><span class="line">A* Array[<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">Sum</span><span class="params">( <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">Sum</span><span class="params">( <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">        <span class="comment">//当 n != 0, !!n = 1</span></span><br><span class="line">        <span class="keyword">return</span> Array[!!n]-&gt;Sum(n<span class="number">-1</span>)+n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sum2</span><span class="params">( <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">    A a;</span><br><span class="line">    B b;</span><br><span class="line">    Array[<span class="number">0</span>] = &amp;a;</span><br><span class="line">    Array[<span class="number">1</span>] = &amp;b;</span><br><span class="line">    <span class="comment">//调用虚函数</span></span><br><span class="line">    <span class="keyword">int</span> value = Array[<span class="number">1</span>]-&gt;Sum(n);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Sum2(<span class="number">100</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、同上，这里利用函数指针来实现。</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*fun)</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sum</span><span class="params">( <span class="keyword">int</span> i )</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sum2</span><span class="params">( <span class="keyword">int</span> i )</span></span>&#123;</span><br><span class="line">    fun f[<span class="number">2</span>] = &#123; Sum, Sum2 &#125;;</span><br><span class="line">    <span class="keyword">return</span> i + f[!!n](i<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="利用异常处理的机制"><a href="#利用异常处理的机制" class="headerlink" title="利用异常处理的机制"></a>利用异常处理的机制</h5><p>思路：try接收到的异常会在catch中捕获。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//n = 2 的时候，出现异常，程序流跳转到catch</span></span><br><span class="line">        <span class="keyword">int</span>[] <span class="built_in">array</span> = <span class="keyword">new</span> <span class="keyword">int</span>[n<span class="number">-2</span>];</span><br><span class="line">        <span class="keyword">return</span> n+sum(n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        <span class="comment">//返回1到上一个递归处，n = 2处。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="利用模板"><a href="#利用模板" class="headerlink" title="利用模板"></a>利用模板</h5><p>思路：利用了模板的特化作为递归结束的条件，并借用枚举类型。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">unsigned</span> N&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sum</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">enum</span>&#123;</span><br><span class="line">            sum = N+Sum&lt;N<span class="number">-1</span>&gt;::sum</span><br><span class="line">        &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//模板特化，当N=1 的时候，调用</span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sum</span>&lt;1&gt;&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">enum</span>&#123;</span><br><span class="line">            sum = <span class="number">1</span></span><br><span class="line">        &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Sum&lt;<span class="number">100</span>&gt;::sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="方法来源地址"><a href="#方法来源地址" class="headerlink" title="方法来源地址"></a><a href="http://blog.csdn.net/u010993983/article/details/37730317" target="_blank" rel="noopener">方法来源地址</a></h5>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;题目：&quot;&gt;&lt;a href=&quot;#题目：&quot; class=&quot;headerlink&quot; title=&quot;题目：&quot;&gt;&lt;/a&gt;题目：&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;求1+2+3+…+n，要求不能使用乘除法，for,while，if,else,switch,case等关键字以及条件判断语句。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;自己思考想到了一种方法，递归的思路，但是判断终止的条件不是if，利用了&amp;amp;&amp;amp;的性质，当前操作数为假的时候，不再进行后操作数的运算。然后在网上查阅，得到了其他的做法。&lt;/p&gt;
&lt;h5 id=&quot;更新：18-1-28&quot;&gt;&lt;a href=&quot;#更新：18-1-28&quot; class=&quot;headerlink&quot; title=&quot;更新：18.1.28&quot;&gt;&lt;/a&gt;更新：18.1.28&lt;/h5&gt;&lt;p&gt;发现了一个时间复杂度为O(1)的做法，这种做法只能在GCC、C99标准中使用，因为它使用了&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc/Variable-Length.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;柔性数组&lt;/a&gt;，这种数组的长度的可变的，不需要用常量定义。&lt;/p&gt;
    
    </summary>
    
      <category term="practice" scheme="http://yoursite.com/categories/practice/"/>
    
      <category term="C/C++" scheme="http://yoursite.com/categories/practice/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>收集</title>
    <link href="http://yoursite.com/2018/01/25/Linux%E7%9B%B8%E5%85%B3%E7%BD%91%E7%AB%99/"/>
    <id>http://yoursite.com/2018/01/25/Linux相关网站/</id>
    <published>2018-01-25T10:18:01.000Z</published>
    <updated>2018-01-27T10:57:52.255Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、Linux"><a href="#1、Linux" class="headerlink" title="1、Linux"></a><strong>1、Linux</strong></h3><h4 id="命令相关"><a href="#命令相关" class="headerlink" title="命令相关"></a>命令相关</h4><p>1、Linux命令大全：<a href="http://man.linuxde.net/" target="_blank" rel="noopener">http://man.linuxde.net/</a></p><p>2、修改时间查看时间：<a href="https://www.cnblogs.com/jiu0821/p/5999566.html" target="_blank" rel="noopener">https://www.cnblogs.com/jiu0821/p/5999566.html</a><br><a id="more"></a><br>3、移动、重命名文件/目录：<a href="https://linux.cn/article-2688-1.html" target="_blank" rel="noopener">https://linux.cn/article-2688-1.html</a></p><p>4、查看系统版本：<a href="http://www.linuxidc.com/Linux/2015-07/119897.htm" target="_blank" rel="noopener">http://www.linuxidc.com/Linux/2015-07/119897.htm</a></p><h4 id="vim相关"><a href="#vim相关" class="headerlink" title="vim相关"></a>vim相关</h4><p>1、vim的配置：<a href="http://blog.csdn.net/footmart_c/article/details/51588524" target="_blank" rel="noopener">http://blog.csdn.net/footmart_c/article/details/51588524</a></p><p>2、多行删除复制：<a href="https://www.cnblogs.com/MMLoveMeMM/articles/3707287.html" target="_blank" rel="noopener">https://www.cnblogs.com/MMLoveMeMM/articles/3707287.html</a></p><p>3、vim安装报错EXTERN.h：<a href="http://tieba.baidu.com/p/4471948063" target="_blank" rel="noopener">http://tieba.baidu.com/p/4471948063</a></p><p>4、vim升级8.0+YouCompleteMe补全插件：<a href="http://blog.csdn.net/nzyalj/article/details/75331822" target="_blank" rel="noopener">http://blog.csdn.net/nzyalj/article/details/75331822</a></p><p>5、vim8.0升级后添加到路径中：<a href="http://blog.csdn.net/u013388603/article/details/72780586" target="_blank" rel="noopener">http://blog.csdn.net/u013388603/article/details/72780586</a></p><p>6、YouCompleteMe：<a href="http://blog.51cto.com/990487026/1905427" target="_blank" rel="noopener">http://blog.51cto.com/990487026/1905427</a></p><h4 id="git相关"><a href="#git相关" class="headerlink" title="git相关"></a>git相关</h4><p>1、git安装：<a href="https://jingyan.baidu.com/article/e9fb46e16698687521f766ec.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/e9fb46e16698687521f766ec.html</a></p><p>2、git安装：<a href="http://blog.csdn.net/u013256816/article/details/54743470" target="_blank" rel="noopener">http://blog.csdn.net/u013256816/article/details/54743470</a></p><p>3、git升级2.7.3：<a href="https://www.cnblogs.com/yexinw/p/6401663.html" target="_blank" rel="noopener">https://www.cnblogs.com/yexinw/p/6401663.html</a></p><h4 id="python相关"><a href="#python相关" class="headerlink" title="python相关"></a>python相关</h4><p>1、2.6升级2.7：<a href="https://www.cnblogs.com/yaoyuanmengjing/p/7853228.html" target="_blank" rel="noopener">https://www.cnblogs.com/yaoyuanmengjing/p/7853228.html</a></p><p>2、安装3.5.2并与python2共存：<a href="https://www.ywlib.com/archives/96-1.html" target="_blank" rel="noopener">https://www.ywlib.com/archives/96-1.html</a></p><h4 id="输入相关"><a href="#输入相关" class="headerlink" title="输入相关"></a>输入相关</h4><p>1、python造成 input method preferences无效：<a href="http://blog.csdn.net/jaket5219999/article/details/52912321" target="_blank" rel="noopener">http://blog.csdn.net/jaket5219999/article/details/52912321</a></p><p>2、安装Fcitx 4.0.0：<a href="https://www.douban.com/note/319236531/" target="_blank" rel="noopener">https://www.douban.com/note/319236531/</a></p><p>3、设置Fcitx默认：<a href="https://jingyan.baidu.com/article/0320e2c1393a3e1b86507b51.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/0320e2c1393a3e1b86507b51.html</a></p><p>4、ibus开启：<a href="http://blog.csdn.net/zitong_ccnu/article/details/40110583" target="_blank" rel="noopener">http://blog.csdn.net/zitong_ccnu/article/details/40110583</a></p><h4 id="源相关"><a href="#源相关" class="headerlink" title="源相关"></a>源相关</h4><p>1、Nux Dextop源：<a href="http://www.linuxidc.com/Linux/2016-06/132101.htm" target="_blank" rel="noopener">http://www.linuxidc.com/Linux/2016-06/132101.htm</a></p><p>2、yum源解析（详细）：<a href="https://www.cnblogs.com/mchina/archive/2013/01/04/2842275.html" target="_blank" rel="noopener">https://www.cnblogs.com/mchina/archive/2013/01/04/2842275.html</a></p><h4 id="Hexo相关"><a href="#Hexo相关" class="headerlink" title="Hexo相关"></a>Hexo相关</h4><p>gcc升级：<a href="http://www.cnblogs.com/lpbottle/p/install_gcc.html" target="_blank" rel="noopener">http://www.cnblogs.com/lpbottle/p/install_gcc.html</a></p><p>gcc升级：<a href="http://blog.csdn.net/furzoom/article/details/53322510" target="_blank" rel="noopener">http://blog.csdn.net/furzoom/article/details/53322510</a></p><p>gcc升级：<a href="http://blog.csdn.net/zr1076311296/article/details/51334538" target="_blank" rel="noopener">http://blog.csdn.net/zr1076311296/article/details/51334538</a></p><p>Nodejs安装：<a href="https://www.cnblogs.com/lpbottle/p/7733397.html" target="_blank" rel="noopener">https://www.cnblogs.com/lpbottle/p/7733397.html</a></p><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><p>1、/mnt/hgfs没有共享文件夹：<a href="http://www.mamicode.com/info-detail-1655589.html" target="_blank" rel="noopener">http://www.mamicode.com/info-detail-1655589.html</a></p><p>2、Linux就该这么学：<a href="http://www.linuxprobe.com/chapter-00.html" target="_blank" rel="noopener">http://www.linuxprobe.com/chapter-00.html</a></p><h3 id="2、C语言"><a href="#2、C语言" class="headerlink" title="2、C语言"></a><strong>2、C语言</strong></h3><p>1、链表相关笔试题：<a href="http://www.cnblogs.com/qingjiaowoxiaoxioashou/p/6416649.html" target="_blank" rel="noopener">http://www.cnblogs.com/qingjiaowoxiaoxioashou/p/6416649.html</a></p><h3 id="3、GitHub"><a href="#3、GitHub" class="headerlink" title="3、GitHub"></a><strong>3、GitHub</strong></h3><p>1、知乎：<a href="https://www.zhihu.com/question/20070065" target="_blank" rel="noopener">https://www.zhihu.com/question/20070065</a></p><p>2、他的网站里有：<a href="http://youngxhui.github.io/" target="_blank" rel="noopener">http://youngxhui.github.io/</a></p><p>以下，搭建自己的github博客：</p><p>1）配置详细：<a href="https://www.jianshu.com/p/b7886271e21a" target="_blank" rel="noopener">https://www.jianshu.com/p/b7886271e21a</a></p><p>2）很强大的一个：<a href="http://kchen.cc/2016/11/12/hexo-instructions/" target="_blank" rel="noopener">http://kchen.cc/2016/11/12/hexo-instructions/</a></p><p>3）WordPress和Hexo以及md编辑器：<a href="https://www.imooc.com/article/12257" target="_blank" rel="noopener">https://www.imooc.com/article/12257</a></p><p>4）localhost:4000出问题：<a href="http://blog.csdn.net/u012246342/article/details/51543370" target="_blank" rel="noopener">http://blog.csdn.net/u012246342/article/details/51543370</a></p><p>5）Hexo问题总结：<a href="http://blog.csdn.net/wx_962464/article/details/44786929" target="_blank" rel="noopener">http://blog.csdn.net/wx_962464/article/details/44786929</a></p><h3 id="4、blog"><a href="#4、blog" class="headerlink" title="4、blog"></a><strong>4、blog</strong></h3><p>1、<a href="http://www.zipperary.com/" target="_blank" rel="noopener">http://www.zipperary.com/</a></p><p>2、陈皓：<a href="https://coolshell.cn/featured" target="_blank" rel="noopener">https://coolshell.cn/featured</a></p><h3 id="5、其它"><a href="#5、其它" class="headerlink" title="5、其它"></a><strong>5、其它</strong></h3><p>1、msdn：<a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">https://msdn.itellyou.cn/</a></p><p>2、NTFS和FAT32区别：<a href="http://www.ntfsformac.cn/qita-nytqubie.html" target="_blank" rel="noopener">http://www.ntfsformac.cn/qita-nytqubie.html</a></p><p>3、SQL源码剖析：<a href="http://deepfuture.iteye.com/blog/718478" target="_blank" rel="noopener">http://deepfuture.iteye.com/blog/718478</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、Linux&quot;&gt;&lt;a href=&quot;#1、Linux&quot; class=&quot;headerlink&quot; title=&quot;1、Linux&quot;&gt;&lt;/a&gt;&lt;strong&gt;1、Linux&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&quot;命令相关&quot;&gt;&lt;a href=&quot;#命令相关&quot; class=&quot;headerlink&quot; title=&quot;命令相关&quot;&gt;&lt;/a&gt;命令相关&lt;/h4&gt;&lt;p&gt;1、Linux命令大全：&lt;a href=&quot;http://man.linuxde.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://man.linuxde.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2、修改时间查看时间：&lt;a href=&quot;https://www.cnblogs.com/jiu0821/p/5999566.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/jiu0821/p/5999566.html&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="网站收集" scheme="http://yoursite.com/categories/%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/"/>
    
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青匆</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.jingxxn.cn/"/>
  <updated>2018-07-24T08:35:09.581Z</updated>
  <id>http://www.jingxxn.cn/</id>
  
  <author>
    <name>timmy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[网络]网络编程基础-UDP为例</title>
    <link href="http://www.jingxxn.cn/%5B%E7%BD%91%E7%BB%9C%5D%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80-UDP%E4%B8%BA%E4%BE%8B.html"/>
    <id>http://www.jingxxn.cn/[网络]网络编程基础-UDP为例.html</id>
    <published>2018-07-24T08:33:43.000Z</published>
    <updated>2018-07-24T08:35:09.581Z</updated>
    
    <content type="html"><![CDATA[<p>本文只是基于认识的讲述网络编程基础。</p><h3 id="基础认识"><a href="#基础认识" class="headerlink" title="基础认识"></a>基础认识</h3><h4 id="认识IP"><a href="#认识IP" class="headerlink" title="认识IP"></a>认识IP</h4><ul><li>IP地址是在IP协议中用来表示网络中不同的主机的地址</li><li>IPv4是4个字节，32位；IPv6是16个字节，128位。目前通用的是IPv4。</li><li>通常用点分十进制来的字符串来表示IP地址。例如常见的192.168.1.1，每一个点分隔一个字节，范围是0~255</li></ul><p><strong>理解源IP地址和目的IP地址：</strong>源IP地址是发送端的IP地址，目的IP地址是接收端的IP地址。这两个地址指明了数据的来源主机和目的主机。</p><h4 id="认识端口号"><a href="#认识端口号" class="headerlink" title="认识端口号"></a>认识端口号</h4><p>端口号是传输层协议需要的数据。</p><ul><li>端口号是一个2字节的整数，16位。</li><li><strong>端口号用来唯一标识一个网络进程，它可以告诉OS这些数据需要提交给哪一个进程来处理。</strong></li><li>一个端口号只能被一个进程占用。</li></ul><p>我们的数据在网络中传输，通过IP地址，我们可以找到目的主机。但是很遗憾，在目的主机上处理数据的个体是进程。所以我们需要端口号来表示主机中的进程。这样我们的数据才可以准确的交付给网络中的唯一主机上的唯一进程。所以一个进程可以绑定多个端口号，但是一个端口号只能被一个一个进程绑定。</p><a id="more"></a><h4 id="认识套接字"><a href="#认识套接字" class="headerlink" title="认识套接字"></a>认识套接字</h4><p><strong>套接字叫做socket，是一个由IP和端口号组成的结构。通过他，我们可以在网络上找到唯一的主机上的唯一进程，</strong>他是网络传输中的基本入口。在Linux的一切皆文件的思想下，我们在网络中创建了连接，通过打开的socket表示，同时socket用文件描述符描述起来。</p><h4 id="认识网络字节序"><a href="#认识网络字节序" class="headerlink" title="认识网络字节序"></a>认识网络字节序</h4><p><strong>网络字节序指的是多字节的数据在网络中的排序。</strong>比如一个整型数据有四个字节，他的字节次序有两种，一种是低字节数据放在低地址处，这个叫做小端；另一种是低字节数据放在高地址处，这个叫做大端。</p><p>通常我们的主机的字节序是不确定的。有可能出现一个小端的主机将数据发送给大端的主机。这样就需要一种规范，我们规定在网络中的的字节序是按照大端的。这样如果发送端是小端机，发送数据的时候就需要将字节序转换过来，如果是大端机就不需要做处理。这就就可以避免大小端带来的数据错误。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将32位长整型主机字节序转换为网络字节序</span></span><br><span class="line"><span class="keyword">uint32_t</span> htonl(<span class="keyword">uint32_t</span> hostlong);</span><br><span class="line"><span class="comment">//将16位短整型主机字节序转换为网络字节序</span></span><br><span class="line"><span class="keyword">uint16_t</span> htons(<span class="keyword">uint16_t</span> hostshort);</span><br><span class="line"><span class="comment">//将32位长整型网络字节序转换为主机字节序</span></span><br><span class="line"><span class="keyword">uint32_t</span> ntohl(<span class="keyword">uint32_t</span> netlong);</span><br><span class="line"><span class="comment">//将16位短整型网络字节序转换为主机字节序</span></span><br><span class="line"><span class="keyword">uint16_t</span> ntohs(<span class="keyword">uint16_t</span> netshort);</span><br></pre></td></tr></table></figure><p>上述函数就是用来转换字节序的。我们默认32位用于IPv4的转换，16位用于端口号的转换。如果主机是小端机，那么函数会将小端字节序转换为大端字节序；如果是大端机，函数不会有任何作用。</p><h3 id="简单的UDP回显服务器和客户端程序"><a href="#简单的UDP回显服务器和客户端程序" class="headerlink" title="简单的UDP回显服务器和客户端程序"></a>简单的UDP回显服务器和客户端程序</h3><h4 id="部分使用函数"><a href="#部分使用函数" class="headerlink" title="部分使用函数"></a>部分使用函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//用于创建socket接口，返回一个文件描述符。</span><br><span class="line">int socket(int domain, int type, int protocol);</span><br><span class="line">//用于将socket_fd和端口进行绑定。</span><br><span class="line">int bind(int socket, const struct sockaddr* address, socklen_t address_len);</span><br><span class="line">//用于UDP这类无连接的数据发送。</span><br><span class="line">ssize_t sendto(int sockfd, const void* buf, size_t nbytes, int flags, \</span><br><span class="line">                    const struct sockaddr* destaddr, socklent_t destlen);</span><br><span class="line">//用于UDP这类无连接的数据接收。</span><br><span class="line">ssize_t recvfrom(int sockfd, void* restrict buf, size_t len, int flags, \</span><br><span class="line">                    struct sockaddr* addr, socklent_t *addrlen);</span><br></pre></td></tr></table></figure><h4 id="参数类型sockaddr结构解析"><a href="#参数类型sockaddr结构解析" class="headerlink" title="参数类型sockaddr结构解析"></a>参数类型sockaddr结构解析</h4><p>观察上面的函数，会看到一个参数的类型为<code>struct sokaddr*</code>。这个参数是网络编程函数中为了实现类似于<code>void*</code>泛型功能而产生的。(一个地址标识一个特定的通信域的套接字端点，地址格式与这个特定的通信域相关。为了让不同格式地址能够传入到套接字函数中，地址会被强转为一个通用的地址结构sockaddr)</p><p>在Linux中，sockaddr被定义为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct sockaddr&#123;</span><br><span class="line">    sa_family_t sa_family;</span><br><span class="line">    char        sa_data[14];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>sa_family指的是地址类型。</p><p>因特网地址定义在&lt;netinet/in.h&gt;头文件中。在IPv4因特网(AF_INET)中，套接字地址用sockaddr_in表示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">struct sockaddr_in&#123;</span><br><span class="line">    sa_family_t sin_family;</span><br><span class="line">    in_port_t sin_port;</span><br><span class="line">    struct in_addr sin_addr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct in_addr&#123;</span><br><span class="line">    in_addr_t s_addr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>in_addr_t 被定义为uint32_t；in_prot\t被定义为uint16_t；其中sin_port指的是端口号，sin_addr指的是IPv4的IP地址。</p><p>通俗的说，使用IPv4的网络传输，使用struct sockaddr_in 参数。但是使用socket函数的时候，需要强转为struct sockaddr类型。</p><h4 id="UDP服务器"><a href="#UDP服务器" class="headerlink" title="UDP服务器"></a>UDP服务器</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//INADDR_ANY是一个宏，代表0，接收本网段中所有IP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVICE_IP INADDR_ANY</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc != <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usage: ./service Port\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//AF_INET指的是使用IPv4，</span></span><br><span class="line">    <span class="comment">//SOCK_DGRAM指的是使用无连接的不可靠的报文传输协议如UDP</span></span><br><span class="line">    <span class="comment">//最后一个零指的是协议，0代表使用默认协议如SOCK_DGRAM默认UDP</span></span><br><span class="line">    <span class="keyword">int</span> sock = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(sock &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"create socket error, errno is: %d, errstring is: %s\n"</span>, errno, strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化变量local</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">local</span>;</span></span><br><span class="line">    local.sin_family = AF_INET;</span><br><span class="line">    local.sin_port = htons(atoi(argv[<span class="number">1</span>]));</span><br><span class="line">    local.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">socklen_t</span> local_len = <span class="keyword">sizeof</span>(local);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绑定IP和端口号</span></span><br><span class="line">    <span class="keyword">if</span>((bind(sock, (struct sockaddr*)&amp;local, local_len)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"bind socket error, errno is: %d, errstring is: %s\n"</span>, errno, strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">socklen_t</span> client_len = <span class="keyword">sizeof</span>(client);</span><br><span class="line">        <span class="comment">//接收数据</span></span><br><span class="line">        <span class="keyword">ssize_t</span> num = recvfrom(sock, buf, <span class="keyword">sizeof</span>(buf)<span class="number">-1</span>, <span class="number">0</span>, (struct sockaddr *)&amp;client, &amp;client_len);</span><br><span class="line">        <span class="keyword">if</span>(num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            buf[num<span class="number">-1</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//打印数据</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"[%s:%d] : %s\n"</span>, inet_ntoa(client.sin_addr), ntohs(client.sin_port), buf);</span><br><span class="line">            <span class="comment">//退出</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="number">0</span> == strcasecmp(buf, <span class="string">"bye"</span>))&#123;</span><br><span class="line">                <span class="keyword">char</span> bye[] = <span class="string">"Have a nice day\n"</span>;</span><br><span class="line">                sendto(sock, bye, <span class="keyword">sizeof</span>(bye), <span class="number">0</span>, (struct sockaddr *)&amp;client, client_len);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"client exit\n"</span>);</span><br><span class="line">                close(sock);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//发送数据</span></span><br><span class="line">            sendto(sock, buf, <span class="keyword">sizeof</span>(buf)<span class="number">-1</span>, <span class="number">0</span>, (struct sockaddr *)&amp;client, client_len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="UDP客户端"><a href="#UDP客户端" class="headerlink" title="UDP客户端"></a>UDP客户端</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">#include &lt;netinet/in.h&gt;</span><br><span class="line">#include &lt;arpa/inet.h&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc, char* argv[])&#123;</span><br><span class="line">    if(argc != 3)&#123;</span><br><span class="line">        printf(&quot;Usage: ./client ServiceIP ServicePort\n&quot;);</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    //AF_INET指的是使用IPv4，</span><br><span class="line">    //SOCK_DGRAM指的是使用无连接的不可靠的报文传输协议如UDP</span><br><span class="line">    //最后一个零指的是协议，0代表使用默认协议如SOCK_DGRAM默认UDP</span><br><span class="line">    int sock = socket(AF_INET, SOCK_DGRAM, 0);</span><br><span class="line">    if(sock &lt; 0)&#123;</span><br><span class="line">        printf(&quot;create socket error, errno is: %d, errstring is: %s\n&quot;, errno, strerror(errno));</span><br><span class="line">        return 2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    struct sockaddr_in service;</span><br><span class="line">    service.sin_family = AF_INET;</span><br><span class="line">    service.sin_addr.s_addr = inet_addr(argv[1]);</span><br><span class="line">    service.sin_port = htons(atoi(argv[2]));</span><br><span class="line"></span><br><span class="line">    socklen_t service_len = sizeof(service);</span><br><span class="line"></span><br><span class="line">    char buf[1024];</span><br><span class="line"></span><br><span class="line">    while(1)&#123;</span><br><span class="line">        //输入传输的数据</span><br><span class="line">        printf(&quot;Please Enter:&quot;);</span><br><span class="line">        fflush(stdout);</span><br><span class="line">        ssize_t num = read(0, buf, sizeof(buf)-1);</span><br><span class="line">        if(num &gt; 0)&#123;</span><br><span class="line">            buf[num-1] = 0;</span><br><span class="line">            //发送数据</span><br><span class="line">            sendto(sock, buf, sizeof(buf), 0, (struct sockaddr *)&amp;service, service_len);</span><br><span class="line">            //接收回显的数据</span><br><span class="line">            ssize_t num = recvfrom(sock, buf, sizeof(buf)-1, 0, NULL, NULL);</span><br><span class="line">            if(num &gt; 0)&#123;</span><br><span class="line">                buf[num-1] = 0;</span><br><span class="line">                printf(&quot;Echo: %s\n&quot;, buf);</span><br><span class="line">                if(0 == strcasecmp(buf, &quot;Have a nice day\n&quot;))&#123;</span><br><span class="line">                    printf(&quot;client exit\n&quot;);</span><br><span class="line">                    close(sock);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.PHONY:all</span><br><span class="line"></span><br><span class="line">all:service client</span><br><span class="line"></span><br><span class="line">service : service.c</span><br><span class="line">    gcc -o $@ $^</span><br><span class="line"></span><br><span class="line">client : client.c</span><br><span class="line">    gcc -o $@ $^</span><br><span class="line"></span><br><span class="line">.PHONY:clean</span><br><span class="line">clean:</span><br><span class="line">    rm -rf service client</span><br></pre></td></tr></table></figure><h4 id="udp实验截图"><a href="#udp实验截图" class="headerlink" title="udp实验截图"></a>udp实验截图</h4><p>192.168.3.25是我系统当前的IP地址，实验的时候可以使用127.0.0.1这个本地环回地址，也可以使用0.0.0.0代表本机可以使用的全部IP地址。</p><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807241507_906.png-1920.jpg" alt=""></p><h4 id="函数详细解析"><a href="#函数详细解析" class="headerlink" title="函数详细解析"></a>函数详细解析</h4><h5 id="socket函数"><a href="#socket函数" class="headerlink" title="socket函数"></a>socket函数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//创建套接字，在Linux中通常用文件描述符表示。</span><br><span class="line">#include &lt;sys/socket&gt;</span><br><span class="line">int socket(int domain, int type, int protocol);</span><br><span class="line">//成功返回文件描述符，这个跟open函数很像。失败返回-1。</span><br><span class="line">//如果套接字使用完，用close函数可以关闭。</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><p>参数domain指定了通信的特性，常用的域见下图，刚在用的域就是AF_INET，指的是IPv4的因特网域</p><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807241430_88.png-480.jpg" alt="socket domain"></p><p>参数type指的是套接字的类型，常用的类型见下图，刚才用的类型是SOCK_DGRAM(默认是UDP)，还有SOCK_STREAM(默认是TCP)。</p><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807241434_983.png-960.jpg" alt="socket type"></p><p>最后一个参数是协议，通常是0，除非需要特定指定协议。下图是在因特网域中的常用协议。</p><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807241436_910.png-960.jpg" alt="socket protocol"></p><h5 id="shutdown函数"><a href="#shutdown函数" class="headerlink" title="shutdown函数"></a>shutdown函数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//灵活的关闭套接字的I/O</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">int shutdown(int sockfd, int how);</span><br><span class="line">//成功返回0，失败返回-1。</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><p>参数sockfd是套接字文件描述符。</p><p>参数how</p><ul><li>SHUT_WR 关闭写端，无法使用套接字进行写入数据操作</li><li>SHUT_RD 关闭读端，无法使用套接字进行读入数据操作</li><li>SHUT_RDWD 关闭读写，无法使用该套接字进行读写操作</li></ul><p>这个函数跟close不一样，如果使用了close函数用来关闭套接字，这样客户端和服务器端的套接字都会被关闭。但是如果使用shutdown函数的话，就算使用了SHUT_RDWD选项，也只会关闭当前的一端，而对另一端没有影响。因为套接字通信是全双工的。此时另一端依然可以给本端发送数据。关于全双工的理解，可以看这个文章的TCP连接管理中的四次挥手的半关闭状态<a href="https://blog.csdn.net/Mac_timmy/article/details/81102235" target="_blank" rel="noopener"><strong>TCP协议详解</strong></a>。</p><h5 id="地址转换函数"><a href="#地址转换函数" class="headerlink" title="地址转换函数"></a>地址转换函数</h5><p>我们常用的IP地址的格式都是点分十进制的，例如：127.0.0.1；但是在网络上传输的时候，使用的是一串二进制代码。通常我们不手动的转化，而是使用地址转换函数。</p><p><strong>只能用于IPv4的函数：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;arpa/inet.h&gt;</span><br><span class="line">//将IPv4的点分十进制转换为网络使用的in_addr</span><br><span class="line">int inet_aton(const char* strptr, struct in_addr *addrptr);</span><br><span class="line">in_addr_t inet_addr(const char* strptr);</span><br><span class="line">//将网络使用的in_addr转换为IPv4的点分十进制</span><br><span class="line">char* inet_ntoa(struct in_addr inaddr);</span><br></pre></td></tr></table></figure><p><strong>IPv4和IPv6都可以使用的函数：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;arpa/inet.h&gt;</span><br><span class="line">//将点分十进制转换为网络使用的字节序</span><br><span class="line">int inet_pton(int family, const char* strptr, void *addrptr);</span><br><span class="line">//将网络字节序转换为IPv4的点分十进制</span><br><span class="line">const char* inet_ntop(int family, const void* addrptr, char* strptr, size_t len);</span><br></pre></td></tr></table></figure><p><strong>使用示范：</strong></p><p>这里只使用了适用于IPv4的函数，一个是inet_aton；一个是inet_ntoa；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">#include &lt;netinet/in.h&gt;</span><br><span class="line">#include &lt;arpa/inet.h&gt;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    struct sockaddr_in addr;</span><br><span class="line">    inet_aton(&quot;127.0.0.1&quot;, &amp;addr.sin_addr);</span><br><span class="line">    uint32_t* ptr = (uint32_t*)(&amp;addr.sin_addr);</span><br><span class="line">    printf(&quot;addr:%x\n&quot;, *ptr);</span><br><span class="line">    printf(&quot;addr_str:%s\n&quot;, inet_ntoa(addr.sin_addr));</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807241625_599.png-480.jpg" alt="test"></p><p>inet_addr函数的作用和inet_aton一样，但是inet_addr函数有一个问题，如果调用失败，会返回一个INADDR_NONE的常值，这个值是全一，这样就至少有一个IPv4地址不能使用这个函数，通常是255.255.255.255。</p><p>其中inet_aton函数有一个问题，很明显他的返回值是char* 。那么其实是系统给我们创建了一个静态的缓冲区，将结果放入到里面。我们并不需要对这个空间进行释放。<strong>但是不能同时多次调用该函数，最后一次调用的返回值会覆盖前面调用的返回值。</strong></p><p><a href="https://blog.csdn.net/c_base_jin/article/details/60469622" target="_blank" rel="noopener"><strong>inet_addr函数和inet_aton函数的区别</strong></a></p><h5 id="bind函数"><a href="#bind函数" class="headerlink" title="bind函数"></a>bind函数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//将IP地址和端口号进行绑定。</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">int bind(int sockfd, const struct sockaddr* addr, socklent_t len);</span><br><span class="line">//成功返回0，失败返回-1</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><p>sockfd是套接字文件描述符；addr是IP地址，如果是使用IPv4的话，需要将sockaddr_in强转为(struct sockaddr)；len指的是addr的大小，通常用sizeof即可以获得。</p><p><strong>其他：</strong></p><p>一般来说，我们只有在服务器端才会绑定端口号，因为服务器进程的端口号需要被各种客户端所连接，这样就需要固定下来。不然不方便。客户端通常并不会绑定端口号，因为没用什么用处。同时绑定的端口号不小于1024，这下面的端口号都是知名协议使用</p><h5 id="sendto函数"><a href="#sendto函数" class="headerlink" title="sendto函数"></a>sendto函数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">//用于发送数据</span><br><span class="line">ssize_t sendto(int sockfd, const void *buf, size_t len, int flags,</span><br><span class="line">                      const struct sockaddr *dest_addr, socklen_t addrlen);</span><br><span class="line">//成功返回发送的字节数，失败返回-1，错误原因存放于errno</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><p>sockfd是套接字文件描述符；buf是自己开辟的存放数据的缓冲区；len是需要发送的数据字节数；flags是标志位，通常没有特殊需要设置为0，即不使用；dest_addr指的是发送的目的套接字的地址；addrlen是dest_addr的大小。</p><p>flags标志位，sendto跟函数send基本一样，send比sendto少了最后两个参数，通常用于TCP面向连接的网络通信。如果将sendto的最后两个参数设置为NULL，那么作用跟send一样。</p><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807241608_792.png-960.jpg" alt=""></p><h5 id="refrom函数"><a href="#refrom函数" class="headerlink" title="refrom函数"></a>refrom函数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">//用于接收数据</span><br><span class="line">ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags,</span><br><span class="line">                       struct sockaddr *src_addr, socklen_t *addrlen);</span><br><span class="line">//成功返回接收的个数，失败返回-1，错误原因放于errno</span><br></pre></td></tr></table></figure><p>跟sendto基本一样。</p><p>如果没有可以用的数据或者对方的数据已经按序结束，返回0。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li>UNIX环境高级编程</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文只是基于认识的讲述网络编程基础。&lt;/p&gt;
&lt;h3 id=&quot;基础认识&quot;&gt;&lt;a href=&quot;#基础认识&quot; class=&quot;headerlink&quot; title=&quot;基础认识&quot;&gt;&lt;/a&gt;基础认识&lt;/h3&gt;&lt;h4 id=&quot;认识IP&quot;&gt;&lt;a href=&quot;#认识IP&quot; class=&quot;headerlink&quot; title=&quot;认识IP&quot;&gt;&lt;/a&gt;认识IP&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;IP地址是在IP协议中用来表示网络中不同的主机的地址&lt;/li&gt;
&lt;li&gt;IPv4是4个字节，32位；IPv6是16个字节，128位。目前通用的是IPv4。&lt;/li&gt;
&lt;li&gt;通常用点分十进制来的字符串来表示IP地址。例如常见的192.168.1.1，每一个点分隔一个字节，范围是0~255&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;理解源IP地址和目的IP地址：&lt;/strong&gt;源IP地址是发送端的IP地址，目的IP地址是接收端的IP地址。这两个地址指明了数据的来源主机和目的主机。&lt;/p&gt;
&lt;h4 id=&quot;认识端口号&quot;&gt;&lt;a href=&quot;#认识端口号&quot; class=&quot;headerlink&quot; title=&quot;认识端口号&quot;&gt;&lt;/a&gt;认识端口号&lt;/h4&gt;&lt;p&gt;端口号是传输层协议需要的数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;端口号是一个2字节的整数，16位。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;端口号用来唯一标识一个网络进程，它可以告诉OS这些数据需要提交给哪一个进程来处理。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;一个端口号只能被一个进程占用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们的数据在网络中传输，通过IP地址，我们可以找到目的主机。但是很遗憾，在目的主机上处理数据的个体是进程。所以我们需要端口号来表示主机中的进程。这样我们的数据才可以准确的交付给网络中的唯一主机上的唯一进程。所以一个进程可以绑定多个端口号，但是一个端口号只能被一个一个进程绑定。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.jingxxn.cn/categories/Linux/"/>
    
      <category term="network" scheme="http://www.jingxxn.cn/categories/Linux/network/"/>
    
    
  </entry>
  
  <entry>
    <title>重定向函数</title>
    <link href="http://www.jingxxn.cn/%E9%87%8D%E5%AE%9A%E5%90%91%E5%87%BD%E6%95%B0.html"/>
    <id>http://www.jingxxn.cn/重定向函数.html</id>
    <published>2018-07-22T06:50:01.000Z</published>
    <updated>2018-07-22T07:44:47.297Z</updated>
    
    <content type="html"><![CDATA[<p>Linux 中进行文件描述符的重定向可以使用两个函数：dup函数和dup2函数，其中还有一个dup3函数，但是这个是Linux后面版本添加的，不是所有的Linux内核都支持，在这里不讨论。</p><p>在Linux系统中约定文件描述符 0、1、2 对应标准输入、标准输出、标准错误，默认开启。</p><h4 id="dup"><a href="#dup" class="headerlink" title="dup()"></a>dup()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">int dup(int fd);</span><br></pre></td></tr></table></figure><p>使用dup()函数的时候，参数是新的文件描述符期望指向的文件描述符。返回文件描述符表中最小的没有被使用的文件描述符。</p><p>如果我们的fd除了默认打开的0、1、2之外，没有被使用的。我们调用dup(1)，那么最小的没有被使用的fd = 3 就会指向跟fd = 1的同一个文件表。</p><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807221531_754.png-960.jpg" alt="dup(1)"></p><a id="more"></a><p>他的做法就类似以下做法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fcntl(1, F_DUPFD, 0);   //fcntl函数用来改变已经打开文件的属性。</span><br></pre></td></tr></table></figure><h4 id="dup2"><a href="#dup2" class="headerlink" title="dup2()"></a>dup2()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">int dup2(int fd, int fd2);</span><br></pre></td></tr></table></figure><p>参数中fd指的是希望被改变的文件描述符，fd2是期望指向的旧的文件描述符。如果fd已经被使用，那么就关闭它。如果fd = fd2，返回fd2但是不关闭。<br>dup2()函数的做法跟dup一样，不同点是dup2()函数可以指定期望改变的fd，而不是去最小未被使用的fd。如果要我们的fd = 3也指向fd = 1的话。调用如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dup2(3, 1)；</span><br></pre></td></tr></table></figure><p>他的做法类似以下做法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">close(3);</span><br><span class="line">fcntl(3, F_DUPFD, 1);</span><br></pre></td></tr></table></figure><p>但是跟上面两个函数调用有点不同的是，dup2()函数的操作是原子性的。分两个函数调用的中间可能会出现其他函数的调用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux 中进行文件描述符的重定向可以使用两个函数：dup函数和dup2函数，其中还有一个dup3函数，但是这个是Linux后面版本添加的，不是所有的Linux内核都支持，在这里不讨论。&lt;/p&gt;
&lt;p&gt;在Linux系统中约定文件描述符 0、1、2 对应标准输入、标准输出、标准错误，默认开启。&lt;/p&gt;
&lt;h4 id=&quot;dup&quot;&gt;&lt;a href=&quot;#dup&quot; class=&quot;headerlink&quot; title=&quot;dup()&quot;&gt;&lt;/a&gt;dup()&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int dup(int fd);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用dup()函数的时候，参数是新的文件描述符期望指向的文件描述符。返回文件描述符表中最小的没有被使用的文件描述符。&lt;/p&gt;
&lt;p&gt;如果我们的fd除了默认打开的0、1、2之外，没有被使用的。我们调用dup(1)，那么最小的没有被使用的fd = 3 就会指向跟fd = 1的同一个文件表。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p3ax8ersb.bkt.clouddn.com/201807221531_754.png-960.jpg&quot; alt=&quot;dup(1)&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.jingxxn.cn/categories/Linux/"/>
    
      <category term="method" scheme="http://www.jingxxn.cn/categories/Linux/method/"/>
    
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="http://www.jingxxn.cn/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95.html"/>
    <id>http://www.jingxxn.cn/排序算法.html</id>
    <published>2018-07-10T02:05:01.000Z</published>
    <updated>2018-07-16T11:21:48.537Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://dsqiu.iteye.com/blog/1707423" target="_blank" rel="noopener"><strong>参考一：全面的排序总结(动图来源之一)</strong></a></p><p><a href="https://blog.csdn.net/qq_34992845/article/details/75142676#t9" target="_blank" rel="noopener"><strong>参考二：画图的部分排序总结(代码参考，总结参考)</strong></a></p><p><a href="https://www.cnblogs.com/onepixel/articles/7674659.html" target="_blank" rel="noopener"><strong>参考三：十大经典排序算法（动图演示)(动图来源之二)</strong></a></p><p>排序的分类有很多种，有很多的排序方法，这里只列举了七八种常见的排序算法。</p><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807101014_321.png-960.jpg" alt="分类"></p><h3 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h3><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p><strong>冒泡排序的思路(升序)：</strong></p><ul><li>比较相邻的两个元素，如果第一个比第二个元素值要大，交换两者位置。</li><li>指向第二个元素。</li><li>一趟比较下来，最大的元素应该位于序列的最尾端</li><li>进行下一趟比较，此时就不需要将最大的元素纳入范围，因为它已经在适合的位置了。</li><li>重复直到全部完成。</li></ul><p>如图：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201807141459_17.gif-480.jpg" alt="冒泡排序"></p><p><strong>代码如下：</strong><br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = size; i &gt; <span class="number">0</span>; -- i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i<span class="number">-1</span>; ++ j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = arr[j];</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>优化：</strong></p><p>1、记住最后一次的交换位置<br>因为每一趟的最后一次交换，证明这个位置之后的数据都是大于当前的。同时我们还可以通过标志来记录是否发生了交换，如果有一趟没有发生交换，说明序列已经有序。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = size;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> change = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = size; i &gt; <span class="number">0</span>; -- i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; index<span class="number">-1</span>; ++ j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = arr[j];</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = tmp;</span><br><span class="line">                change = j+<span class="number">1</span>;</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        index = change;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、改变冒泡的方向<br>因为之前冒泡的方向是固定的，但是如果出现了不对称的情况，有的时候反过来冒泡可以减少大量的时间。</p><p>比如：1 2 3 4 5 0；如果是从前向后冒泡，需要n-1次，但是如果是从后往前冒泡，只需要一次。反过来：5 0 1 2 3 4；如果从前向后只需要一次，从后向前需要n-1次。所以为了解决这种不对称性的问题，我们可以每走一趟，就将方向反过来冒泡。</p><p>如图(这种改进也称为鸡尾酒排序)：</p><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807101413_82.gif-960.jpg" alt="方向变换"></p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSortOP</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> high = size - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(low &lt; high)&#123;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//从左向右</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = low; i &lt; high; ++ i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] &gt; arr[i+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = arr[i];</span><br><span class="line">                arr[i] = arr[i+<span class="number">1</span>];</span><br><span class="line">                arr[i+<span class="number">1</span>] = tmp;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        -- high;</span><br><span class="line">        <span class="comment">//从右向左</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = high; i &gt; low; -- i)&#123;</span><br><span class="line">             <span class="keyword">if</span>(arr[i] &lt; arr[i<span class="number">-1</span>])&#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = arr[i];</span><br><span class="line">                arr[i] = arr[i<span class="number">-1</span>];</span><br><span class="line">                arr[i<span class="number">-1</span>] = tmp;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ++ low;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>复杂度：</strong></p><p>时间复杂度：平均复杂度：O(n²)；最坏情况：O(n²)；最好情况：O(n)；</p><p>空间复杂度：O(1)</p><p>虽然我们进行了优化，但是总的来说，并没有很大的提升空间。对于完全逆序的序列，依然是最坏的情况。</p><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>快速排序是冒泡的升级版本，我们冒泡的时候，是每次将最大值或最小值放入合适的位置。其实我们可以选准一个基准值，然后把比他小的放到左边，比他大的放到右边，这样我们就缩小的范围。即基准值左边的值一定比他小，右边的值一定比他大。然后利用这个性质，分为左右两个区间，这里使用了分治的思想。</p><p><strong>快速排序思路(升序)：</strong></p><ul><li>从序列中选出一个基准值。</li><li>将序列之后的每一个成员和基准值比较，实现比基准值小的在左边，大的在右边。这一趟结束之后，基准值位于两者之间。</li><li>根据基准值的位置缩小区间，分为左边和右边区间，递归左右区间。</li><li>一直到最后的区间只有一个元素或者区间左边大于右边结束。</li></ul><p>如图：(上图是左右指针法，下图是前后指针法)</p><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807101437_913.gif-960.jpg" alt="快速排序1"><br><img src="http://p3ax8ersb.bkt.clouddn.com/201807141502_793.gif-480.jpg" alt="快速排序2"></p><p><strong>快速排序的方法：</strong></p><p>一般来说，我们将快速排序分为三种方法，分别是挖坑法、左右指针法、前后指针法。其中左右指针法和挖坑法很相似，前后指针法有点绕。</p><p><strong>挖坑法(此处选择基准值从最右端选取)：</strong></p><p>步骤如下：</p><ul><li>选取基准值，用变量保存，同时此处作为第一个坑。</li><li>此时从最左端开始寻找第一个比基准值大或等于的元素，找到就将值填入第一个坑。将该位置作为第二个坑</li><li>此时从右向左寻找第一个比基准值小或者等于的元素，找到就将值填入第二个坑。将该位置作为第三个坑。</li><li>一直到左右指向同一个元素，将该值和基准值交换，同时划分左右区间，递归左右区间的元素。</li></ul><p><strong>挖坑法代码如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> key = arr[high];  <span class="comment">//第一个坑处于high处</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(low &gt;= high)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> left = low;</span><br><span class="line">    <span class="keyword">int</span> right = high;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right &amp;&amp; arr[left] &lt;= key)&#123;</span><br><span class="line">            ++ left;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[right] = arr[left];  <span class="comment">//将左边的元素填入右边的坑中</span></span><br><span class="line">        <span class="keyword">while</span>(left &lt; right &amp;&amp; arr[right] &gt;= key)&#123;</span><br><span class="line">            -- right;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[left] = arr[right];  <span class="comment">//将右边的元素填入左边的坑中</span></span><br><span class="line">    &#125;</span><br><span class="line">    arr[left] = key;  <span class="comment">//将基准值填入最后一个坑中</span></span><br><span class="line">    QuickSort(arr, low, left<span class="number">-1</span>);</span><br><span class="line">    QuickSort(arr, left+<span class="number">1</span>, high);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>左右指针法(选择最右元素为基准值)：</strong></p><p>步骤如下：</p><ul><li>从最左边开始找到第一个比基准值大的元素，然后再从最右边找到第一个比基准值小的元素。交换两者，此时完成第一次交换。</li><li>只要左边的指针没有等于右边的指针，循环继续。</li><li>一直到两者相等，此时指针指向的元素肯定比基准值大，因为是左边先走的，相等的时候肯定是大的。交换此值和基准值。</li><li>划分区间，递归左右区间。</li></ul><p><strong>左右指针代码如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">void QuickSort2(int arr[], int low, int high)&#123;</span><br><span class="line">    int key = arr[high];</span><br><span class="line"></span><br><span class="line">    if(low &gt;= high)&#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    int left = low;</span><br><span class="line">    int right = high;</span><br><span class="line"></span><br><span class="line">    while(left &lt; right)&#123;</span><br><span class="line">        while(left &lt; right &amp;&amp; arr[left] &lt;= key)&#123;</span><br><span class="line">            ++ left;</span><br><span class="line">        &#125;</span><br><span class="line">        while(left &lt; right &amp;&amp; arr[right] &gt;= key)&#123;</span><br><span class="line">            -- right;</span><br><span class="line">        &#125;</span><br><span class="line">        if(left != right)&#123;</span><br><span class="line">            swap(arr[left], arr[right]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //此处交换的时候，不要和key交换，应该是序列中与基准值相同的值。也就是这里的最右元素。</span><br><span class="line">    swap(arr[left], arr[high]);</span><br><span class="line">    QuickSort2(arr, low, left-1);</span><br><span class="line">    QuickSort2(arr, left+1, high);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>前后指针法：</strong></p><p>前后指针法的思想见下图：(前后指针法比较绕，如果不理解，可以画图验证，就懂了。)<br><img src="http://p3ax8ersb.bkt.clouddn.com/201807101631_211.png-960.jpg" alt="前后指针法"></p><p><strong>前后指针法代码如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort3</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(low &gt;= high)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> key = arr[high];</span><br><span class="line">    <span class="keyword">int</span> cur = low;</span><br><span class="line">    <span class="keyword">int</span> prev = cur<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cur &lt;= high)&#123;</span><br><span class="line">        <span class="comment">//cur找小于key的值，找到了停下。</span></span><br><span class="line">        <span class="keyword">while</span>(cur &lt;= high &amp;&amp; arr[cur] &gt; key)&#123;</span><br><span class="line">            ++ cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//cur跟++ prev的值进行比较，如果相同，证明没有拉开距离，就不需要交换</span></span><br><span class="line">        <span class="comment">//也就是cur的下一个就遇到了小于key的值，所以跟prev的距离为一</span></span><br><span class="line">        <span class="keyword">if</span>(++ prev != cur)&#123;</span><br><span class="line">            swap(arr[prev], arr[cur]);</span><br><span class="line">        &#125;</span><br><span class="line">        ++ cur;</span><br><span class="line">    &#125;</span><br><span class="line">    QuickSort3(arr, low, prev<span class="number">-1</span>);</span><br><span class="line">    QuickSort3(arr, prev, high);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优化1：</strong></p><p>快速排序是一个很优的算法，但是如果遇到某些特殊情况，基准值每次选到的都是最小或者最大的值，就会出现退化的情况。比如：使用左右指针法，基准值从最右选取，序列为升序。此时每次选到的基准值都是最大的，产生的两个区间，有一个必然为空，而且每次都需要遍历整个区间。这时候的时间复杂度就是O(n²)。</p><p>解决这个问题的一种方法是三数取中法。所谓三数取中法指的是，在序列中选出最左，中间，最右的三个位置的元素进行比较，然后取出值在中间的那个元素，跟基准值的选取值进行交换。比如三数取中法取出的中间元素是arr[mid]，基准值的取值是arr[end]，交换这两者。这样就不会出现每次选到的都是最大的元素值，或者最小的元素值了。</p><p><strong>三数取中法代码如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Mid</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> middle = low + (high-low)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(arr[low] &lt; arr[high])&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[high] &lt; arr[middle])&#123;</span><br><span class="line">            <span class="keyword">return</span> high;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(arr[middle] &lt; arr[low])&#123;</span><br><span class="line">            <span class="keyword">return</span> low;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> middle;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[low] &lt; arr[middle])&#123;</span><br><span class="line">            <span class="keyword">return</span> low;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(arr[middle] &lt; arr[high])&#123;</span><br><span class="line">            <span class="keyword">return</span> high;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> middle;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用三数取中法的时候，只需要在选取key值得时候替换就可以，如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> index = Mid(arr, low, high);</span><br><span class="line">swap(arr[index], arr[high]);</span><br><span class="line"><span class="keyword">int</span> key = arr[high];</span><br></pre></td></tr></table></figure><p>这样我们的基准值就不会是一直是大的或者一直是小的这种情况，从而导致效率的大大降低。</p><p><strong>优化2：</strong></p><p>其实，当我们的数据处于比较小的情况，我们使用快速排序不如使用插入排序。因为我们划分子区间的时候，使用的是递归(当然可以使用非递归的形式，利用栈模拟)。十几个元素划分的递归有点多，这样是一种浪费。我们可以直接使用插入排序实现，可以减少栈桢的开销。<br>修改代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个小区间一般是10~20之间。</span></span><br><span class="line"><span class="keyword">if</span>(high - low &gt; <span class="number">15</span>)&#123;</span><br><span class="line">    <span class="comment">//QuickSort();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//InsertSort();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>复杂度：</strong></p><p>快速排序的时间复杂度：平均情况和最好情况都是O(nlog₂n)；最坏的情况是O(n²)；</p><p>空间复杂度是：O(nlog₂n)；</p><p>时间复杂度为什么是O(nlog₂n)；因为递归的时间复杂度的计算是递归的深度*每次递归的复杂度。我们递归的深度是log₂n，因为我们每次都是取一半去进行下次递归，好比有n个元素，每次只看一半的元素，这样一直到只剩下一个元素，我们需要看多少次。也就是2的m次方等于n，求m是多少。这跟求二叉树的深度，二分查找等问题是一样的思路。然后每次递归我们都需要对当前区间的每一个元素进行比较，复杂度是O(n)。所以最后的时间复杂度是O(nlog₂n)；至于最坏的情况，是因为快速排序退化成了冒泡排序。</p><p><a href="https://mp.weixin.qq.com/s/070nYGokM96aorZn6MZTDA" target="_blank" rel="noopener"><strong>时间复杂度的简易分析</strong></a></p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><h4 id="选择排序-1"><a href="#选择排序-1" class="headerlink" title="选择排序"></a>选择排序</h4><p><strong>选择排序的思路(升序)</strong></p><ul><li>顾名思义，通过选择获得最小的元素，将其放入到序列起始位置。</li><li>将剩下的元素以此类推。</li><li>直到结束。</li></ul><p>如图：</p><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807141500_733.gif-480.jpg" alt="选择排序"></p><p><strong>代码如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> min = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++ i)&#123;</span><br><span class="line">        min = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; size; ++ j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &lt; arr[min])&#123;</span><br><span class="line">                min = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(min != i)&#123;</span><br><span class="line">            swap(arr[min], arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优化</strong></p><p>之前的选择排序只是从前向后排序，每次只排序一个最大值。我们可以同时排序最小值和最大值。这样当元素有n个的时候，我们可以优化最坏情况为循环n/2次。但是时间复杂度并没有减少，数量级还在同一个级别。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSortOP</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> end = size - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(; begin &lt; end; ++ begin, -- end)&#123;</span><br><span class="line">        <span class="keyword">int</span> min = begin;</span><br><span class="line">        <span class="keyword">int</span> max = begin;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = begin; i &lt;= end; ++ i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[max] &lt; arr[i])&#123;</span><br><span class="line">                max = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(arr[min] &gt; arr[i])&#123;</span><br><span class="line">                min = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(max != end)&#123;</span><br><span class="line">            swap(arr[max], arr[end]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//防止min在end，max在begin。</span></span><br><span class="line">        <span class="comment">//然后出现交换两次的情况，这样就等于没有交换</span></span><br><span class="line">        <span class="keyword">if</span>(end == min)&#123;</span><br><span class="line">            min = max;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(min != begin)&#123;</span><br><span class="line">            swap(arr[min], arr[begin]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>复杂度：</strong></p><p>时间复杂度：最好、最坏、平均的时间复杂度都是O(n²)；</p><p>空间复杂度：O(1)；</p><h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><p><strong>堆排序的思路(升序)：</strong></p><ul><li>创建最大堆</li><li>开始堆排序：从堆顶获取最大值，取出来，跟序列的最后一个元素交换，这样就让最大的值处于序列的最后面。</li><li>进行堆调整，让他重新为最大堆。</li><li>一直到所有的值都被处理。</li></ul><p>如图：</p><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807141503_548.gif-480.jpg" alt="堆排序"></p><p>关于堆的知识点如下：<br><a href="http://www.jingxxn.cn/%E5%A0%86%28heap%29%E7%9A%84%E5%AE%9E%E7%8E%B0.html"><strong>堆的详细解释</strong></a></p><p><strong>代码如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Down</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> index, <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> parent = index;</span><br><span class="line">    <span class="keyword">int</span> child = parent*<span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(child &lt; size)&#123;</span><br><span class="line">        <span class="keyword">if</span>(child+<span class="number">1</span> &lt; size &amp;&amp; arr[child] &lt; arr[child+<span class="number">1</span>])&#123;</span><br><span class="line">            ++ child;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(arr[child] &gt; arr[parent])&#123;</span><br><span class="line">            swap(arr[child], arr[parent]);</span><br><span class="line">            parent = child;</span><br><span class="line">            child = parent*<span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeadSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="comment">//建堆</span></span><br><span class="line">    <span class="comment">//为什么是size-1-1，因为size-1指的是最后一个的下标。</span></span><br><span class="line">    <span class="comment">//再然后完全二叉树的最后一个父节点的计算式为最后一个孩子节点-1除于2。</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = (size<span class="number">-1</span><span class="number">-1</span>)/<span class="number">2</span>; i &gt;= <span class="number">0</span>; -- i)&#123;</span><br><span class="line">        Down(arr, i, size);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> end = size - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(end &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        swap(arr[<span class="number">0</span>], arr[end]);</span><br><span class="line">        <span class="comment">//交换完之后，需要重新调整为最大堆，但是最需要调整一次，</span></span><br><span class="line">        <span class="comment">//因为此时只有堆顶元素不符合大堆的原则。</span></span><br><span class="line">        Down(arr, <span class="number">0</span>, end);</span><br><span class="line">        -- end;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>复杂度：</strong></p><p>时间复杂度：平均、最好、最坏的情况都是O(nlog₂n)；</p><p>空间复杂度：O(1)；</p><p>时间复杂度分析：堆排序的消耗主要在于初始化创建堆和每次调整堆。创建堆的时间复杂度是：O(n)；调整堆的时间复杂度是：O(nlog₂n)；两者相加得到最终的时间复杂度为O(nlog₂n)；</p><p><a href="https://blog.csdn.net/qq_34228570/article/details/80024306" target="_blank" rel="noopener"><strong>堆排序的时间复杂度分析</strong></a></p><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><h4 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h4><p><strong>插入排序的思路(升序)：</strong></p><ul><li>从序列的最左边选取第一个元素，以它为基准，从第二个开始跟第一个比较。</li><li>如果大，向前一个元素比较，一直到比较比前面一个小，插入到他的后面。</li><li>依次循环。</li></ul><p>如图：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201807141500_73.gif-480.jpg" alt="插入排序"></p><p><strong>插入排序代码如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size<span class="number">-1</span>; ++ i)&#123;</span><br><span class="line">        <span class="keyword">int</span> j = i+<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//记录下来当前值</span></span><br><span class="line">        <span class="keyword">int</span> tmp = arr[j];</span><br><span class="line">        <span class="keyword">while</span>(j &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tmp &lt; arr[j<span class="number">-1</span>])&#123;</span><br><span class="line">                arr[j] = arr[j<span class="number">-1</span>];</span><br><span class="line">                -- j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将当前值赋给插入的位置</span></span><br><span class="line">        arr[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优化</strong></p><p>这个优化的方式叫做折半插入排序。也就是我们在进行插入排序的时候，进行到当前的值，说明前面区间肯定已经有序。所以就没有必要依次向前寻找，我可以通过二分查找的方式快速定位。但是实际上的时间复杂度并没有降低，而是稍微的提升了一些效率。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二分查找函数，如果arr中有跟key相同的元素，返回该元素的最后一个下标</span></span><br><span class="line"><span class="comment">//如果没有，返回最后一个小于key的下一个下标。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BinarySearch</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> size, <span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> high = size - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//等于不能少</span></span><br><span class="line">    <span class="keyword">while</span>(low &lt;= high)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = low + (high-low)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(arr[mid] &lt; key)&#123;</span><br><span class="line">            low = mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(arr[mid] &gt; key)&#123;</span><br><span class="line">            high = mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> next = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(next &lt; size &amp;&amp; arr[next] == arr[mid])&#123;</span><br><span class="line">                ++ next;</span><br><span class="line">                ++ mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSortBinary</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size<span class="number">-1</span>; ++ i)&#123;</span><br><span class="line">        <span class="keyword">int</span> j = i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> tmp = arr[j];</span><br><span class="line">        <span class="keyword">if</span>(tmp &lt; arr[j<span class="number">-1</span>])&#123;</span><br><span class="line">            <span class="keyword">int</span> index = BinarySearch(arr, j, tmp);</span><br><span class="line">            <span class="keyword">while</span>(j &gt; index)&#123;</span><br><span class="line">                arr[j] = arr[j<span class="number">-1</span>];</span><br><span class="line">                -- j;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[index] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>复杂度：</strong></p><p>时间复杂度：平均、最坏情况是：O(n²)；最好的情况是：O(n)；</p><p>空间复杂度：O(1)；</p><p>最好情况的时间复杂度是有序的，因为不需要交换，只需要遍历一遍。最坏和平均情况的时间复杂度是逆序的情况，遍历一遍序列的同时，每一个都需要一直到序列的第一个进行插入，相当于二次遍历。</p><h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h4><p>希尔排序是针对于直接插入排序的一种优化方案。因为直接插入排序的最坏情况时间复杂度为O(n²)，我们通过取间隔的方法，让大数据很快的从最前面移动到后面，不像直插一样，移动n个。从而减小交换的次数。</p><p><strong>希尔排序的思路(升序)：</strong></p><ul><li>选取步长，根据步长划分区间。同时保证步长最后可以为一。</li><li>交换间隔步长的元素，利用插入排序。</li><li>每次进行完一趟排序，将步长减小，直到步长为一。此时进行的就是直接插入排序。</li></ul><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807141501_325.gif-960.jpg" alt="希尔排序"></p><p><strong>代码如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> space = size;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//space最后一直都是1</span></span><br><span class="line">    <span class="comment">//当space为1的时候，进行的就是插入排序。只是此时的序列已经基本有序，大的成员都在后面。</span></span><br><span class="line">    <span class="keyword">while</span>(space &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        space = space / <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//让每一个元素都进行了排序。</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> front = <span class="number">0</span>; front &lt; size-space; ++ front)&#123;</span><br><span class="line">            low = front;</span><br><span class="line">            <span class="keyword">int</span> tmp = arr[low+space];</span><br><span class="line">            <span class="comment">//跳跃式的插入排序，进行排序的元素之间隔了一个space的大小。</span></span><br><span class="line">            <span class="keyword">while</span>(low &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[low] &gt; tmp)&#123;</span><br><span class="line">                    arr[low+space] = arr[low];</span><br><span class="line">                    low -= space;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[low+space] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>复杂度：</strong></p><p>时间复杂度：平均情况O(n^(1.3))；最好情况O(n)；最坏情况O(n²)；</p><p>空间复杂度：O(1)；</p><p>在这里来说，希尔排序的时间复杂度不好算，需要步长决定。希尔排序的最坏情况就是当序列有序的情况下。</p><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><h4 id="归并排序-1"><a href="#归并排序-1" class="headerlink" title="归并排序"></a>归并排序</h4><p><strong>归并排序的思路：</strong></p><ul><li>首先先执行划分区间，一直划分到区间只有一个元素为止。</li><li>在划分的区间内进行比较排序。</li><li>一直到结束为止。</li></ul><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807161013_566.gif-960.jpg" alt="归并排序"></p><p><strong>归并排序代码如下：</strong></p><p>归并函数有两种实现方式，递归是一种，非递归是一种。递归版本需要两个函数，一个用于递归划分区间，另一个用于两个区间的合并排序。这里需要一个辅助空间，防止将原来的数据被覆盖。非递归版本利用迭代</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归版本</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span>* tmp, <span class="keyword">int</span> left1, <span class="keyword">int</span> right1, <span class="keyword">int</span> left2, <span class="keyword">int</span> right2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = left1;</span><br><span class="line">    <span class="keyword">int</span> front = left1;</span><br><span class="line">    <span class="keyword">int</span> end = right2;</span><br><span class="line">    <span class="keyword">while</span>(left1 &lt;= right1 &amp;&amp; left2 &lt;= right2)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[left1] &lt;= arr[left2])&#123;</span><br><span class="line">            tmp[i++] = arr[left1++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(arr[left1] &gt; arr[left2])&#123;</span><br><span class="line">            tmp[i++] = arr[left2++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(left1 &lt;= right1)&#123;</span><br><span class="line">        tmp[i++] = arr[left1++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(left2 &lt;= right2)&#123;</span><br><span class="line">        tmp[i++] = arr[left2++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(front &lt;= end)&#123;</span><br><span class="line">        arr[front] = tmp[front];</span><br><span class="line">        front ++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span>* tmp, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &gt;= right)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    MergeSort(arr, tmp, left, mid);</span><br><span class="line">    MergeSort(arr, tmp, mid+<span class="number">1</span>, right);</span><br><span class="line">    Merge(arr, tmp, left, mid, mid+<span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> *tmp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>])];</span><br><span class="line">    Print(arr, <span class="keyword">sizeof</span>(arr)/ <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]));</span><br><span class="line">    MergeSort(arr, tmp, <span class="number">0</span>, <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>])<span class="number">-1</span>);</span><br><span class="line">    Print(arr, <span class="keyword">sizeof</span>(arr)/ <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]));</span><br><span class="line">    <span class="keyword">delete</span>[] tmp;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非递归版本</span></span><br><span class="line"><span class="comment">//来源于网路</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSortNoR</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">list</span>, <span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, left_min, left_max, right_min, right_max, next;</span><br><span class="line">    <span class="keyword">int</span> *tmp = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; length; i *= <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">for</span> (left_min = <span class="number">0</span>; left_min &lt; length - i; left_min = right_max)&#123;</span><br><span class="line">                    right_min = left_max = left_min + i;</span><br><span class="line">                    right_max = left_max + i;</span><br><span class="line">                    <span class="keyword">if</span> (right_max &gt; length)</span><br><span class="line">                            right_max = length;</span><br><span class="line">                    next = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">while</span> (left_min &lt; left_max &amp;&amp; right_min &lt; right_max)</span><br><span class="line">                            tmp[next++] = <span class="built_in">list</span>[left_min] &gt; <span class="built_in">list</span>[right_min] ? <span class="built_in">list</span>[right_min++] : <span class="built_in">list</span>[left_min++];</span><br><span class="line">                    <span class="keyword">while</span> (left_min &lt; left_max)</span><br><span class="line">                            <span class="built_in">list</span>[--right_min] = <span class="built_in">list</span>[--left_max];</span><br><span class="line">                    <span class="keyword">while</span> (next &gt; <span class="number">0</span>)</span><br><span class="line">                            <span class="built_in">list</span>[--right_min] = tmp[--next];</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="built_in">free</span>(tmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优化</strong></p><p>归并排序的优化，第一，使用递归版本的时候，我们可以在当成员个数比较少的时候，转换为使用插入排序，这样可以减小栈桢的开销。第二，不使用递归版本，使用迭代版本。</p><p><strong>复杂度：</strong></p><p>时间复杂度：平均、最好、最坏情况都是：O(nlog₂n)</p><p>空间复杂度：O(n)或者是O(1)；</p><p>时间复杂度一直都是O(nlog₂n)；因为不管是什么情况都是要采取一样的步骤，不因为成员是否有序而改变。空间复杂度是因为使用了辅助空间。如果我们不使用辅助空间，直接在源数据空间内交换的话，就是O(1)。</p><h3 id="分布排序"><a href="#分布排序" class="headerlink" title="分布排序"></a>分布排序</h3><h4 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h4><p>基数排序其实是桶排序的扩展，对于整形来说，基数排序首先先从个位开始，根据个位的值大小放入指定的数组中，数组的大小是十，下表表示值。然后过渡到十位、百位。这样依次放入取出排序，就可以了。</p><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807141504_995.gif-960.jpg" alt="基数排序"></p><h4 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h4><p>计数排序适合于大于零并且数据之间都比较相近的情况，当确定数据的大小，开辟一个以最大值为下标的数组。将数组初始化为全0；然后依次遍历序列让数组对应的下标的值加一。最后将数组从头到尾扫描，数据是多少代表对应下标有多少个。</p><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807141504_316.gif-960.jpg" alt="计数排序"></p><h3 id="复杂度、稳定性集合"><a href="#复杂度、稳定性集合" class="headerlink" title="复杂度、稳定性集合"></a>复杂度、稳定性集合</h3><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807161712_919.png-960.jpg" alt="总结"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://dsqiu.iteye.com/blog/1707423&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;参考一：全面的排序总结(动图来源之一)&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_34992845/article/details/75142676#t9&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;参考二：画图的部分排序总结(代码参考，总结参考)&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/onepixel/articles/7674659.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;参考三：十大经典排序算法（动图演示)(动图来源之二)&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;排序的分类有很多种，有很多的排序方法，这里只列举了七八种常见的排序算法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p3ax8ersb.bkt.clouddn.com/201807101014_321.png-960.jpg&quot; alt=&quot;分类&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;交换排序&quot;&gt;&lt;a href=&quot;#交换排序&quot; class=&quot;headerlink&quot; title=&quot;交换排序&quot;&gt;&lt;/a&gt;交换排序&lt;/h3&gt;&lt;h4 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;冒泡排序的思路(升序)：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比较相邻的两个元素，如果第一个比第二个元素值要大，交换两者位置。&lt;/li&gt;
&lt;li&gt;指向第二个元素。&lt;/li&gt;
&lt;li&gt;一趟比较下来，最大的元素应该位于序列的最尾端&lt;/li&gt;
&lt;li&gt;进行下一趟比较，此时就不需要将最大的元素纳入范围，因为它已经在适合的位置了。&lt;/li&gt;
&lt;li&gt;重复直到全部完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如图：&lt;br&gt;&lt;img src=&quot;http://p3ax8ersb.bkt.clouddn.com/201807141459_17.gif-480.jpg&quot; alt=&quot;冒泡排序&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码如下：&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="knowledge" scheme="http://www.jingxxn.cn/categories/knowledge/"/>
    
      <category term="C/C++" scheme="http://www.jingxxn.cn/categories/knowledge/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>TCP协议详解</title>
    <link href="http://www.jingxxn.cn/%5B%E7%BD%91%E7%BB%9C%5DTCP%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90.html"/>
    <id>http://www.jingxxn.cn/[网络]TCP协议解析.html</id>
    <published>2018-07-09T07:23:34.000Z</published>
    <updated>2018-07-21T15:46:00.045Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCP概述及特点"><a href="#TCP概述及特点" class="headerlink" title="TCP概述及特点"></a>TCP概述及特点</h2><p>TCP称为传输控制协议，是一种面向字节流的可靠的传输协议，是传输层的协议。</p><p><strong>特点：</strong></p><ul><li><strong>TCP是面向连接的传输层协议，所谓面向连接就是需要在使用TCP协议之前先建立连接、使用完TCP协议之后再断开连接。</strong>那么如何理解连接的建立和断开呢？</li><li><strong>TCP是点对点的，不能一对多、多对一、多对多。</strong></li><li><strong>TCP提供可靠交付的的服务。传输的数据保证无差错、不丢失、不重复、并且按需到达。</strong></li><li><strong>TCP提供全双工通信。</strong>连接双方可以随时随地的相互发送数据，实现的基础是设置有接收缓冲区和发送缓冲区。</li><li><strong>TCP面向字节流。所谓面向字节流指的是：虽然上层的应用层协议会发送一个一个的数据报，但是在TCP这里，他会转化为一连串没有结构的字节流。</strong>当TCP根据机制判断需要上交数据的时候，就会将当前缓冲区的数据上交，但是此时并不能保证应用层需要的数据报都在这些字节流中，所以需要使用TCP协议的应用层软件具有识别字节流的能力。</li></ul><a id="more"></a><h2 id="TCP报头"><a href="#TCP报头" class="headerlink" title="TCP报头"></a>TCP报头</h2><p>因为TCP要保证可靠性，所以TCP的报头会比较复杂，实现的功能也比较多。</p><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807181734_86.png-960.jpg" alt="TCP报头"></p><p>下面简单介绍一下报头各个字段的作用。</p><ul><li>源端口号和目的端口号指定了发送端的进程和接收端的进程</li><li><strong>序号和确认序号，字节流中每一个字节都标上了序号，确认序号用来告诉对端在当前序号之前、包括当前序号的字节流我都接收了，接下来请从下一个序号开始给我发送</strong>。序号的范围是0~2^32-1，如果到头了从0开始循环，这里可以表示4G的数据，旧序号的数据早已经到达了对端了。<strong>其中序号不是固定从零开始的，是有一个随机初始值ISN，连接的时候，从ISN开始。当进行三次握手建立连接的时候，一个很重要的活动就是确定ISN。</strong>比如：发送端发送了一个报文，包含的数据是：”Linux”；如果第一个序号给的是100，那么’x’对应的序号是104，’\0’对应序号是105。当接收端接收到这些字符之后，给发送端回一个报文的时候，他的确认序号就是：106，接收端希望发送端发送序号为106及其后面的报文。这个是全双工和可靠性的基础。</li><li>4位首部长度，首部长度指的是TCP报头的长度，他的单位是4字节。比如首部长度是：0101，那么指的是报头长度为20字节，这里代表了该TCP报头没有选项这个字段。所以通过计算得知，TCP报头最长是60个字节，出去选项字段之前的固定20字节，选项有40字节的扩展空间，但是一般选项默认没有。</li><li>保留6位，没有使用</li><li><strong>URG、ACK、PSH、RST、SYN、FIN六位标志位。</strong></li><li><strong>URG标志位</strong>：URG=1表示将紧急指针有效，它告诉系统，这个报文里面有紧急数据，让这些数据优先到达，而不用按顺序。该标志位与16位紧急指针搭配使用。比如使用Ctrl+C中断程序的时候。</li><li><strong>ACK标志位</strong>：ACK=1表示该报文是确认报文，用于对请求的确认。一般来说在建立之后的所以报文的ACK都为1，同时确认报文也会捎带数据用于交换。</li><li><strong>PSH标志位</strong>：PSH=1表示提醒接收端，让它把接收缓冲区的数据快速取走，而不是等到缓冲区满的时候才读取。</li><li><strong>RST标志位</strong>：RST=1表示复位报文。当发送端以为连接已经建立，而接收端认为连接未建立的时候。如果发送端给接收端发送数据，发送端会回一个RST=1的报文，这样发送端知道连接无效，于是断开重新请求连接。同时还可以用在拒绝打开一个链接的时候，接收端给发送端发送一个复位报文。</li><li><strong>SYN标志位</strong>：SYN=1表示这是一个请求连接的报文，如果SYN=1，ACK=0，表示请求连接，而SYN=1，ACK=1，表示现在处于TCP建立连接的时候。</li><li><strong>FIN标志位</strong>：FIN=1表示这是一个请求连接断开的报文，用在TCP断开连接的时候。</li><li><strong>16位窗口大小，窗口指的是接收端接收缓冲区的剩余大小，TCP可以通过窗口大小来协调发送端的发送能力。</strong></li><li>16位校验和，发送端填充，使用CRC校验，接收端校验失败，表示数据报有问题。这里校验包括了TCP报头和数据。</li><li>16位紧急指针，当URG=1的时候有效，用于指向紧急数据的位置。就算接收端窗口为0，也可以接收紧急指针指向的数据。</li><li>最大40位选项：一般不使用，其中比较常用的有：MSS（数据字段的最大长度)选项，MSS应该尽量大，只要在ip层没有进行分片就好，这样的开销是最小的，<strong>在以太网中MSS是1500字节-40字节=1460字节，该选项只有在创建连接的过程中有效</strong>； 窗口扩大选项，窗口最大是2^16-1，通过这个选项可以增大，<strong>该选项只有在创建连接的过程中有效</strong>；时间戳值选项，用两个功能。第一个：因为序号是循环使用的，如果当速率很大的时候，会出现序号重复使用的情况，我们就可以通过时间戳将新旧报文段分开；第二个功能：计算往返时间RRT，发送的时候将时间放入，返回的时候带回来，这样就可以计算出往返的时间了。</li></ul><h2 id="理解TCP的连接管理机制"><a href="#理解TCP的连接管理机制" class="headerlink" title="理解TCP的连接管理机制"></a>理解TCP的连接管理机制</h2><p>通常我们说三次握手、四次挥手，这里指的是TCP创建连接和断开连接的情况。</p><h3 id="连接管理全图"><a href="#连接管理全图" class="headerlink" title="连接管理全图"></a>连接管理全图</h3><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807192310_410.png-960.jpg" alt="全图"></p><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><h4 id="链接的工作"><a href="#链接的工作" class="headerlink" title="链接的工作"></a>链接的工作</h4><p>TCP连接的建立采用客户端服务器模式（C/S），其中主动发起请求连接的一端叫做客户端，被动等待连接的一端叫做服务端。连接的时候主要用于完成一下三件工作：</p><ul><li>保证双方都可以确认对方的存在。</li><li>双方协商一些参数（<strong>MSS值、是否使用选项中的窗口扩大选项、时间戳选项等</strong>），其中MSS值以双方的较小值为准。见下图：</li><li>给传输实体进行资源分配。因为维护链接需要使用到TCB传输控制模块，所以要进行资源分配，这里有时间和内存的消耗。</li></ul><p>双方协商MSS：</p><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807190846_791.png-480.jpg" alt="MSS"></p><h4 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h4><p>三次握手的具体情况如图：</p><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807191203_700.png-1920.jpg" alt="三次握手"><br>在进行三次握手之前有一个先决条件，就是服务端要处于等待链接的状态。服务器端首先创建传输控制模块TCB，阻塞式等待客户端的链接，此时服务器端处于LISTEN状态。(让服务器端进入LISTEN状态的是应用层的listen()监听函数的调用。)</p><p>作为主动发起连接请求的客户端，首先也创建传输控制模块TCB，然后向服务器端发送连接请求报文。<strong>报文首部中SYN=1，表示这是一个请求连接报文；其中seq序号等于系统根据当前时间计算获得的随机值ISN；如（seq=x）</strong>然后客户端处于SYN_SENT表示同步已发送状态，等待服务器端的回应。<strong>其中SYN=1的报文不能携带数据，但是却要消耗一个序号。</strong>(当客户端应用层调用connect()请求链接函数的时候，客户端向连接另一端发送连接请求)</p><p>服务器端收到连接请求报文之后，如果同意建立连接，就向客户端发送确认报文。<strong>在确认报文中SYN=1，ACK=1，表示这是一个连接建立确认报文；其中seq序号等于系统根据当前时间计算获得的随机值ISN，这个值是服务器端的起始序号，跟客户端的不一样，如（seq=y）；此时还有一个确认序号ack=x+1，这个是对客户端发送的请求报文的确认，表示x+1之前序号的字节流都已经正确获得。</strong>最后服务器端状态转为SYN_RCVD表示同步已接收。<strong>这里依然不能携带数据，但是要消耗一个序号。</strong></p><p>客户端接收到请求确认报文，需要给服务器端发送该报文的确认报文。<strong>在这个确认报文中ACK=1，表示这是一个确认报文；其中seq=x+1，从第一个报文的下一个序号开始；ack=y+1，确认服务器端的y序号以前的字节流都已经准确接收。</strong>这个报文可以携带数据，在这之后状态改为ESTABLISHED，表示连接在客户端看来已经建立。如果服务器端接收到了这个确认报文，状态也会改变为ESTABLISHED，表示在服务器端看来这个连接也已经建立。(当connect返回合法的时候，客户端进入ESTABLISHED状态；当accept返回合法的时候，服务器端进入ESTABLISHED状态)</p><p>到这里三次握手完成，双方都认为连接建立，此时可以进行数据传输。</p><h4 id="三次握手出现报文丢失的情况分析："><a href="#三次握手出现报文丢失的情况分析：" class="headerlink" title="三次握手出现报文丢失的情况分析："></a>三次握手出现报文丢失的情况分析：</h4><p>在这里将客户端连接请求报文称为一号报文，服务器确认报文称为二号报文，客户端对确认报文的再次确认称为三号报文。</p><ol><li>如果客户端请求连接报文丢失，那么客户端根本不会收到。但是对于客户端来说，它一直在等待服务器的确认报文。超过一定时间之后，客户端会认为报文丢失，从而触发超时重传机制。</li><li>如果服务器确认报文丢失，那么客户端会收不到确认报文，如果达到了超时的情况，依然会触发超时重传；同时，服务器也收不到对确认报文的再次确认，服务器会认为对方没有收到确认报文，超过时间也会触发超时重传。但是客户端已经计时很久了，触发超时重传的时间比服务器端要早得多。对于重复的报文，他们的序号是一样的，很容易做到去重的工作。</li><li>如果是最后一个确认报文的再次确认报文丢失，那么对于客户端没有影响，因为他认为报文已经发出，单方面认为连接已经建立，但是对于服务端，他会认为二号的确认报文丢失，所以会给客户端再发送一个，这样客户端就知道服务器端没有接收到，就会重新发一个。</li></ol><h4 id="为什么不是二次握手，四次握手？"><a href="#为什么不是二次握手，四次握手？" class="headerlink" title="为什么不是二次握手，四次握手？"></a>为什么不是二次握手，四次握手？</h4><p>这个时候需要考虑最后一次报文的发送。如果是二次握手，只要客户端发送请求，然后服务器端发送确认报文这两步骤就实现了连接建立。问题就出在这里，如果服务器端的确认报文丢失，服务器端认为确认报文已经发出，所以连接应该被建立，为了维护这个连接，服务器端会创建TCB传送控制块；但是对于客户端来说没有收到确认报文，他会认为是请求建立报文丢失，连接建立失败，所以会重新发送请求报文给服务器端。如果有一个恶意的程序，他只进行建立连接，但是不接收确认报文就会导致服务器端创建了大量的无用的TCB，消耗了大量的内存和时间，造成内存泄漏。这是不友好的。对于四次握手等偶数次也是如此理解。</p><p>那三次握手为什么就可以解决？依然看最后一次的三号报文，对请求确认的再次确认报文。如果丢失，最终只会导致客户端认为连接建立，TCB在客户端创建，对于客户端来说，这次失败了再申请就好了。影响不大。至于五次等为什么不考虑是因为三次已经够了。</p><h3 id="断开"><a href="#断开" class="headerlink" title="断开"></a>断开</h3><p>一般认为客户端是主动断开连接的一端，但是也会出现服务器端主动断开连接的情况，通常是服务器端出现故障或者客户机在保活机制的时间都没有给服务器端给予回应。这里以客户端主动断开连接为叙述。断开的过程，很好的体现了TCP连接是全双工的性质。</p><h4 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h4><p>四次挥手的具体情况如下：</p><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807191204_704.png-960.jpg" alt="四次挥手"></p><p>客户端发送请求断开连接报文。<strong>在报文中FIN=1，表示这是一个请求断开连接报文；seq=u，序号是u，是上一个报文序号+1。然后客户端的状态进入FIN_WAIT_1，此时报文不携带数据，但是还是需要消耗一个序号。</strong>(客户端调用colse()函数，进行连接断开操作，同时停止数据传入)</p><p>服务器端收到断开报文，进行确认。在<strong>报文中ACK=1，表示这是一个确认报文；seq=v，报文序号是v，是上一个报文序号+1；ack=u+1，对客户端报文序号进行确认。</strong>然后进入CLOSE_WAIT状态。如果客户端收到确认报文，进入FIN_WAIT_2状态，等待服务器端发送的连接释放报文。</p><p>此时，TCP连接处于一个变化的过程。客户端与服务器端的连接已经断开，但是服务器端与客户端的连接还没有断开。因为TCP连接是全双工的，所以连接是双方独立的连接。<strong>处于这个状态的连接叫做半关闭状态。此时客户端以及没有数据给服务器端发送，但是如果服务器端还有剩下的数据需要发送，客户端依然能够接收到。</strong>这个状态会保持一阵子。</p><p>如果服务器端没有需要给客户端发送的数据，那么服务器端的应用程序就会通知服务器端释放TCP连接。<strong>发送断开连接报文，FIN=1，ACK=1，代表这是一个请求连接断开报文；seq=w，之所以跟上面的seq=v不一样，是因为在半关闭状态，有可能发送了数据；ack=u+1，确认报文依然是u+1，因为客户端已经没有发送新的数据过来了。</strong>此时服务器端进入LAST_ACK状态。(应用层程序调用close函数)</p><p>如果客户端接收到了报文，进入TIME_WAIT状态。<strong>发送一个确认报文，其中ACK=1，表示这个是一个确认报文；seq=u+1，没有数据传入，还是之前那个报文序号；ack=w+1，对服务器端的报文进行确认。</strong>如果服务器端接收到报文进入CLOSED状态。<strong>但是TIME_WAIT状态下的客户端需要等待2*MSL时间才进入CLOSED状态。</strong></p><h4 id="TIME-WAIT状态"><a href="#TIME-WAIT状态" class="headerlink" title="TIME_WAIT状态"></a>TIME_WAIT状态</h4><p>主动发送断开连接的一端，如客户端，在最后一次发送了确认报文之后，进入TIME_WAIT状态。<strong>这个状态要维持2*MSL时间，</strong>才进入CLOSED状态，此时才可以进行重新连接。<strong>MSL指的是最长报文段寿命，也就是一个报文从发送之后到对端接收所需要的最长时间，在这个时间内一定会到达，如果没有到达，对端就当做该报文被丢弃，重新请求发送。</strong></p><p>那为什么主动断开连接一端(以客户端为例)要等待2*MSL的时间呢？原因有两个：</p><ul><li>第一个，如果报文在MSL时间内，没有到达服务器端，服务器端没有收到确认报文，会进行超时重传，再次发送断开连接请求报文，这样客户端还可以再次发送确认报文。</li><li>第二个，在2*MSL的时间内，本次连接的报文会全部在网络中失效，可以保证就算是在网络中迟到的报文，不会误入其他使用同一个端口的连接中。</li></ul><p><strong>解决服务器端处于TIME_WAIT状态的等待时间</strong>：</p><p>如果服务器端主动断开连接，服务器端在2*MSL时间内是处于TIME_WAIT状态的，只要不是CLOSED状态，服务器端就没有办法进行bind绑定，之所以不能bind绑定的根本原因是端口号还被占用着。如果我们的业务连接时间很短，但是单位时间的处理数量很大，这样服务器端发现了大量的不活跃用户，在一定时间会主动断开连接，这样就导致很多的TIME_WAIT状态。有很大的可能会导致端口不够使用。</p><p>我们通过setsockopt()函数进行设置，这个函数有一个选项SO_REUSEADDR，我们可以通过该选项使我们创建IP地址不同但是端口号相同的多个socket描述符。使用方法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//socket();</span></span><br><span class="line"><span class="keyword">int</span> opt = <span class="number">1</span>;</span><br><span class="line">setsockopt(listen_fd, SOL_SOCKET, SO_REUSEADDR, &amp;opt, <span class="keyword">sizeof</span>(opt));</span><br><span class="line"><span class="comment">//bind();</span></span><br></pre></td></tr></table></figure><h4 id="半关闭"><a href="#半关闭" class="headerlink" title="半关闭"></a>半关闭</h4><p>其实很遗憾的是，根据上面的四次挥手，我们调用的是close()函数，这个函数并不会让我们进入这么一个半关闭的状态。close()函数的作用是直接让系统释放socket()函数返回的文件描述符被释放，两端的连接都会被断开。我们知道TCP连接时全双工的，对于一端关闭接可以分为以下三种情况：1、完全关闭；2、只关闭向外写；3、只关闭往里读。<strong>使用shutdown()函数就可以控制关闭的口。只用使用这个函数的断开连接，才能出现半关闭状态。</strong></p><p><a href="http://lib.csdn.net/article/computernetworks/17264" target="_blank" rel="noopener"><strong>close函数和shutdown函数详细解析</strong></a></p><h4 id="同时关闭"><a href="#同时关闭" class="headerlink" title="同时关闭"></a>同时关闭</h4><p>有一种特殊的情况，当TCP连接的两端同时请求连接断开的时候，就会出现。此时会出现CLOSING这种特殊的状态。</p><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807191506_768.png-480.jpg" alt="closing"></p><h4 id="三次挥手"><a href="#三次挥手" class="headerlink" title="三次挥手"></a>三次挥手</h4><p>一般我们的断开连接使用四次挥手，但是也会出现三次挥手的情况。有两种情况会出现三次挥手：</p><ul><li>客户端的FIN报文跟随最后一个发送的数据发送到了服务器端。这样就少了一个报文</li><li>如果将服务器端的确认报文和发送给客户端的FIN报文合并一起发送，这样也少了一个报文</li></ul><h4 id="为什么使用四次挥手"><a href="#为什么使用四次挥手" class="headerlink" title="为什么使用四次挥手"></a>为什么使用四次挥手</h4><p>这个是因为利用TCP全双工的性质，实现更加弹性的传输。其实我们可以通过三次挥手就完成这个任务。还记得有一个半关闭的状态么，就是客户端已经关闭了连接，但是服务器端没有关闭连接的状态。在这个状态下服务器端还可以将没有发送完的数据传输给客户端。如果是三次挥手就不能实现这个弹性变化了。</p><h2 id="可靠传输"><a href="#可靠传输" class="headerlink" title="可靠传输"></a>可靠传输</h2><p>TCP的报文段是交付给IP层，但是IP层并不提供可靠传输，只是提供尽最大努力的传输。所以需要TCP提供可靠传输。怎么样的传输是可靠的，第一传输的过程中不错，第二接收端永远可以接收发送端的数据，不管发送端有多快。TCP要实现可靠传输，就需要实现类似于上述条件的过程。</p><p><strong>TCP是全双工的，为了叙述简单，这里只讨论一个方向</strong></p><h3 id="确认应答机制"><a href="#确认应答机制" class="headerlink" title="确认应答机制"></a>确认应答机制</h3><p>确认应答机制就是，发送端个接收端发送一个报文，必须等到接收端确认之后，发送端才会发送下一个报文。如果接收端没有返回确认报文，发送端会在设定的时间内一直等待。</p><h4 id="无差错情况"><a href="#无差错情况" class="headerlink" title="无差错情况"></a>无差错情况</h4><p>主机A给主机B发送1~1000的数据，等到主机B确认应答下一个是1001的时候，主机A再发送数据101~2000。</p><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807201351_842.png-480.jpg" alt="ACK"></p><h4 id="出现差错"><a href="#出现差错" class="headerlink" title="出现差错"></a>出现差错</h4><p>有两种情况：</p><ol><li>主机B通过检测，返现报文是错误的，将其丢弃。然后什么都不做</li><li>主机A的报文在网络传输的时候就已经丢失了，主机B什么都不知道。</li></ol><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807201358_344.png-480.jpg" alt="B丢弃错误报文"></p><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807201355_588.png-480.jpg" alt="ACK出现差错"></p><p><strong>此时主机A在规定的一段时间内没有收到确认报文，主机A就认为刚才发送的报文丢失了，因此就会重新将报文发送一次。这个就叫做超时重传。</strong>要实现超时重传，需要做到以下几点：</p><ol><li>主机A给每一个发送的报文都设定一个超时计时器</li><li>在发送之前，保留一份副本，只有在收到报文确认的情况下才将报文副本清除</li><li>对每一个报文都必须要有一个序号</li><li>选择一个合适的超时计时器时间，这个时间一般比数据传输的平均往返时间要长一点，不太好确认。</li></ol><h4 id="确认丢失和确认迟到"><a href="#确认丢失和确认迟到" class="headerlink" title="确认丢失和确认迟到"></a>确认丢失和确认迟到</h4><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807201408_318.png-1920.jpg" alt="确认丢失和确认迟到"></p><ul><li><strong>确认丢失：</strong>上图a，主机A给主机B发送成功，但是主机B的确认报文丢失了。主机A在规定时间内没有收到确认报文，触发超时重传。此时主机B又收到了同一个报文(通过序号可以确认是同一个报文)，于是将重复收到的这个报文丢弃，然后给主机A重新发送一个确认报文。</li><li><strong>确认迟到：</strong>上图b，主机B对主机A的确认报文因为网络原因迟到了，此时主机A收到了这个报文，并将它丢弃，什么事情也不做。</li></ul><p>上面的确认应答和重传机制叫做自动重传请求ARQ，这里的重传是自动触发的，不需要接收方请求重传，是发送方超过了规定时间自动重传。</p><h4 id="超时重传的时间确定"><a href="#超时重传的时间确定" class="headerlink" title="超时重传的时间确定"></a>超时重传的时间确定</h4><p>超时时间不能设定的太短，不然就会频繁的发送重复的报文，这是一种浪费。时间也不能设定的太长，这样会影响整体的重传效率。TCP考虑到网络传输的不确定性，所以会动态的计算这个超时时间。</p><p>Linux中超时时间以500ms为一个单位控制，每次判断超市重发的时间都是500ms的整数倍。如果重发一次得不到应答，就会等待2*500ms之后进行重传。如果还是等不到应答就会等待4*500ms重传，以指数形式递增。累计到一定的重传次数，TCP认为网络或者主机出现故障，强制关闭连接。</p><h3 id="连续ARQ协议"><a href="#连续ARQ协议" class="headerlink" title="连续ARQ协议"></a>连续ARQ协议</h3><p>自动重传请求ARQ特点是实现简单，但是他的缺点就是效率低。发送端需要等到当前报文被确认的时候才发送下一个，在接收到报文这段时间内，发送端没有任何操作。为了提高传输效率，我们可以一次性发送多条数据，这样就可以大大提高性能，也就是所谓的流水线传输。</p><h4 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h4><p>这里需要介绍一个概念，叫做窗口。我们在讨论TCP报头的时候提到过一个字段叫做16位窗口大小，那个窗口就是该窗口，窗口的实际意义是对端的接收缓冲区还剩下多大的空间用于接收数据。如下图，窗口大小就是4000字节，指的就是主机B的接收缓冲区有4000字节的大小，然后主机B通过报头中的窗口大小告诉主机A，这样主机A就知道他可以不需要担心的发送4000字节对端也可以装的下。</p><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807201618_28.png-480.jpg" alt="窗口"></p><p>有了窗口的概念，我们就可以实现一种机制，不再是发送一个报文就进行一次确认。在窗口范围内的数据，我们可以一次性的发送，而不需要等到对方的确认。这样就提高了效率。</p><ul><li>窗口大小指的是无需等待确认应答而可以继续发送数据的最大值，上图中的窗口大小就是4000字节（四个段）</li><li>发送前四个段的时候，不需要等待任何ACK，直接发送。</li><li>收到第一个ACK后，滑动窗口向后移动，继续发送第五个段的数据。</li><li>操作系统内核为了维护这个滑动窗口，需要开辟发送缓冲区，记录当前还有哪些数据没有应答，只有确认应答过的数据，才会从缓冲区中删除。</li><li>窗口越大，则网络的吞吐率就越大。</li></ul><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807212324_770.png-960.jpg" alt="滑动窗口"></p><p>在上图中，以第三个步骤来说，1~2000的数据是已经发送并且被确认的；2001~6000的数据是已经发送但是没有确认的；6001之后的数据是还没有发送的。</p><h4 id="丢包问题的解决"><a href="#丢包问题的解决" class="headerlink" title="丢包问题的解决"></a>丢包问题的解决</h4><p><strong>情况一：报文丢失</strong></p><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807212325_289.png-960.jpg" alt="报文丢失"></p><ul><li>图中1001~2000段报文丢失。</li><li>主机A在发送往后的报文的时候，收到的报文确认是“下一个是1001”，而不是对当前的报文进行确认。</li><li>如果主机A连续三次收到这个相同的确认，主机A会对1001~2000段报文进行重发。</li><li>这个时候主机B接收到1001~2000段报文，接下来发送的确认报文不是“下一个是2001”，而是“下一个报文是7001”，因为这之前的报文都已经收到了，确认要从最新的开始。</li></ul><p>其实这种机制属于<strong>拥塞控制的快重传机制，因为他不需要等到超时时间到了才重传，而是连续三次收到确认报文就进行了重传，这样效率大大提升。</strong></p><p><strong>情况二：确认应答报文丢失</strong></p><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807212326_473.png-960.jpg" alt="确定应答报文丢失"></p><p>这种情况不需要担心，因为我们可以通过后续的确认来保证前面的报文已经收到了。这一种<strong>机制叫做累计确认。这个机制只需要对按序到达的最后一个报文进行确认，这样有好处有坏处：好处就是不用对确认丢失的报文重新发送报文。坏处就是不能给发送端正确的反映出接收方已经正确接受了所以报文的信息。</strong></p><p>比如：如果主机A发送了五个报文，其中第三个报文丢失了（注意不是确认报文丢失），这样主机B只能确认前两个报文是确认到达的。主机A没法知道第三个报文之后的报文主机B是否收到，所以只好将后面三个报文全部发送一遍。这样叫做回退。说明当网络质量不好的时候，累计确认会起到负作用。</p><h2 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h2><h3 id="利用滑动窗口实现流量控制"><a href="#利用滑动窗口实现流量控制" class="headerlink" title="利用滑动窗口实现流量控制"></a>利用滑动窗口实现流量控制</h3><p>我们知道接收端的接受能力是有限的，因为数据存放在接受缓冲区中，以什么样一个速度读取数据是由上端的应用层程序决定。这样如果当发送端的发送数据很快，而接收端的数据读取很慢的时候，接收端无法接收后面的数据。这时继续发送数据的话，就会导致丢包的问题，所以流量控制是十分重要的。<strong>流量控制就是TCP根据接收端的处理能力来决定发送端的发送速度。</strong></p><ul><li>接收端将自己可以接受的缓冲区大小放入TCP首部的窗口大小字段，通过ACK通知发送端。</li><li>窗口大小字段越大，说明网络的吞吐量越好。</li><li>接收端一旦发现自己的缓冲区快满了，就会讲窗口大小设置成一个更小的值通知给发送端。</li><li>发送端接收到这个窗口之后，就会减慢自己的发送速度。</li><li>如果接收缓冲区满了，接收端就会将窗口置为0，这样发送端就会发送新的数据，但是需要定期的发送一个窗口探测数据段，让接收端把窗口大小告诉发送端。</li></ul><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807212327_749.png-960.jpg" alt="窗口变化"></p><p>考虑一种情况，如果主机B有了新的空间，他会给主机A发送一个窗口更新通知。但是很遗憾的是这个报文丢失了，主机A没有收到。这时会处于一个局面：主机A在等待主机B发送窗口更新报文，主机B在等待主机A发送新的报文。此时主机A的窗口探测报文就发挥了作用，它可以打破这个死锁局面。</p><p>主机A里面设置了一个持续计时器，用于发送零窗口探测报文段的计时。</p><p><strong>当接收端的窗口为0的时候， 有以下三个报文还是必须接收的：</strong></p><ul><li>零窗口探测报文段</li><li>确认报文段</li><li>携带紧急数据的报文段</li></ul><h3 id="考虑传输效率"><a href="#考虑传输效率" class="headerlink" title="考虑传输效率"></a>考虑传输效率</h3><p><strong>Nagle算法：</strong>指的是即使发送端还有需要发送的数据，但如果这部分的数据很大好的话，就进行延迟发送的一种处理机制。只有当以下两个条件满足一个的时候才能发送数据：</p><ul><li>已发送的数据都收到了确认应到</li><li>可以发送最大段长度（MSS）的数据</li></ul><p>如果上面两个条件都不满足就等待一段时间之后再进行数据发送。这样可以提升网络利用率。但是这样会有一定的数据延迟，一般来说机械控制或者窗口系统会关闭该算法的使用。</p><h4 id="延迟应答"><a href="#延迟应答" class="headerlink" title="延迟应答"></a>延迟应答</h4><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807212328_382.png-960.jpg" alt="延迟应答"></p><p>如果主机B在接收到数据之后立刻返回ACK应答，这样返回的窗口可能会比较小。例如：</p><ul><li>假设主机B的缓冲区为1M，一次收到了700K的数据，如果此时立刻应答返回的窗口是300K</li><li>但是实际上处理的速度会很快，10ms之内就将700K的数据消费了</li><li>此时主机B的处理能力还没有到达自己的极限，即使窗口返回大一点也可以处理得过来</li><li>如果主机B稍等一会再应答，比如等20ms再应答，这样返回的窗口大小就是1M</li></ul><p>但是并不是所有的情况都会采用延迟应答的。</p><ul><li>数量限制：每隔N个包就必须应答一次</li><li>时间限制：超过最大延迟应答时间就必须应答一次</li></ul><h4 id="捎带应答"><a href="#捎带应答" class="headerlink" title="捎带应答"></a>捎带应答</h4><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807212331_296.png-960.jpg" alt="捎带应答"></p><p>这个很好理解，当主机A给主机B发送了数据(“你好吗？”)之后，主机B需要给主机A发送确认报文，然后还要回数据(“挺好的，你呢？”)。此时就可以将数据和确认报文一起发送，这样就减少了一个报文的消耗。</p><h2 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h2><p>TCP已经有了滑动窗口可以控制数据的发送速度，可以高效可靠的发送大量的数据。但是还有一个问题，如果在开始阶段就发送大量的数据，依然有可能引发问题。<strong>拥塞</strong>指的是：在某段时间之内，如果对网络中某一个资源的需求超过了该资源所能提供的可用部分，整个网络的性能就要变坏。如果此时依然发送大量的数据，就会让性能大大降低。所以我们需要拥塞控制。</p><p>但是TCP是如何知道网络状况好还是不好呢？通常如果出现了大量丢包的情况就说明网络状况在这个时间段是不太好的，现在的网络传输质量很好，一般是不会出现丢包的。</p><p>TCP常用的拥塞控制算法有四个：慢开始、拥塞避免、快重传、快恢复。</p><h3 id="慢开始和拥塞避免"><a href="#慢开始和拥塞避免" class="headerlink" title="慢开始和拥塞避免"></a>慢开始和拥塞避免</h3><h4 id="慢开始"><a href="#慢开始" class="headerlink" title="慢开始"></a>慢开始</h4><p>发送方维护这一个叫做<strong>拥塞窗口的状态变量(cwnd)</strong>，拥塞窗口的大小取决于网络状态，同时动态的变化。cwnd的上限是2*MSS</p><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807212332_228.png-960.jpg" alt="慢开始"></p><p>这个cwnd一开始的时候等于1，每次收到一个ACK的时候cwnd+1。这样我们的cwnd是指数级增长的，他增长的速度只是在一开始的时候慢，在后面的时候会很快。每次发送方在发送数据报文的时候，TCP会选取拥塞窗口和接收端的窗口之间较小的一个作为实际发送的窗口大小。</p><p>这样增长的cwnd很快就会变得很大，这样发送的数据如果接受缓冲区无限大的话，TCP传输的数据也是很大的。依然有可能会发生网络拥塞。为了不让cwnd增长的太快，TCP设定了一个<strong>慢开始阈值ssthresh</strong>，当cwnd的值超过了ssthresh的值的时候，慢开始算法结束，进入拥塞避免算法。</p><h4 id="拥塞避免"><a href="#拥塞避免" class="headerlink" title="拥塞避免"></a>拥塞避免</h4><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807212332_636.png-960.jpg" alt="拥塞避免"></p><p>一般来说ssthresh有一个初始值16，当cwnd超过了ssthresh的时候，TCP没法送cwnd个报文，cwnd只增加一，这就是拥塞避免的<strong>加法增大</strong>。</p><p>无论是在慢开始阶段还是在拥塞避免阶段，如果TCP判断网络出现了拥塞，TCP会让ssthres = cwnd/2；cwnd = 1；这个就是拥塞避免的<strong>乘法减小</strong>。</p><h3 id="快重传和快恢复"><a href="#快重传和快恢复" class="headerlink" title="快重传和快恢复"></a>快重传和快恢复</h3><h4 id="快重传"><a href="#快重传" class="headerlink" title="快重传"></a>快重传</h4><p>快重传在前面的可靠传输中的连续ARQ协议中已经讲过，就是在传送数据的时候，如果出现发送端丢包的情况，接收端会一直回丢包确认序号的确认报文。发送端连续三次收到这个确认报文之后就会立刻重发这个丢失报文，而不会等到超时重传。</p><h4 id="快恢复"><a href="#快恢复" class="headerlink" title="快恢复"></a>快恢复</h4><p>快恢复是配合这快重传使用的。</p><p>我们知道当TCP判断当前出现拥塞的时候，就会触发拥塞避免的乘法减小。但是当发送端连续收到三个重复的ACK的时候，说明了一件事，此时不是网络拥塞，只是出现了丢包的特殊情况。因为如果是网络拥塞的时候，接收端发送的三个确认报文发送端是没有办法收到的。所以此时不应该是将cwnd直接设置为1。如果是触发了超时重传，在开启了快恢复的TCP协议中，也不会将cwnd设置为1。</p><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807212333_391.png-960.jpg" alt="快恢复"></p><p>快恢复的做法是：ssthresh = cwnd / 2；cwnd = ssthresh；然后接着采用拥塞避免的加法增大。就是上图中的TCP Reno版本。之前的是TCP Tahoe版本。</p><p>但是当前Linux已经不再使用前面两种算法了，使用的是TCP Cubic 版本</p><p>归根结底，拥塞避免就是TCP协议在避免给网络造成太大压力的时候，尽可能快的给对方传输数据的一种方式。</p><h2 id="异常终止"><a href="#异常终止" class="headerlink" title="异常终止"></a>异常终止</h2><ul><li>进程终止：进程中值会释放文件描述符，任然可以发送FIN报文，这样跟正常关闭是一样的；</li><li>机器重启：这样也会让进程终止，跟上面一样；</li><li>机器掉电\网线断开：接收端认为连接还在，一旦接收端有写入操作，接收端发现连接已经不在了，就会重置。如果接收端没有写入操作，TCP也内置了一个保活定时器，会定期询问对方在不在，如果对方不在，也会将连接释放。</li></ul><h2 id="粘包问题"><a href="#粘包问题" class="headerlink" title="粘包问题"></a>粘包问题</h2><p>粘包问题指的是：报文与报文之间的连带。因为TCP是面向字节流的，获取之后提交给上层应用的时候，缓冲区里的数据有可能只有半个报文的大小，也有可能超过一个报文的大小。</p><p>UDP报文是通过定长报文的形式进行报文与报文之间的分隔。报头里面指定了报文的长度。但是TCP里面只有TCP报头的长度，数据的长度并不知道。所以为了区分报文与报文之间的界线，只能通过上层程序自己区分。</p><h2 id="基于TCP的应用协议"><a href="#基于TCP的应用协议" class="headerlink" title="基于TCP的应用协议"></a>基于TCP的应用协议</h2><ul><li>HTTP</li><li>HTTPS</li><li>SSH</li><li>Telent</li><li>FTP</li><li>SMTP</li></ul><h2 id="TCP几个定时器"><a href="#TCP几个定时器" class="headerlink" title="TCP几个定时器"></a>TCP几个定时器</h2><ul><li>重传定时器：作用于发送报文的时候。发送端发送了报文之后，就会开始计时，如果超过了时间都没有收到确认报文，就会将报文重传，并重新计时。</li><li>持续定时器：在流量控制的时候使用。如果发送端收到接收端的通知，说接收端的窗口大小是0，就会启动计时。到了时间接收端也没有对发送端发送窗口通知报文，发送端就会主动发送一个询问报文。</li><li>保活计时器：如果连接建立了，但是双方没有发生数据传输，在保活计时器超时的时候，服务器端会发送一个探测报文，如果连续发送了10个，客户端也没有回应，服务器端就会主动将连接断开。以释放空间和端口。</li><li>TIME_WAIT计时器：在主动断开连接的一方，在最后一个发送了确认报文之后会进入TIME_WAIT状态。这个状态会一直持续2*MSL时间之后才会转入CLOSED状态。</li></ul><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><ul><li>谢希仁老先生的计算机网络</li><li>图解TCP/IP一书</li><li><a href="https://blog.csdn.net/q1007729991/article/details/69091877" target="_blank" rel="noopener">网络编程学习笔记导航</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;TCP概述及特点&quot;&gt;&lt;a href=&quot;#TCP概述及特点&quot; class=&quot;headerlink&quot; title=&quot;TCP概述及特点&quot;&gt;&lt;/a&gt;TCP概述及特点&lt;/h2&gt;&lt;p&gt;TCP称为传输控制协议，是一种面向字节流的可靠的传输协议，是传输层的协议。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TCP是面向连接的传输层协议，所谓面向连接就是需要在使用TCP协议之前先建立连接、使用完TCP协议之后再断开连接。&lt;/strong&gt;那么如何理解连接的建立和断开呢？&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TCP是点对点的，不能一对多、多对一、多对多。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TCP提供可靠交付的的服务。传输的数据保证无差错、不丢失、不重复、并且按需到达。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TCP提供全双工通信。&lt;/strong&gt;连接双方可以随时随地的相互发送数据，实现的基础是设置有接收缓冲区和发送缓冲区。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TCP面向字节流。所谓面向字节流指的是：虽然上层的应用层协议会发送一个一个的数据报，但是在TCP这里，他会转化为一连串没有结构的字节流。&lt;/strong&gt;当TCP根据机制判断需要上交数据的时候，就会将当前缓冲区的数据上交，但是此时并不能保证应用层需要的数据报都在这些字节流中，所以需要使用TCP协议的应用层软件具有识别字节流的能力。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.jingxxn.cn/categories/Linux/"/>
    
      <category term="network" scheme="http://www.jingxxn.cn/categories/Linux/network/"/>
    
    
  </entry>
  
  <entry>
    <title>UDP协议解析</title>
    <link href="http://www.jingxxn.cn/%5B%E7%BD%91%E7%BB%9C%5DUDP%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90.html"/>
    <id>http://www.jingxxn.cn/[网络]UDP协议解析.html</id>
    <published>2018-07-07T12:58:02.000Z</published>
    <updated>2018-07-22T08:28:18.372Z</updated>
    
    <content type="html"><![CDATA[<h3 id="UDP概述及特点"><a href="#UDP概述及特点" class="headerlink" title="UDP概述及特点"></a>UDP概述及特点</h3><p>UDP称为用户数据包协议，是传输层的协议。他的功能其实就是在ip的数据报服务之上添加了复用、分用和差错检验。</p><p><strong>特点：</strong></p><ul><li><strong>无连接，即发送数据之前不需要建立连接。</strong>无连接的好处就是快，省内存空间。因为维护连接需要创建大量的数据结构，在这里都不需要。</li><li><strong>UDP尽最大努力交付数据，即不保证可靠交付。</strong>没有TCP的确认机制、重传机制。如果因为网络原因没有传送到对端，UDP也不会给应用层返回错误信息。</li><li><strong>面向数据报文。</strong>对于应用层交付下来的报文在添加了首部就直接交付于ip层，不会进行合并，也不会进行拆分。这就说明UDP一次交付一个完整的报文。正是因为这样，UDP显得不够灵活，不能控制读写数据的次数和数量。比如我们要发送100个字节的报文，我们调用一次sendto函数就会发送100字节，对端也需要用recvfrom函数一次性接收100字节，不能使用循环每次获取10个字节，获取十次这样的做法。</li><li><strong>没有拥塞控制，所以当网络出现的拥塞不会导致主机发送数据的速率降低。</strong>这个在对实时应用来说很重要，比如：视频通话、直播等应用。</li><li><strong>UDP支持一对一、一对多、多对一、多对多的交互通信。</strong></li><li><strong>UDP的首部只有8个字节，开销小。</strong><a id="more"></a><h3 id="UDP的缓冲区"><a href="#UDP的缓冲区" class="headerlink" title="UDP的缓冲区"></a>UDP的缓冲区</h3></li><li><strong>UDP没有发送缓冲区</strong>，当我们使用sendto函数的时候，数据会直接交给内核，由内核将数据传送给网络层。</li><li><strong>UDP有接收缓冲区</strong>，但是这个缓冲区只负责接收，并不会保证UDP报文的到达顺序是否和发送的顺序一致。因为网络传输的时候，由于网络拥塞的存在是很大的可能导致先发的报文比后发的报文晚到达对端的。同时如果缓冲区满了，后面到达的报文将直接被丢弃。这样很好的体现了UDP不可靠的特点。</li></ul><h3 id="UDP报头解析"><a href="#UDP报头解析" class="headerlink" title="UDP报头解析"></a>UDP报头解析</h3><p>报头格式如下：</p><p><img src="http://p3ax8ersb.bkt.clouddn.com/201807181526_851.png-960.jpg" alt="UDP报头"></p><ul><li>UDP的报头一共8字节大小。使用的是固定字长的报头报文分割方法。</li><li><strong>16位UDP长度指的是报头8字节和数据加起来的大小</strong>。计算得知16位是64K字节大小，其中报头占了8个字节。</li><li>如果UDP不需要给发送端回消息，可以将源端口号设为全0。</li><li>其实UDP的报头还有一个伪首部的概念，伪首部是用于校验和的，该首部既不会向上交付给应用层，也不会向下交付个ip层。</li><li><strong>UDP的校验和跟IP报头的校验不一样，这里校验的是首部和数据全部。</strong>如果校验出错，UDP会将整个报文默默地丢弃不要，不会通知任何一方。</li></ul><h3 id="基于UDP的应用层协议"><a href="#基于UDP的应用层协议" class="headerlink" title="基于UDP的应用层协议"></a>基于UDP的应用层协议</h3><ul><li>NFS：网络文件系统</li><li>TFTP：简单文件传输协议</li><li><strong>DNS：域名解析协议</strong></li><li><strong>DHCP：动态主机配置协议</strong></li><li>SNMP：简单网络管理协议</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;UDP概述及特点&quot;&gt;&lt;a href=&quot;#UDP概述及特点&quot; class=&quot;headerlink&quot; title=&quot;UDP概述及特点&quot;&gt;&lt;/a&gt;UDP概述及特点&lt;/h3&gt;&lt;p&gt;UDP称为用户数据包协议，是传输层的协议。他的功能其实就是在ip的数据报服务之上添加了复用、分用和差错检验。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;无连接，即发送数据之前不需要建立连接。&lt;/strong&gt;无连接的好处就是快，省内存空间。因为维护连接需要创建大量的数据结构，在这里都不需要。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UDP尽最大努力交付数据，即不保证可靠交付。&lt;/strong&gt;没有TCP的确认机制、重传机制。如果因为网络原因没有传送到对端，UDP也不会给应用层返回错误信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;面向数据报文。&lt;/strong&gt;对于应用层交付下来的报文在添加了首部就直接交付于ip层，不会进行合并，也不会进行拆分。这就说明UDP一次交付一个完整的报文。正是因为这样，UDP显得不够灵活，不能控制读写数据的次数和数量。比如我们要发送100个字节的报文，我们调用一次sendto函数就会发送100字节，对端也需要用recvfrom函数一次性接收100字节，不能使用循环每次获取10个字节，获取十次这样的做法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;没有拥塞控制，所以当网络出现的拥塞不会导致主机发送数据的速率降低。&lt;/strong&gt;这个在对实时应用来说很重要，比如：视频通话、直播等应用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UDP支持一对一、一对多、多对一、多对多的交互通信。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UDP的首部只有8个字节，开销小。&lt;/strong&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.jingxxn.cn/categories/Linux/"/>
    
      <category term="network" scheme="http://www.jingxxn.cn/categories/Linux/network/"/>
    
    
  </entry>
  
  <entry>
    <title>解决VMware 12安装VMware Tools后共享文件夹不出现的问题</title>
    <link href="http://www.jingxxn.cn/%E8%A7%A3%E5%86%B3VMware%2012%E5%AE%89%E8%A3%85VMware%20Tools%E5%90%8E%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8D%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98.html"/>
    <id>http://www.jingxxn.cn/解决VMware 12安装VMware Tools后共享文件夹不出现的问题.html</id>
    <published>2018-04-24T05:32:28.000Z</published>
    <updated>2018-04-24T05:37:47.123Z</updated>
    
    <content type="html"><![CDATA[<p>VMware Workstation Pro 12.0中centos 7安装VMware Tools的时候，发现安装完成，在/mnt/hgfs/目录下，没有自己显示与windows共享的文件夹。可以通过以下步骤修复。</p><h4 id="一：升级VMware为14版本，问题解决"><a href="#一：升级VMware为14版本，问题解决" class="headerlink" title="一：升级VMware为14版本，问题解决"></a>一：升级VMware为14版本，问题解决</h4><h4 id="二：通过修改VMware-Tools的文件解决问题。"><a href="#二：通过修改VMware-Tools的文件解决问题。" class="headerlink" title="二：通过修改VMware Tools的文件解决问题。"></a>二：通过修改VMware Tools的文件解决问题。</h4><p>安装VMware-Workstation-Pro 12.0的VMwar Tools步骤，看<a href="https://docs.vmware.com/cn/VMware-Workstation-Pro/12.0/com.vmware.ws.using.doc/GUID-08BB9465-D40A-4E16-9E15-8C016CC8166F.html" target="_blank" rel="noopener"><strong>官方文档</strong></a>。<br>按照官方文档一直到进入<br><a id="more"></a></p><ul><li><strong>cd vmware-tools-distrib/</strong></li></ul><p>在按照官方文档执行./vmware-install.pl之前，对安装文件进行以下修改。</p><ul><li><strong>cd lib/modules/source/</strong></li><li><strong>tar xvf vmhgfs.tar</strong></li></ul><p>得到vmhgfs-only目录</p><ul><li><strong>cd vmhgfs-only</strong></li><li><strong>vim page.c</strong></li></ul><p>将1639行(3, 19, 0)修改为(3, 10, 0)</p><ul><li>#if LINUX_VERSION_CODE &gt;= KERNEL_VERSION(3, 19, 0)  改成下面的值</li><li><strong>#if LINUX_VERSION_CODE &gt;= KERNEL_VERSION(3, 10, 0)</strong></li></ul><p>这个原因是因为centos 7的内核版本是 3.10.0。</p><p>修改完成之后，请用:wq!强制保存只读文件。</p><p>删除之前的包，将vmhgfs-only重新打包</p><ul><li><strong>cd ..</strong></li><li><strong>rm vmhgfs.tar</strong></li><li><strong>tar cvf vmhgfs.tar vmhgfs-only/</strong></li><li><strong>rm -rf vmhgfs-only/</strong></li></ul><p>回到 vmware-tools-distrib目录，执行安装</p><ul><li><strong>cd ../../..</strong></li><li><strong>./vmware-install.pl</strong></li></ul><p>一路默认，完成VMware Tools的安装。<br><a href="http://www.mamicode.com/info-detail-1655589.html" target="_blank" rel="noopener">参考文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;VMware Workstation Pro 12.0中centos 7安装VMware Tools的时候，发现安装完成，在/mnt/hgfs/目录下，没有自己显示与windows共享的文件夹。可以通过以下步骤修复。&lt;/p&gt;
&lt;h4 id=&quot;一：升级VMware为14版本，问题解决&quot;&gt;&lt;a href=&quot;#一：升级VMware为14版本，问题解决&quot; class=&quot;headerlink&quot; title=&quot;一：升级VMware为14版本，问题解决&quot;&gt;&lt;/a&gt;一：升级VMware为14版本，问题解决&lt;/h4&gt;&lt;h4 id=&quot;二：通过修改VMware-Tools的文件解决问题。&quot;&gt;&lt;a href=&quot;#二：通过修改VMware-Tools的文件解决问题。&quot; class=&quot;headerlink&quot; title=&quot;二：通过修改VMware Tools的文件解决问题。&quot;&gt;&lt;/a&gt;二：通过修改VMware Tools的文件解决问题。&lt;/h4&gt;&lt;p&gt;安装VMware-Workstation-Pro 12.0的VMwar Tools步骤，看&lt;a href=&quot;https://docs.vmware.com/cn/VMware-Workstation-Pro/12.0/com.vmware.ws.using.doc/GUID-08BB9465-D40A-4E16-9E15-8C016CC8166F.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;官方文档&lt;/strong&gt;&lt;/a&gt;。&lt;br&gt;按照官方文档一直到进入&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.jingxxn.cn/categories/Linux/"/>
    
      <category term="method" scheme="http://www.jingxxn.cn/categories/Linux/method/"/>
    
    
  </entry>
  
  <entry>
    <title>[剑指offer]在旋转数组中找最小的值</title>
    <link href="http://www.jingxxn.cn/%5B%E5%89%91%E6%8C%87offer%5D%E5%9C%A8%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E4%B8%AD%E6%89%BE%E6%9C%80%E5%B0%8F%E7%9A%84%E5%80%BC.html"/>
    <id>http://www.jingxxn.cn/[剑指offer]在旋转数组中找最小的值.html</id>
    <published>2018-04-19T00:18:31.000Z</published>
    <updated>2018-04-19T01:30:45.863Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个 <strong>非递减排序</strong>的数组的一个旋转，输出旋转数组的最小元素。例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>本题最简单的做法就是从头到尾的遍历。这样一定可以得到结果，只是这样操作的时间复杂度是O(n)。没有利用上旋转这个题目特性。正确的思路是，利用二分查找的思想。让一个begin下标表示数组的开始，一个end下标表示数组的结束，mid表示数组的中间值。通过三者值的比较得到范围。如果mid的值大于begin的值，说明最小值的范围在mid到end之间。反之在begin到mid之间。依次缩小范围，直到找到最小值。<br><a id="more"></a></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>1、存在一种情况，并没有旋转。也就是数组的第一个元素就是最小值。可以通过比较一开始begin和end的值判断，如果begin的值小于end的值，那么直接返回begin的值即可。<br>2、判断停止的条件是当begin的下一个值就是end的时候，这个时候end一定是最小值。因为begin已经到达最大值，end自然是最小值了。<br>3、判断的时候请注意重复值的情况。如果出现一种情况，begin、mid、end对应的值都一样。这个时候就需要用遍历的思路来执行查找。<br>4、需要注意边界值的判断，如果边界值的判断出问题，可能会出现死循环。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minNumberInRotateArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rotateArray)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rotateArray.size() == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> size = rotateArray.size();</span><br><span class="line">        <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = size - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(rotateArray[begin] &gt;= rotateArray[end])&#123;</span><br><span class="line">            <span class="keyword">if</span>(begin+<span class="number">1</span> == end)&#123;</span><br><span class="line">                mid = end;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mid = begin + (end-begin)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(rotateArray[mid] == rotateArray[begin] &amp;&amp;</span><br><span class="line">               rotateArray[mid] == rotateArray[end])</span><br><span class="line">                <span class="keyword">return</span> MinNumber(rotateArray, begin, end);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(rotateArray[mid] &gt;= rotateArray[begin])</span><br><span class="line">                begin = mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(rotateArray[mid] &lt;= rotateArray[end])</span><br><span class="line">                end = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rotateArray[mid];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">MinNumber</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = begin;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = result+<span class="number">1</span>; i &lt;= end; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] &gt; arr[result])</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            result = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr[result];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个 &lt;strong&gt;非递减排序&lt;/strong&gt;的数组的一个旋转，输出旋转数组的最小元素。例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。&lt;/p&gt;
&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;本题最简单的做法就是从头到尾的遍历。这样一定可以得到结果，只是这样操作的时间复杂度是O(n)。没有利用上旋转这个题目特性。正确的思路是，利用二分查找的思想。让一个begin下标表示数组的开始，一个end下标表示数组的结束，mid表示数组的中间值。通过三者值的比较得到范围。如果mid的值大于begin的值，说明最小值的范围在mid到end之间。反之在begin到mid之间。依次缩小范围，直到找到最小值。&lt;br&gt;
    
    </summary>
    
      <category term="practice" scheme="http://www.jingxxn.cn/categories/practice/"/>
    
      <category term="剑指offer" scheme="http://www.jingxxn.cn/categories/practice/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>二维数组中的查找</title>
    <link href="http://www.jingxxn.cn/%5B%E5%89%91%E6%8C%87offer%5D%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE.html"/>
    <id>http://www.jingxxn.cn/[剑指offer]二维数组中的查找.html</id>
    <published>2018-04-08T11:26:29.000Z</published>
    <updated>2018-04-19T00:06:09.499Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>第一行到最后一行是递增，第一列到最后一列是递增，那么肯定会有四个特殊的点。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201804081945_716.png-480.jpg" alt="图示"><br><a id="more"></a><br>分别是最小的，最大的，行最大列最小，列最大行最小。如果要入手解题从这四个点入手。<br>1、最小的，如图中1。寻找的时候，如果target比1大，那么该往何处走？不清楚。所以最小点不适合，同理最大点。<br>2、行最大列最小，如图左下角4。如果target比4大，那么向当前列右走。如果target跟他比4小，那么向当前行上走。同理列最大行最小。</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> target, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; <span class="built_in">array</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = <span class="built_in">array</span>.size();</span><br><span class="line">        <span class="keyword">if</span>(size != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> row = size - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> col = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(row &gt;= <span class="number">0</span> &amp;&amp; col &lt; <span class="built_in">array</span>[<span class="number">0</span>].size())&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">array</span>[row][col] == target)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">array</span>[row][col] &lt; target)&#123;</span><br><span class="line">                    ++ col;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    -- row;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="vector构成的二维数组"><a href="#vector构成的二维数组" class="headerlink" title="vector构成的二维数组"></a>vector构成的二维数组</h2><h3 id="创建二维数组赋值"><a href="#创建二维数组赋值" class="headerlink" title="创建二维数组赋值"></a>创建二维数组赋值</h3><p>可以使用vector函数resize()和函数assign()对数组大小进行修改。<br>1、利用构造函数直接创建。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用构造函数直接创建arr[2][3]</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;arr(<span class="number">2</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">3</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size(); ++i)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr[<span class="number">0</span>].size(); ++j)&#123;</span><br><span class="line">        arr[i][j] = i+j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2、利用函数resize()或函数assign()<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用创建的arr1[3][3]改变为arr1[3][4]</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;arr1(<span class="number">3</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">3</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr1.size(); ++i)&#123;</span><br><span class="line">    arr1[i].resize(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr1.size(); ++i)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr[<span class="number">0</span>].size(); ++j)&#123;</span><br><span class="line">        arr1[i][j] = i+j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="遍历二维数组"><a href="#遍历二维数组" class="headerlink" title="遍历二维数组"></a>遍历二维数组</h3><p>1、获取下标，利用operator[]函数<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size(); ++i)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr[i].size(); ++j)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; arr[i][j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2、利用迭代器。利用迭代器的时候，有点难理解。it1是二维vector迭代器，it2是一维vector迭代器。*it1得到的是一个一维vector。*it2得到的是int类型。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;::iterator it1;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(it1 = arr1.begin(); it1 != arr1.end(); ++it1)&#123;</span><br><span class="line">    <span class="keyword">for</span>(it2 = (*it1).begin(); it2 != (*it1).end(); ++it2)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it2 &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出图示："><a href="#输出图示：" class="headerlink" title="输出图示："></a>输出图示：</h3><p><img src="http://p3ax8ersb.bkt.clouddn.com/201804092001_758.png-480.jpg" alt="输出"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目：&quot;&gt;&lt;a href=&quot;#题目：&quot; class=&quot;headerlink&quot; title=&quot;题目：&quot;&gt;&lt;/a&gt;题目：&lt;/h2&gt;&lt;p&gt;在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。&lt;/p&gt;
&lt;h3 id=&quot;解题思路：&quot;&gt;&lt;a href=&quot;#解题思路：&quot; class=&quot;headerlink&quot; title=&quot;解题思路：&quot;&gt;&lt;/a&gt;解题思路：&lt;/h3&gt;&lt;p&gt;第一行到最后一行是递增，第一列到最后一列是递增，那么肯定会有四个特殊的点。&lt;br&gt;&lt;img src=&quot;http://p3ax8ersb.bkt.clouddn.com/201804081945_716.png-480.jpg&quot; alt=&quot;图示&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="practice" scheme="http://www.jingxxn.cn/categories/practice/"/>
    
      <category term="剑指offer" scheme="http://www.jingxxn.cn/categories/practice/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>哈弗曼树及文件压缩</title>
    <link href="http://www.jingxxn.cn/%E5%93%88%E5%BC%97%E6%9B%BC%E6%A0%91%E5%8F%8A%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9.html"/>
    <id>http://www.jingxxn.cn/哈弗曼树及文件压缩.html</id>
    <published>2018-04-02T12:58:15.000Z</published>
    <updated>2018-04-05T06:16:50.236Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HuffmanTree"><a href="#HuffmanTree" class="headerlink" title="HuffmanTree"></a>HuffmanTree</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>哈弗曼树是一种优化的二叉树，称为最优二叉树，是加权路径长度最小的二叉树。所谓权值在这里指的是节点中的数据。本文的哈弗曼树用数组提供数据，例如：arr[]={1,2,3,4,5,6}创建的哈弗曼树见下图：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201804031454_423.png-480.jpg" alt="hft"><br>图中蓝色的节点值是数组arr提供，红色节点值是两个孩子节点值相加得到。<br><a id="more"></a></p><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><p>节点的权值：权就相当于重要程度，通过一个具体的数字来表示<br>路径：在树中从一个节点到另一个节点的分支。<br>路径长度：一条路径上的分支数量。<br>树的路径长度：从树的根节点到每个节点的路径长度之和。<br>树的带权路径长度：树中各个叶子节点的路径长度*该叶子节点的权的和。</p><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p>1、根节点值是所有的叶子节点值相加得到<br>2、创建哈弗曼树的节点值全部在叶子节点上，而且只在叶子节点出现<br>3、哈夫曼树的加权路径长度是最小的，这个是因为权值大的节点离根节点近，权值小的节点离根节点远。</p><h3 id="创建HuffmanTree"><a href="#创建HuffmanTree" class="headerlink" title="创建HuffmanTree"></a>创建HuffmanTree</h3><p>1、取出数组中最小的两个值，组成最小的一个分支，用两者的和作为两者的父亲节点并在原数组中替换两者。<br>2、依次循环直到数组所有符合要求的值被使用。<br>使用示例：arr[] = {1,2,3,4,5,6};<br><img src="http://p3ax8ersb.bkt.clouddn.com/201804031517_519.png-960.jpg" alt="init"></p><h3 id="节点定义"><a href="#节点定义" class="headerlink" title="节点定义"></a>节点定义</h3><p>哈弗曼树节点采用二叉链结构，包含关键值_val；指向左节点的指针_left；指向右节点的指针_right。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">HuffmanTreeNode</span>&#123;</span></span><br><span class="line">    T _val;</span><br><span class="line">    HuffmanTreeNode&lt;T&gt;* _left;</span><br><span class="line">    HuffmanTreeNode&lt;T&gt;* _right;</span><br><span class="line"></span><br><span class="line">    HuffmanTreeNode(<span class="keyword">const</span> T&amp; val)</span><br><span class="line">        :_val(val)</span><br><span class="line">        ,_left(<span class="literal">NULL</span>)</span><br><span class="line">        ,_right(<span class="literal">NULL</span>)</span><br><span class="line">    &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>构造函数提供了两个，一个是空的构造函数，防止因为没有默认构造函数产生错误。另一个是带参的构造函数。</p><h4 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h4><p>arr是一个数组名，用来提供创建哈弗曼树的数值来源；size是数组的大小，这个大小在构建最小堆的时候会用到；invalid指的是非法值，如果数组中有一些特定的值，不希望插入到哈弗曼树中，用这个值来判断。一般来说，所有的非法值是相同的。</p><h4 id="构建的思想"><a href="#构建的思想" class="headerlink" title="构建的思想"></a>构建的思想</h4><p>构建哈夫曼树的方式在上面已经提到，但是如何用代码来实现呢？<strong>这里可以借用最小堆来实现</strong>。如果不太熟悉最小堆可以看这个<a href="http://www.jingxxn.cn/%E5%A0%86(heap">传送门</a>%E7%9A%84%E5%AE%9E%E7%8E%B0.html)。每次取最小堆的堆顶元素第一次是作为左节点，第二次作为右节点。同时将两者出堆，接着用两者的关键值创建一个父亲节点入堆。利用循环就可以创建出来哈弗曼树了。<strong>至于为什么要用最小堆</strong>，根据前述的方法，我们需要每次取数组中的最小的两个值来构建新的节点，用最小堆的话可以分两次取堆顶数据，然后让创建的新的节点再入堆。最小堆会自动调整，不需要人为参与修改。而且堆的存储机制就是动态增长的数组，天然符合这里利用数组传参的要求。<strong>其中这里传入给最小堆的数据类型是节点指针</strong>，为什么是节点指针很好理解。如果是节点本身，那么我们就没有办法将之前创建的内容链接在一起，见下图：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201804031547_403.png-960.jpg" alt="Node*"><br>为什么不用节点的引用呢？引用的话不太好，如果是引用，可能出现节点结构太大的情况，这样开销有点大，不划算。这里还需要解释一下，<strong>需要自己创建一个比较仿函数</strong>，因为Node是一个自定义类型，在创建最小堆的时候是没有办法知道比较方式的，仿函数如下：(其中为了书写方便，在HuffmanTree类中定义了节点Node)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> HuffmanTreeNode&lt;T&gt; Node;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NodeCompare</span>&#123;</span></span><br><span class="line">    <span class="comment">//const Node* left, const Node* right</span></span><br><span class="line">    <span class="comment">//wrong</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(Node* left, Node* right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> left-&gt;_val &lt; right-&gt;_val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>这里需要注意的是，仿函数的参数不能够定义为const对象。需要修改。<br>构建的代码如下：注意循环结束的条件是最小堆中只有一个元素，因为此时已经构建完成。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">HuffmanTree()</span><br><span class="line">    :_root(<span class="literal">NULL</span>)</span><br><span class="line">&#123;&#125;</span><br><span class="line">HuffmanTree(T* arr, <span class="keyword">size_t</span> size, <span class="keyword">const</span> T&amp; invalid)&#123;</span><br><span class="line">    <span class="comment">//注意这里使用的是Node*</span></span><br><span class="line">    Heap&lt;Node*, NodeCompare&gt; minheap;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; size; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] != invalid)&#123;</span><br><span class="line">            <span class="comment">//Node*</span></span><br><span class="line">            minheap.Push(<span class="keyword">new</span> Node(arr[i]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//minheap.Size()&gt;1</span></span><br><span class="line">    <span class="keyword">while</span>(minheap.Size() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        Node* left = minheap.Top();</span><br><span class="line">        minheap.Pop();</span><br><span class="line">        Node* right = minheap.Top();</span><br><span class="line">        minheap.Pop();</span><br><span class="line">        Node* parent = <span class="keyword">new</span> Node(left-&gt;_val + right-&gt;_val);</span><br><span class="line">        parent-&gt;_left = left;</span><br><span class="line">        parent-&gt;_right = right;</span><br><span class="line">        minheap.Push(parent);</span><br><span class="line">    &#125;</span><br><span class="line">    _root = minheap.Top();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h3><p>析构函数通过递归实现，内部调用Destroy实现。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//destructor</span></span><br><span class="line">~HuffmanTree()&#123;</span><br><span class="line">    Destroy(_root);</span><br><span class="line">    _root = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Destroy</span><span class="params">(Node* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root)&#123;</span><br><span class="line">        Destroy(root-&gt;_left);</span><br><span class="line">        Destroy(root-&gt;_right);</span><br><span class="line">        <span class="keyword">delete</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="获取根节点函数"><a href="#获取根节点函数" class="headerlink" title="获取根节点函数"></a>获取根节点函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//GetRoot</span></span><br><span class="line"><span class="function">Node* <span class="title">GetRoot</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>因为没有实现拷贝构造和赋值运算符的重载，所以将他们都声明为私有成员变量。防止错误使用导致未知错误</p><h2 id="文件压缩及解压缩"><a href="#文件压缩及解压缩" class="headerlink" title="文件压缩及解压缩"></a>文件压缩及解压缩</h2><p>有了哈弗曼树，我们就可以利用哈弗曼树创建哈夫曼编码，通过哈夫曼编码可以实现文件压缩的功能。</p><h3 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h3><p>所谓哈夫曼编码是在哈弗曼树的基础上，定义向左的路径为零，向右的路径为一。这样定义以后，每一个叶子节点都会有一个唯一的编码值。而重要的是，在哈弗曼树中，所有叶子节点就是我们用来构建哈弗曼树的原值。使用示例：arr[] = {1,2,3,4,5,6};如下图：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201804031610_457.png-480.jpg" alt="哈夫曼编码"><br>需要注意的是，哈夫曼编码不是唯一的，就算是同样的原值，因为插入的顺序不一样会导致不同的编码，但是毋庸置疑的是，每一个叶子节点一定会有唯一的编码值。</p><h3 id="压缩思路"><a href="#压缩思路" class="headerlink" title="压缩思路"></a>压缩思路</h3><p>1、扫描文件内容，统计文件中字符出现的次数。<br>2、利用文件出现次数构建哈弗曼树。<br>3、创建哈夫曼编码。<br>4、将创建哈弗曼树的字符及其对应出现次数写入压缩文件中，用于解压使用。<br>5、将哈夫曼编码替换原子符写入压缩文件。</p><h3 id="压缩原理"><a href="#压缩原理" class="headerlink" title="压缩原理"></a>压缩原理</h3><p>举例：文件test.txt中内容：aaaaaabbbbbccccdddeef<br>其中字符出现的次数统计：a-&gt;6；b-&gt;5；c-&gt;4；d-&gt;3；e-&gt;2；f-&gt;1。利用次数构建的哈弗曼树和编码如下：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201804051247_926.png-480.jpg" alt="example"><br>图中黑色字体是出现的字符，蓝色数字是对应出现的次数，红色字体是构建时两字符出现次数相加之和。<strong>为什么通过哈夫曼编码可以压缩文件？我们通过编码将原字符替换，只有当编码的长度超过一个字节的时候(也就是八个比特位)才会比替换之前的字符大小要大。但是出现次数多的字符的编码都十分的短，出现次数少的字符编码才会超过一个字节。这样抵消之下，肯定是相比于压缩之前文件大小要小。</strong>上例子中，写入压缩文件的压缩编码如下：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201804031641_879.png-960.jpg" alt="比较"></p><h3 id="压缩与解压代码分析"><a href="#压缩与解压代码分析" class="headerlink" title="压缩与解压代码分析"></a>压缩与解压代码分析</h3><h4 id="结构体分析"><a href="#结构体分析" class="headerlink" title="结构体分析"></a>结构体分析</h4><p>结构体CharInfo是用来存储字符、字符出现的次数、字符的编码三者的结构类型。其中将_count定义为long long类型，防止字符出现的次数超过了整型表示范围。_code用string类型；通过这个结构体可以将三者紧紧地联系在一起。其中对该结构体重载了!=、+、&lt; 这三个运算符。在代码中都会用到。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LongType;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CharInfo</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> _ch;</span><br><span class="line">    LongType _count;</span><br><span class="line">    <span class="built_in">string</span> _code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//for invalid</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> CharInfo&amp; info)&#123;</span><br><span class="line">        <span class="keyword">return</span> _count != info._count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//for minheap.parent</span></span><br><span class="line">    CharInfo <span class="keyword">operator</span>+(<span class="keyword">const</span> CharInfo&amp; info)&#123;</span><br><span class="line">        CharInfo tmp;</span><br><span class="line">        tmp._count = _count + info._count;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//for compare</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> CharInfo&amp; info)&#123;</span><br><span class="line">        <span class="keyword">return</span> _count &lt; info._count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h4 id="构造函数-1"><a href="#构造函数-1" class="headerlink" title="构造函数"></a>构造函数</h4><p>本文使用的文件压缩类类名为FileCompress。类的私有成员是一个CharInfo类型的数组。其大小是256,因为字符包括汉字一共只有256个。所以直接指定数组大小就好。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CharInfo _infos[<span class="number">256</span>];</span><br></pre></td></tr></table></figure></p><p>构造函数直接将数组的下标赋值给结构体CharInfo的_ch成员，因为字符型数据就是通过整型转换过去的。这样就相当于给数组的每一个元素都指定好了对应字符。例如：_infos[97]对应字符’a’。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FileCompress()&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i)&#123;</span><br><span class="line">        _infos[i]._ch = i;</span><br><span class="line">        _infos[i]._count = <span class="number">0</span>;</span><br><span class="line">        _infos[i]._code = <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="压缩函数"><a href="#压缩函数" class="headerlink" title="压缩函数"></a>压缩函数</h4><p>压缩函数分为五步，步骤在代码中详细的分析，这里分别说一下每个步骤注意的点：<br>1、统计。<strong>统计时，要注意用二进制方式打开文件，</strong>用二进制模式打开的文件不会对任何字符有转义的动作，文本模式下，window操作系统会将’\n’和’\r’进行编码转换。<strong>而且写入的时候，也需要用二进制方式写入，否则会出现压缩没有问题，但是解压的时候提前结束的情况。</strong><br>2、构建哈弗曼树。定义非法值，其字符个数为零个。<br>3、构建哈夫曼编码调用函数。<br>4、写入构建哈弗曼树的字符和对出现次数。<strong>调用fopen函数，要将string类转换为char*格式；创建一个没有string类的临时结构体，因为构建哈弗曼树只需要ch和count；将构件用的源写入之后，再写入一个标志位，用字符个数为-1表示，用于跟替换的编码相互隔开。</strong><br>5、用编码将字符替换。<strong>在进行这一步之前，将文本指针指向文章开头。因为统计字数的时候，文本指针已经指向了文末。</strong>替换的步骤是：从源文件中获取一个字符，通过该字符获得之前已经编好的哈夫曼编码，获取编码的每一个位，如果编码为’1’，将value当前位置为1；反之，置为0。依次进行，当该字符的编码全部用完，获取下一个字符，一直到value的八个位都替换完成， 将value写入压缩文件中。为什么要到一个字节才写入，这个是因为函数能写入的最小的单位是字节。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Compress</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* file)</span></span>&#123;</span><br><span class="line"><span class="comment">//fopen的打开方式，用二进制方式打开</span></span><br><span class="line">    FILE* fout = fopen(file, <span class="string">"rb"</span>);</span><br><span class="line">    assert(fout);</span><br><span class="line">    <span class="comment">//1、统计文章字符出现的次数</span></span><br><span class="line">    <span class="comment">//fgetc的返回值是整型</span></span><br><span class="line">    <span class="keyword">int</span> ch = fgetc(fout);</span><br><span class="line">    <span class="keyword">while</span>(ch != EOF)&#123;</span><br><span class="line">        ++ _infos[(<span class="keyword">unsigned</span> <span class="keyword">char</span>)ch]._count;</span><br><span class="line">        ch = fgetc(fout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2、构建哈夫曼树</span></span><br><span class="line">    CharInfo invilad;</span><br><span class="line">    invilad._count = <span class="number">0</span>;</span><br><span class="line">    HuffmanTree&lt;CharInfo&gt; tree(_infos, <span class="number">256</span>, invilad);</span><br><span class="line">    <span class="comment">//code不要初始化，不然会出现编码错误</span></span><br><span class="line">    <span class="built_in">string</span> code;</span><br><span class="line">    <span class="comment">//3、构建哈夫曼编码</span></span><br><span class="line">    GenerateHuffmanTreeCode(tree.GetRoot(), code);</span><br><span class="line">    <span class="comment">//4、写入构建哈弗曼树的字符和对出现次数</span></span><br><span class="line">    <span class="built_in">string</span> compressfile = file;</span><br><span class="line">    compressfile += <span class="string">".huffman"</span>;</span><br><span class="line">    FILE* fin = fopen(compressfile.c_str(), <span class="string">"wb"</span>);</span><br><span class="line">    assert(fin);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(_infos[i]._count != <span class="number">0</span>)&#123;</span><br><span class="line">            TmpCharInfo info;</span><br><span class="line">            info._ch = _infos[i]._ch;</span><br><span class="line">            info._count = _infos[i]._count;</span><br><span class="line">            fwrite(&amp;info, <span class="keyword">sizeof</span>(info), <span class="number">1</span>, fin);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置判断位，让其跟压缩内容分割开来</span></span><br><span class="line">    TmpCharInfo info;</span><br><span class="line">    info._count = <span class="number">-1</span>;</span><br><span class="line">    fwrite(&amp;info, <span class="keyword">sizeof</span>(info), <span class="number">1</span>, fin);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5、用编码将字符替换。</span></span><br><span class="line">    fseek(fout, <span class="number">0</span>, SEEK_SET);</span><br><span class="line">    ch = fgetc(fout);</span><br><span class="line">    <span class="comment">//value是用来写入到压缩文件中的一个字节</span></span><br><span class="line">    <span class="keyword">char</span> value = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//pos两个作用，一个是当前替换的位置，另一个是用来判断是不是已经满八个比特位</span></span><br><span class="line">    <span class="keyword">size_t</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch != EOF)&#123;</span><br><span class="line">        <span class="built_in">string</span>&amp; code = _infos[(<span class="keyword">unsigned</span> <span class="keyword">char</span>)ch]._code;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; code.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(code[i] == <span class="string">'1'</span>)&#123;</span><br><span class="line">                value |= (<span class="number">1</span> &lt;&lt; pos);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(code[i] == <span class="string">'0'</span>)&#123;</span><br><span class="line">                value &amp;= ~(<span class="number">1</span> &lt;&lt; pos);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                assert(<span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            ++ pos;</span><br><span class="line">            <span class="keyword">if</span>(pos == <span class="number">8</span>)&#123;</span><br><span class="line">                fputc(value, fin);</span><br><span class="line">                value = pos = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ch = fgetc(fout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//特殊处理未满八个位也将剩下的字符全部写入。</span></span><br><span class="line">    <span class="comment">//正是因为这一步，才会有说上图中用来填充的五个零的出现。</span></span><br><span class="line">    <span class="keyword">if</span>(pos &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        fputc(value, fin);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fclose(fout);</span><br><span class="line">    fclose(fin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="构建哈夫曼编码函数"><a href="#构建哈夫曼编码函数" class="headerlink" title="构建哈夫曼编码函数"></a>构建哈夫曼编码函数</h4><p>这个函数利用递归实现，如果当前走向哈弗曼树的左子树code+0，如果是右子树code+1。如果当前节点是叶子节点那么修改对应字符的_code为code的值。因为这里用的code是值传递，当递归函数返回上一层的时候，当前层的修改不会被带回去。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201804051407_510.png-480.jpg" alt="递归"><br>如上图中的根节点6，它的code是空字符，第一层递归的时候，进入节点3，此时的code是值传递，会进行一次值拷贝，节点3的code是“0”，再下一层，进入节点1，同样是值拷贝，节点1的code是“00”。此时节点1的叶子节点，写入字符’1’的_code为字符串”00”。这个就是它的编码。然后退回到节点3，它的code依然是“0”。然后再进入到节点2，它的code是“01”，叶子节点，写入字符’2’的_code是字符串”01”。这个是他的编码。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//GenerateHuffmanTreeCode</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GenerateHuffmanTreeCode</span><span class="params">(<span class="keyword">const</span> HTreeNode* root, <span class="built_in">string</span> code)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;_left == <span class="literal">NULL</span> &amp;&amp; root-&gt;_right == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="comment">//change _infos</span></span><br><span class="line">        _infos[(<span class="keyword">unsigned</span> <span class="keyword">char</span>)(root-&gt;_val._ch)]._code = code;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    GenerateHuffmanTreeCode(root-&gt;_left, code+<span class="string">'0'</span>);</span><br><span class="line">    GenerateHuffmanTreeCode(root-&gt;_right, code+<span class="string">'1'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="解压函数"><a href="#解压函数" class="headerlink" title="解压函数"></a>解压函数</h4><p>解压函数的思路：<br>1、从压缩文件中读取构建哈弗曼树的字符和次数<br>2、构建哈夫曼树<br>3、从压缩文件中读取编码，结合哈弗曼树将编码翻译为字符写入解压文件中。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//unCompress</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UnCompress</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* file)</span></span>&#123;</span><br><span class="line">    <span class="comment">//获取压缩文件名字，同时设定解压文件的文件名</span></span><br><span class="line">    <span class="built_in">string</span> uncompressfile = file;</span><br><span class="line">    <span class="keyword">size_t</span> pos = uncompressfile.rfind(<span class="string">'.'</span>);</span><br><span class="line">    <span class="keyword">if</span>(pos == <span class="built_in">string</span>::npos)&#123;</span><br><span class="line">        perror(<span class="string">"pos wrong"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    uncompressfile.erase(pos);</span><br><span class="line">    uncompressfile += <span class="string">".unhuffman"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解压</span></span><br><span class="line">    FILE* fin = fopen(uncompressfile.c_str(), <span class="string">"wb"</span>);</span><br><span class="line">    assert(fin);</span><br><span class="line">    <span class="comment">//从压缩文件中获取构建哈弗曼树的字符和对应的出现的次数。</span></span><br><span class="line">    FILE* fout = fopen(file, <span class="string">"rb"</span>);</span><br><span class="line">    assert(fout);</span><br><span class="line">    TmpCharInfo info;</span><br><span class="line">    fread(&amp;info, <span class="keyword">sizeof</span>(info), <span class="number">1</span>, fout);</span><br><span class="line">    <span class="keyword">while</span>(info._count != <span class="number">-1</span>)&#123;</span><br><span class="line">        _infos[(<span class="keyword">unsigned</span> <span class="keyword">char</span>)info._ch]._ch = info._ch;</span><br><span class="line">        _infos[(<span class="keyword">unsigned</span> <span class="keyword">char</span>)info._ch]._count = info._count;</span><br><span class="line">        fread(&amp;info, <span class="keyword">sizeof</span>(info), <span class="number">1</span>, fout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建哈弗曼树，用来翻译编码使用</span></span><br><span class="line">    CharInfo invalid;</span><br><span class="line">    invalid._count = <span class="number">0</span>;</span><br><span class="line">    HuffmanTree&lt;CharInfo&gt; tree(_infos, <span class="number">256</span>, invalid);</span><br><span class="line">    HTreeNode* root = tree.GetRoot();</span><br><span class="line">    HTreeNode* cur = root;</span><br><span class="line">    LongType num = root-&gt;_val._count;</span><br><span class="line">    <span class="keyword">int</span> ch = fgetc(fout);</span><br><span class="line">    <span class="comment">//解决文件中只有一个字符的情况</span></span><br><span class="line">    <span class="keyword">if</span>(root-&gt;_left == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(num--)&#123;</span><br><span class="line">            fputc(root-&gt;_val._ch, fin);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(ch != EOF)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i)&#123;</span><br><span class="line">                <span class="comment">//按照编码规则，遇到1向右走，遇到0向左走。</span></span><br><span class="line">                <span class="keyword">if</span>(((<span class="keyword">unsigned</span> <span class="keyword">char</span>)ch &amp; (<span class="number">1</span> &lt;&lt; i)) == <span class="number">0</span>)&#123;</span><br><span class="line">                    cur = cur-&gt;_left;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    cur = cur-&gt;_right;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//叶子节点写入翻译字符</span></span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;_left == <span class="literal">NULL</span> &amp;&amp; cur-&gt;_right == <span class="literal">NULL</span>)&#123;</span><br><span class="line">                    <span class="comment">//限制翻译的字符的个数，防止将补充的字符也翻译。</span></span><br><span class="line">                    <span class="keyword">if</span>(num-- == <span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    fputc(cur-&gt;_val._ch, fin);</span><br><span class="line">                    <span class="comment">//指向root，解压下一个字符</span></span><br><span class="line">                    cur = root;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当前读取的一个字节已经用完，继续解压下一个字节</span></span><br><span class="line">            ch = fgetc(fout);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fclose(fin);</span><br><span class="line">    fclose(fout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意：<br>1、读取编码转换字符的方法是：获取到的编码一定是一个字节的，但是其中可能包含了多个编码，此时结合哈弗曼树，如果编码遇到的是’1’，在哈弗曼树中向右子树中走，如果是’0’，在哈夫曼中向左子树走。一直遇到叶子节点的时候，表示此时已经翻译成功一个字符，将该字符写入解压文件中。同时将指向节点的指针重新指向根节点，此时需要解压下一个字符。<br>2、如果原文件中只有一个字符，此时是构不成哈弗曼树的，需要特殊处理这种情况。<br>3、<strong>需要控制翻译的字符的个数。</strong>因为压缩文件中最后几个位的字符可能是当初为了写入一个字节而填充的，这些并不是源文件中含有的字符。因此这些字符不能被翻译。根据哈弗曼树的性质可以知道，根节点的值就是所有叶子节点的关键值之和。所以可以获取根节点的关键值，每翻译一个字符，就将该关键值减一，当关键值为零的时候表示原文件中所有的字符都已经被翻译出来了，此时不管是否还能读取到字符，都应该直接跳出写入字符的循环，防止写入多余的无用值。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="http://www.jingxxn.cn/%E5%A0%86(heap">堆的代码</a>%E7%9A%84%E5%AE%9E%E7%8E%B0.html)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Huffman.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Heap.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">HuffmanTreeNode</span>&#123;</span></span><br><span class="line">    T _val;</span><br><span class="line">    HuffmanTreeNode&lt;T&gt;* _left;</span><br><span class="line">    HuffmanTreeNode&lt;T&gt;* _right;</span><br><span class="line"></span><br><span class="line">    HuffmanTreeNode(<span class="keyword">const</span> T&amp; val)</span><br><span class="line">        :_val(val)</span><br><span class="line">        ,_left(<span class="literal">NULL</span>)</span><br><span class="line">        ,_right(<span class="literal">NULL</span>)</span><br><span class="line">    &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">HuffmanTree</span>&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> HuffmanTreeNode&lt;T&gt; Node;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">NodeCompare</span>&#123;</span></span><br><span class="line">        <span class="comment">//const Node* left, const Node* right</span></span><br><span class="line">        <span class="comment">//wrong</span></span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(Node* left, Node* right)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> left-&gt;_val &lt; right-&gt;_val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//constructor</span></span><br><span class="line">    HuffmanTree()</span><br><span class="line">        :_root(<span class="literal">NULL</span>)</span><br><span class="line">    &#123;&#125;</span><br><span class="line">    HuffmanTree(T* arr, <span class="keyword">size_t</span> size, <span class="keyword">const</span> T&amp; invalid)&#123;</span><br><span class="line">        Heap&lt;Node*, NodeCompare&gt; minheap;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; size; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] != invalid)&#123;</span><br><span class="line">                <span class="comment">//Node*</span></span><br><span class="line">                minheap.Push(<span class="keyword">new</span> Node(arr[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//minheap.Size()&gt;1</span></span><br><span class="line">        <span class="keyword">while</span>(minheap.Size() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            Node* left = minheap.Top();</span><br><span class="line">            minheap.Pop();</span><br><span class="line">            Node* right = minheap.Top();</span><br><span class="line">            minheap.Pop();</span><br><span class="line">            Node* parent = <span class="keyword">new</span> Node(left-&gt;_val + right-&gt;_val);</span><br><span class="line">            parent-&gt;_left = left;</span><br><span class="line">            parent-&gt;_right = right;</span><br><span class="line">            minheap.Push(parent);</span><br><span class="line">        &#125;</span><br><span class="line">        _root = minheap.Top();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//destructor</span></span><br><span class="line">    ~HuffmanTree()&#123;</span><br><span class="line">        Destroy(_root);</span><br><span class="line">        _root = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Destroy</span><span class="params">(Node* root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root)&#123;</span><br><span class="line">            Destroy(root-&gt;_left);</span><br><span class="line">            Destroy(root-&gt;_right);</span><br><span class="line">            <span class="keyword">delete</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//GetRoot</span></span><br><span class="line">    <span class="function">Node* <span class="title">GetRoot</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _root;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    HuffmanTree(<span class="keyword">const</span> HuffmanTree&lt;T&gt;&amp; huf);</span><br><span class="line">    Node*&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> HuffmanTree&lt;T&gt;&amp; huf);</span><br><span class="line">    Node* _root;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestHuffmanTree</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    <span class="keyword">size_t</span> Size = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    HuffmanTree&lt;<span class="keyword">int</span>&gt; hp(arr, Size, arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; hp.GetRoot()-&gt;_val &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Compress.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"HuffmanTree.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LongType;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CharInfo</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> _ch;</span><br><span class="line">    LongType _count;</span><br><span class="line">    <span class="built_in">string</span> _code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//for invalid</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> CharInfo&amp; info)&#123;</span><br><span class="line">        <span class="keyword">return</span> _count != info._count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//for minheap.parent</span></span><br><span class="line">    CharInfo <span class="keyword">operator</span>+(<span class="keyword">const</span> CharInfo&amp; info)&#123;</span><br><span class="line">        CharInfo tmp;</span><br><span class="line">        tmp._count = _count + info._count;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//for compare</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> CharInfo&amp; info)&#123;</span><br><span class="line">        <span class="keyword">return</span> _count &lt; info._count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileCompress</span>&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> HuffmanTreeNode&lt;CharInfo&gt; HTreeNode;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TmpCharInfo</span>&#123;</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> _ch;</span><br><span class="line">        LongType _count;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//constructor</span></span><br><span class="line">    FileCompress()&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i)&#123;</span><br><span class="line">            _infos[i]._ch = i;</span><br><span class="line">            _infos[i]._count = <span class="number">0</span>;</span><br><span class="line">            _infos[i]._code = <span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Compress</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Compress</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* file)</span></span>&#123;</span><br><span class="line">        FILE* fout = fopen(file, <span class="string">"rb"</span>);</span><br><span class="line">        assert(fout);</span><br><span class="line">        <span class="keyword">int</span> ch = fgetc(fout);</span><br><span class="line">        <span class="keyword">while</span>(ch != EOF)&#123;</span><br><span class="line">            ++ _infos[(<span class="keyword">unsigned</span> <span class="keyword">char</span>)ch]._count;</span><br><span class="line">            ch = fgetc(fout);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//create HuffmanTree</span></span><br><span class="line">        CharInfo invilad;</span><br><span class="line">        invilad._count = <span class="number">0</span>;</span><br><span class="line">        HuffmanTree&lt;CharInfo&gt; tree(_infos, <span class="number">256</span>, invilad);</span><br><span class="line">        <span class="built_in">string</span> code;</span><br><span class="line">        GenerateHuffmanTreeCode(tree.GetRoot(), code);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//write</span></span><br><span class="line">        <span class="built_in">string</span> compressfile = file;</span><br><span class="line">        compressfile += <span class="string">".huffman"</span>;</span><br><span class="line">        FILE* fin = fopen(compressfile.c_str(), <span class="string">"wb"</span>);</span><br><span class="line">        assert(fin);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//write source</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(_infos[i]._count != <span class="number">0</span>)&#123;</span><br><span class="line">                TmpCharInfo info;</span><br><span class="line">                info._ch = _infos[i]._ch;</span><br><span class="line">                info._count = _infos[i]._count;</span><br><span class="line">                fwrite(&amp;info, <span class="keyword">sizeof</span>(info), <span class="number">1</span>, fin);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//flag of the end of source</span></span><br><span class="line">        TmpCharInfo info;</span><br><span class="line">        info._count = <span class="number">-1</span>;</span><br><span class="line">        fwrite(&amp;info, <span class="keyword">sizeof</span>(info), <span class="number">1</span>, fin);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//write code</span></span><br><span class="line">        fseek(fout, <span class="number">0</span>, SEEK_SET);</span><br><span class="line">        ch = fgetc(fout);</span><br><span class="line">        <span class="keyword">char</span> value = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">size_t</span> pos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(ch != EOF)&#123;</span><br><span class="line">            <span class="built_in">string</span>&amp; code = _infos[(<span class="keyword">unsigned</span> <span class="keyword">char</span>)ch]._code;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; code.size(); ++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(code[i] == <span class="string">'1'</span>)&#123;</span><br><span class="line">                    value |= (<span class="number">1</span> &lt;&lt; pos);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(code[i] == <span class="string">'0'</span>)&#123;</span><br><span class="line">                    value &amp;= ~(<span class="number">1</span> &lt;&lt; pos);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    assert(<span class="literal">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                ++ pos;</span><br><span class="line">                <span class="keyword">if</span>(pos == <span class="number">8</span>)&#123;</span><br><span class="line">                    fputc(value, fin);</span><br><span class="line">                    value = pos = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ch = fgetc(fout);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pos &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            fputc(value, fin);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fclose(fout);</span><br><span class="line">        fclose(fin);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//GenerateHuffmanTreeCode</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">GenerateHuffmanTreeCode</span><span class="params">(<span class="keyword">const</span> HTreeNode* root, <span class="built_in">string</span> code)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;_left == <span class="literal">NULL</span> &amp;&amp; root-&gt;_right == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="comment">//change _infos</span></span><br><span class="line">            _infos[(<span class="keyword">unsigned</span> <span class="keyword">char</span>)(root-&gt;_val._ch)]._code = code;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        GenerateHuffmanTreeCode(root-&gt;_left, code+<span class="string">'0'</span>);</span><br><span class="line">        GenerateHuffmanTreeCode(root-&gt;_right, code+<span class="string">'1'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//unCompress</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">UnCompress</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* file)</span></span>&#123;</span><br><span class="line">        <span class="comment">//change the name of file</span></span><br><span class="line">        <span class="built_in">string</span> uncompressfile = file;</span><br><span class="line">        <span class="keyword">size_t</span> pos = uncompressfile.rfind(<span class="string">'.'</span>);</span><br><span class="line">        <span class="keyword">if</span>(pos == <span class="built_in">string</span>::npos)&#123;</span><br><span class="line">            perror(<span class="string">"pos wrong"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        uncompressfile.erase(pos);</span><br><span class="line">        uncompressfile += <span class="string">".unhuffman"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//uncompress</span></span><br><span class="line">        <span class="comment">//open fin</span></span><br><span class="line">        FILE* fin = fopen(uncompressfile.c_str(), <span class="string">"wb"</span>);</span><br><span class="line">        assert(fin);</span><br><span class="line">        <span class="comment">//read to get ch and count</span></span><br><span class="line">        FILE* fout = fopen(file, <span class="string">"rb"</span>);</span><br><span class="line">        assert(fout);</span><br><span class="line">        TmpCharInfo info;</span><br><span class="line">        fread(&amp;info, <span class="keyword">sizeof</span>(info), <span class="number">1</span>, fout);</span><br><span class="line">        <span class="keyword">while</span>(info._count != <span class="number">-1</span>)&#123;</span><br><span class="line">            _infos[(<span class="keyword">unsigned</span> <span class="keyword">char</span>)info._ch]._ch = info._ch;</span><br><span class="line">            _infos[(<span class="keyword">unsigned</span> <span class="keyword">char</span>)info._ch]._count = info._count;</span><br><span class="line">            fread(&amp;info, <span class="keyword">sizeof</span>(info), <span class="number">1</span>, fout);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//create HuffmanTree</span></span><br><span class="line">        CharInfo invalid;</span><br><span class="line">        invalid._count = <span class="number">0</span>;</span><br><span class="line">        HuffmanTree&lt;CharInfo&gt; tree(_infos, <span class="number">256</span>, invalid);</span><br><span class="line">        HTreeNode* root = tree.GetRoot();</span><br><span class="line">        HTreeNode* cur = root;</span><br><span class="line">        LongType num = root-&gt;_val._count;</span><br><span class="line">        <span class="keyword">int</span> ch = fgetc(fout);</span><br><span class="line">        <span class="comment">//olny root</span></span><br><span class="line">        <span class="keyword">if</span>(root-&gt;_left == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(num--)&#123;</span><br><span class="line">                fputc(root-&gt;_val._ch, fin);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//more than root</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(ch != EOF)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(((<span class="keyword">unsigned</span> <span class="keyword">char</span>)ch &amp; (<span class="number">1</span> &lt;&lt; i)) == <span class="number">0</span>)&#123;</span><br><span class="line">                        cur = cur-&gt;_left;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        cur = cur-&gt;_right;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(cur-&gt;_left == <span class="literal">NULL</span> &amp;&amp; cur-&gt;_right == <span class="literal">NULL</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(num-- == <span class="number">0</span>)&#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        fputc(cur-&gt;_val._ch, fin);</span><br><span class="line">                        cur = root;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                ch = fgetc(fout);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fclose(fin);</span><br><span class="line">        fclose(fout);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    CharInfo _infos[<span class="number">256</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestFileCompress</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FileCompress fc;</span><br><span class="line">    FileCompress fcu;</span><br><span class="line">    fc.Compress(<span class="string">"file"</span>);</span><br><span class="line">    fcu.UnCompress(<span class="string">"file.huffman"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HuffmanTree&quot;&gt;&lt;a href=&quot;#HuffmanTree&quot; class=&quot;headerlink&quot; title=&quot;HuffmanTree&quot;&gt;&lt;/a&gt;HuffmanTree&lt;/h2&gt;&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;哈弗曼树是一种优化的二叉树，称为最优二叉树，是加权路径长度最小的二叉树。所谓权值在这里指的是节点中的数据。本文的哈弗曼树用数组提供数据，例如：arr[]={1,2,3,4,5,6}创建的哈弗曼树见下图：&lt;br&gt;&lt;img src=&quot;http://p3ax8ersb.bkt.clouddn.com/201804031454_423.png-480.jpg&quot; alt=&quot;hft&quot;&gt;&lt;br&gt;图中蓝色的节点值是数组arr提供，红色节点值是两个孩子节点值相加得到。&lt;br&gt;
    
    </summary>
    
      <category term="knowledge" scheme="http://www.jingxxn.cn/categories/knowledge/"/>
    
      <category term="数据结构" scheme="http://www.jingxxn.cn/categories/knowledge/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>堆(heap)的实现</title>
    <link href="http://www.jingxxn.cn/%E5%A0%86(heap)%E7%9A%84%E5%AE%9E%E7%8E%B0.html"/>
    <id>http://www.jingxxn.cn/堆(heap)的实现.html</id>
    <published>2018-04-02T09:08:01.000Z</published>
    <updated>2018-04-02T12:51:32.511Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><h3 id="最大堆和最小堆"><a href="#最大堆和最小堆" class="headerlink" title="最大堆和最小堆"></a>最大堆和最小堆</h3><p>堆是一种完全二叉树数据结构。一般他的实现可以使用链表或者数组。<strong>因为是完全二叉树，所以使用数组作为存储结构更加方便。</strong>如果有一个数组a[]={2,3,1,5,6,4};可以创建两种堆，最大堆和最小堆。<strong>所谓最大堆指的是父亲节点的值比孩子节点的值要大，最小堆指的是父亲节点的值要比孩子节点的值要小。</strong>如下图：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201804021725_368.png-960.jpg" alt="heap"><br><a id="more"></a><br><strong>生成最大堆或最小堆实际上就是对数组中的数据，按照最大堆或最小堆的规则进行交换，这里的二叉树只不过是抽象出来的形式，其本质还是他的存储结构——数组。</strong></p><h3 id="完全二叉树用vector表示"><a href="#完全二叉树用vector表示" class="headerlink" title="完全二叉树用vector表示"></a>完全二叉树用vector表示</h3><p>为什么完全二叉树用数组表示呢？这个是因为完全二叉树的特性决定的。由于是完全二叉树，所以在全部节点不是有两个孩子节点就是叶子节点。<strong>假设父亲节点的下标是n，那么用数组的方式，可以通过下标直接找到其孩子节点。(左孩子节点的下标是2*n+1,右孩子节点的下标是2*n+2。)</strong>比如上述例子中，父亲节点是a[1],那么左孩子节点是a[3]，右孩子节点是a[4]。同时如果知道孩子节点也可以知道父亲节点的下标，<strong>不管是左孩子还是右孩子节点，如果其下标是n，那么他父亲节点的下标是(n-1)/2取整。</strong><br>正是因为完全二叉树可以直接通过数组下标的方式很方便的确定父子节点，所以通过数组存储是很有效的。但是因为堆是动态增长的结构，所以采取vector为存储结构。</p><h2 id="构造堆并调整"><a href="#构造堆并调整" class="headerlink" title="构造堆并调整"></a>构造堆并调整</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Heap()</span><br><span class="line">&#123;&#125;</span><br><span class="line">Heap(T* a, <span class="keyword">size_t</span> n)&#123;</span><br><span class="line">    <span class="comment">//reserve</span></span><br><span class="line">    _array.reserve(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        _array.push_back(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = (_array.size()<span class="number">-2</span>)/<span class="number">2</span>; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">        AdjustDwon(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里提供了两个构造函数，一个是空构造函数，用来创建一个空的堆对象；一个是传参的构造函数，用来创建符合要求的堆对象。</p><h3 id="空构造函数"><a href="#空构造函数" class="headerlink" title="空构造函数"></a>空构造函数</h3><p>创建空的堆对象的构造函数，尽管函数体没有任何的执行语句，但是当该构造函数被调用的时候，类的私有成员<code>vector&lt;T&gt; _array;</code>会调用他的默认构造函数来构造一个_array对象。按道理来说这个构造函数有些画蛇添足，是因为一般来说，默认的构造函数就可以实现这个功能。<strong>可是由于有了自己定义的构造函数，编译器不会再创建默认的构造函数，所以还是需要自己显示的创建空构造函数，它的功能和默认的构造函数是一样的。</strong></p><h3 id="传参的构造函数"><a href="#传参的构造函数" class="headerlink" title="传参的构造函数"></a>传参的构造函数</h3><p>带参的构造函数是我们主要用到的构造函数，这里有几个点需要说明一下</p><h4 id="reserve-函数的使用"><a href="#reserve-函数的使用" class="headerlink" title="reserve()函数的使用"></a>reserve()函数的使用</h4><p>reserve函数作为vector容器的内置函数，它的作用是开辟指定大小的空间。因为我们已经知道了需要开辟的空间大小，所以为了节省需要多次开辟空间的导致的消耗，就利用函数reserve一次性开辟好空间，这样会节省开销。</p><h4 id="Adjustdown函数"><a href="#Adjustdown函数" class="headerlink" title="Adjustdown函数"></a>Adjustdown函数</h4><h5 id="仿函数"><a href="#仿函数" class="headerlink" title="仿函数"></a>仿函数</h5><p>再说明Adjustdown函数之前，先解释一下仿函数。仿函数顾名思义就是类似函数。其本质是对运算符<code>()</code>的重载，通过对<code>()</code>的重载，就产生了类似于函数调用的感觉，比如上述代码实现中一样，调用的时候给人的感觉就是仿函数：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201804021913_148.png-960.jpg" alt="仿函数"><br>上面这例子中定义了一个Less对象less，调用仿函数的时候就像调用了一个名为less的函数。下文代码实现了两个仿函数，分别用于创建最大堆和最小堆。在Adjustdown函数中会用到。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//仿函数</span></span><br><span class="line"><span class="comment">//Less</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">Less</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> T&amp; left, <span class="keyword">const</span> T&amp; right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> left &lt; right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//Greater</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">Greater</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> T&amp; left, <span class="keyword">const</span> T&amp; right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> left &gt; right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h5 id="Adjustdown函数-一次向下调整函数-，本文用最大堆来讲解"><a href="#Adjustdown函数-一次向下调整函数-，本文用最大堆来讲解" class="headerlink" title="Adjustdown函数(一次向下调整函数)，本文用最大堆来讲解"></a>Adjustdown函数(一次向下调整函数)，本文用最大堆来讲解</h5><p>一次向下调整函数的出现，是为了保证插入的数据在数组中是维持了最大堆或最小堆的性质。向下调整的思路很简单，查看当前父亲节点的孩子节点，如果父亲节点比两个孩子节点都要大，那么不需要交换位置；如果父亲节点比孩子节点中较大的要小，那么交换两者。这时，再查看父亲节点是否比当前的两个孩子都要大。一次循环即可。流程见下图：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201804021933_787.png-1920.jpg" alt="Adjustdown"></p><p>通过上图的调节，就完成了一次调整，起码保证了一条路径上的节点是维持了最大堆的特性。调整是利用循环实现的，循环结束的条件就是孩子节点的下标没有超过vector的大小或者父亲节点比孩子节点都要大。</p><h5 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h5><p>因为parent替换的lchild和rchild中较大的一个，那么我们怎么确定较大的那一个呢。<strong>我们可以这样，不定义左右孩子节点，只定义一个孩子节点，这个孩子节点是左孩子节点。然后用这个child节点和下标比它大一个值的节点比较大小(因为下标比它大一个值的节点一定是右孩子)，让大的作为child的值，这样就保证了child一定是孩子节点中较大的那一个。注意的是，在比较大小之前先判断右孩子是不是存在。</strong>同时，循环结束的判断可以直接用child判断是否超过vector的大小。<br>这里判断大小的时候，就利用到了仿函数。因为堆有最大堆和最小堆，如果是最大堆就利用上面的逻辑，如果是最小堆就反之。那么如何知道是最大堆还是最小堆，我们可以通过向heap类传入一个仿函数，然后在调用的时候定义是Less还是Greater仿函数即可实现比较的时候用的是大于比较还是小于比较。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Adjustdown函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdjustDwon</span><span class="params">(<span class="keyword">size_t</span> root)</span></span>&#123;</span><br><span class="line">    Compare com;</span><br><span class="line">    <span class="keyword">size_t</span> parent = root;</span><br><span class="line">    <span class="keyword">size_t</span> child = parent*<span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(child &lt; _array.size())&#123;</span><br><span class="line">        <span class="keyword">if</span>(child+<span class="number">1</span> &lt; _array.size()</span><br><span class="line">          &amp;&amp; com(_array[child+<span class="number">1</span>], _array[child]))&#123;</span><br><span class="line">            ++ child;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(com(_array[child], _array[parent]))&#123;</span><br><span class="line">            swap(_array[child], _array[parent]);</span><br><span class="line">            parent = child;</span><br><span class="line">            child = parent*<span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h5><p>但是一次向下调整函数毕竟只能改变一条路径，那么我们如何利用起来的呢。在构造函数中，我们找到堆的最后一个父亲节点，然后从这个元素依次向上调用向上调整函数就可以保证调整之后整个数组的元素符合最大堆或者最小堆的性质。带参的构造函数中是如下调用的：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = (_array.size()<span class="number">-2</span>)/<span class="number">2</span>; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">    AdjustDwon(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>寻找最后一个元素很简单，就是让vector的最后一个元素的下标减一除二取整就可以获取到最后一个父亲节点的下标。<strong>需要注意的是，vector的内置函数size()返回的元素个数，而数组的下标是从零开始的，所以需要多减去一个一才符合。</strong></p><h2 id="插入函数"><a href="#插入函数" class="headerlink" title="插入函数"></a>插入函数</h2><p>插入函数调用vector的push_back()函数进行尾插，然后从后向前调整，调用一次向上调整函数。</p><h3 id="Push函数"><a href="#Push函数" class="headerlink" title="Push函数"></a>Push函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Push</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">const</span> T&amp; x)</span></span>&#123;</span><br><span class="line">    _array.push_back(x);</span><br><span class="line">    AdjustUp(_array.size() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AdjustUp函数-向上调整函数"><a href="#AdjustUp函数-向上调整函数" class="headerlink" title="AdjustUp函数(向上调整函数)"></a>AdjustUp函数(向上调整函数)</h3><p>有了向下调整函数的基础，这个向上调整函数是同理。这里只要调用一次就好，是因为插入一个元素只会影响一条路径上的元素大小是否符合规则。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201804022003_82.png-1920.jpg" alt="adjustup"><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdjustUp</span><span class="params">(<span class="keyword">size_t</span> child)</span></span>&#123;</span><br><span class="line">    Compare com;</span><br><span class="line">    <span class="keyword">int</span> parent = (child - <span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(child &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(com(_array[child], _array[parent]))&#123;</span><br><span class="line">            swap(_array[child], _array[parent]);</span><br><span class="line">            child = parent;</span><br><span class="line">            parent = (child - <span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="出堆函数"><a href="#出堆函数" class="headerlink" title="出堆函数"></a>出堆函数</h2><p>Pop函数将堆顶的数据出堆，并保证堆的特征。如果我们是直接将堆顶的数据出堆，然后再进行调整的话，需要跟构造函数那样进行多次向下调整。那么整个堆的结构将会出现完全的改变。同时比较节点的大小的时候会十分混乱。<strong>为了解决这个矛盾，我们可以采用更巧妙的方式，通过将堆顶的数据和堆末的数据进行交换，交换之后通过vector的pop_back函数弹出，再用一次向下调整函数就可以了。</strong><br><img src="http://p3ax8ersb.bkt.clouddn.com/201804022013_693.png-1920.jpg" alt="pop"><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    swap(_array[<span class="number">0</span>], _array[_array.size() - <span class="number">1</span>]);</span><br><span class="line">    _array.pop_back();</span><br><span class="line">    AdjustDwon(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="判空，大小，堆顶元素"><a href="#判空，大小，堆顶元素" class="headerlink" title="判空，大小，堆顶元素"></a>判空，大小，堆顶元素</h2><p>这几个函数都是调用vector的内置函数封装而成。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Empty</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Empty</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _array.empty();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Size</span></span><br><span class="line"><span class="keyword">size_t</span> Size()&#123;</span><br><span class="line">    <span class="keyword">return</span> _array.size();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Top</span></span><br><span class="line"><span class="function"><span class="keyword">const</span> T&amp; <span class="title">Top</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _array[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Less</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">Less</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> T&amp; left, <span class="keyword">const</span> T&amp; right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> left &lt; right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//Greater</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">Greater</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> T&amp; left, <span class="keyword">const</span> T&amp; right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> left &gt; right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Compare</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Heap</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//constructor</span></span><br><span class="line">    Heap()</span><br><span class="line">    &#123;&#125;</span><br><span class="line">    Heap(T* a, <span class="keyword">size_t</span> n)&#123;</span><br><span class="line">        <span class="comment">//reserve</span></span><br><span class="line">        _array.reserve(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            _array.push_back(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = (_array.size()<span class="number">-2</span>)/<span class="number">2</span>; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">            AdjustDwon(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Push</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">const</span> T&amp; x)</span></span>&#123;</span><br><span class="line">        _array.push_back(x);</span><br><span class="line">        AdjustUp(_array.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Pop</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        swap(_array[<span class="number">0</span>], _array[_array.size() - <span class="number">1</span>]);</span><br><span class="line">        _array.pop_back();</span><br><span class="line">        AdjustDwon(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Empty</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Empty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _array.empty();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Size</span></span><br><span class="line">    <span class="keyword">size_t</span> Size()&#123;</span><br><span class="line">        <span class="keyword">return</span> _array.size();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Top</span></span><br><span class="line">    <span class="function"><span class="keyword">const</span> T&amp; <span class="title">Top</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _array[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Print for Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!_array.empty())&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; _array.size(); ++i)&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; _array[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;T&gt; _array;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">AdjustDwon</span><span class="params">(<span class="keyword">size_t</span> root)</span></span>&#123;</span><br><span class="line">        Compare com;</span><br><span class="line">        <span class="keyword">size_t</span> parent = root;</span><br><span class="line">        <span class="keyword">size_t</span> child = parent*<span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(child &lt; _array.size())&#123;</span><br><span class="line">            <span class="keyword">if</span>(child+<span class="number">1</span> &lt; _array.size()</span><br><span class="line">              &amp;&amp; com(_array[child+<span class="number">1</span>], _array[child]))&#123;</span><br><span class="line">                ++ child;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(com(_array[child], _array[parent]))&#123;</span><br><span class="line">                swap(_array[child], _array[parent]);</span><br><span class="line">                parent = child;</span><br><span class="line">                child = parent*<span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">AdjustUp</span><span class="params">(<span class="keyword">size_t</span> child)</span></span>&#123;</span><br><span class="line">        Compare com;</span><br><span class="line">        <span class="keyword">int</span> parent = (child - <span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(child &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(com(_array[child], _array[parent]))&#123;</span><br><span class="line">                swap(_array[child], _array[parent]);</span><br><span class="line">                child = parent;</span><br><span class="line">                parent = (child - <span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;h3 id=&quot;最大堆和最小堆&quot;&gt;&lt;a href=&quot;#最大堆和最小堆&quot; class=&quot;headerlink&quot; title=&quot;最大堆和最小堆&quot;&gt;&lt;/a&gt;最大堆和最小堆&lt;/h3&gt;&lt;p&gt;堆是一种完全二叉树数据结构。一般他的实现可以使用链表或者数组。&lt;strong&gt;因为是完全二叉树，所以使用数组作为存储结构更加方便。&lt;/strong&gt;如果有一个数组a[]={2,3,1,5,6,4};可以创建两种堆，最大堆和最小堆。&lt;strong&gt;所谓最大堆指的是父亲节点的值比孩子节点的值要大，最小堆指的是父亲节点的值要比孩子节点的值要小。&lt;/strong&gt;如下图：&lt;br&gt;&lt;img src=&quot;http://p3ax8ersb.bkt.clouddn.com/201804021725_368.png-960.jpg&quot; alt=&quot;heap&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="knowledge" scheme="http://www.jingxxn.cn/categories/knowledge/"/>
    
      <category term="数据结构" scheme="http://www.jingxxn.cn/categories/knowledge/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>BST二叉搜索树</title>
    <link href="http://www.jingxxn.cn/BST%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html"/>
    <id>http://www.jingxxn.cn/BST二叉搜索树.html</id>
    <published>2018-03-29T12:04:18.000Z</published>
    <updated>2018-04-02T12:51:33.684Z</updated>
    
    <content type="html"><![CDATA[<h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>二叉搜索树是一个优化的二叉树，也称作二叉排序树、二叉查找树、BST等。一般在每个节点定义一个关键值Key。插入的时候按照一定的规则使之有序插入，方便搜索。它可以是一颗空树，或者这棵树有着以下的性质：<br>1、如果左子树不为空，那么左子树上的所有节点的值都小于根节点的值<br>2、如果右子树不为空，那么右子树上的所有节点的值都大于根节点的值<br>3、同时，左右子树也是二叉搜索树<br>4、这棵二叉树没有相同关键值的节点，也就是每一个节点的值多不相同<br>如果插入序列是：6,3,8,7,1,2,4,0,5,9,4<br>图示如下：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803292024_340.png-960.jpg" alt="BSTree"><br><a id="more"></a></p><h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><p>二叉树用二叉链的形式实现。每个节点有一个关键值_key，指向左子树的指针_left，指向右子树的指针_right。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">K</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">BStreeNode</span>&#123;</span></span><br><span class="line">    K _key;</span><br><span class="line">    BStreeNode&lt;K&gt;* _left;</span><br><span class="line">    BStreeNode&lt;K&gt;* _right;</span><br><span class="line"></span><br><span class="line">    BStreeNode(<span class="keyword">const</span> K&amp; key)</span><br><span class="line">        :_key(key)</span><br><span class="line">        ,_left(<span class="literal">NULL</span>)</span><br><span class="line">        ,_right(<span class="literal">NULL</span>)</span><br><span class="line">    &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>分为三个步骤，<strong>查找插入位置，利用key创建节点，跟二叉树连接起来</strong><br>1、插入函数接收一个关键值key，用这个key跟当前指针指向的节点(cur)的关键值(cur-&gt;_key)比较。<br>2、如果key大，cur向右子树走；如果key小，cur向左子树走；如果相等，那么就不需要插入。这里利用一个循环就可以实现。一直到cur指向空节点，那么这个地方就是需要插入的位置。<br>4、但是为了将新增节点和二叉树连接起来，还需要一个指针指向上一个节点(parent)，此时要分清楚链入parent节点的左子树上还是右子树上。</p><h3 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h3><p>插入key为4的节点<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803292052_880.png-960.jpg" alt="1"><br><img src="http://p3ax8ersb.bkt.clouddn.com/201803292101_332.png-960.jpg" alt="2"><br><img src="http://p3ax8ersb.bkt.clouddn.com/201803292102_172.png-960.jpg" alt="3"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>代码分为递归写法和非递归写法<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//非递归</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Insert</span><span class="params">(<span class="keyword">const</span> K&amp; key)</span></span>&#123;</span><br><span class="line">    <span class="comment">//特殊处理插入空树的情况</span></span><br><span class="line">    <span class="keyword">if</span>(_root == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        _root = <span class="keyword">new</span> Node(key);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node* cur = _root;</span><br><span class="line">    Node* parent = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//查找插入位置</span></span><br><span class="line">    <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur-&gt;_key &lt; key)&#123;</span><br><span class="line">            parent = cur;</span><br><span class="line">            cur = cur-&gt;_right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cur-&gt;_key &gt; key)&#123;</span><br><span class="line">            parent = cur;</span><br><span class="line">            cur = cur-&gt;_left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//已经有相同关键值的节点，不插入</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cur = <span class="keyword">new</span> Node(key);</span><br><span class="line">    <span class="comment">//插入到parent的右子树上</span></span><br><span class="line">    <span class="keyword">if</span>(parent-&gt;_key &lt; key)&#123;</span><br><span class="line">        parent-&gt;_right = cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        parent-&gt;_left = cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归写法</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertR</span><span class="params">(<span class="keyword">const</span> K&amp; key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _InsertR(_root, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//root使用的是引用，解决了连接的问题</span></span><br><span class="line"><span class="keyword">bool</span> _InsertR(Node*&amp; root, <span class="keyword">const</span> K&amp; key)&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        root = <span class="keyword">new</span> Node(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;_key &lt; key)&#123;</span><br><span class="line">        _InsertR(root-&gt;_right, key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;_key &gt; key)&#123;</span><br><span class="line">        _InsertR(root-&gt;_left, key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>这里解释两个地方：1、递归为什么要调用一个内置函数，不直接递归。2、递归写法为什么不需要链接的过程。</strong><br>1、由于递归函数需要多次调用本身，考虑如果不调用内置函数，为了实现递归左右子树，需要传入参数如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertR</span><span class="params">(Node* root, <span class="keyword">const</span> K&amp; key)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>但是很尴尬的是，我们没有办法将根节点_root的左子树或者右子树进行调用。因为_root是私有的，我们在类的外面是没有办法直接调用的。<br>2、递归写法不是不需要链接的过程，而是连接的过程在使用了引用root这个语法之后，隐式的完成了。一个例子：我们现在有一个关键值为6的节点，我们要插入关键值为3的节点。根据代码，代码会走到<code>_InsertR(root-&gt;_left, key);</code>这里。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803292125_442.png-960.jpg" alt="InsertR"><br>此时的root有两层含义：<strong>第一层，root是当前节点的位置，指向了NULL；第二层，root是上一层函数root-&gt;_left指向的位置。之所以会有这样的联系，是因为root参数是引用的原因，当前的root是上一层函数的root-&gt;_left的别名。</strong>这样我们就不需要考虑连接的问题了，只要将新增节点直接交给当前函数的root就已经和二叉树连接在一起了。</p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>查找的思路十分简单，可以认为是插入的弱化版本。找到返回当前节点的指针，未找到返回空指针。</p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><p>查找函数也有非递归和递归两个版本。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Find</span></span><br><span class="line"><span class="function">Node* <span class="title">Find</span><span class="params">(<span class="keyword">const</span> K&amp; key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(_root)&#123;</span><br><span class="line">        Node* cur = _root;</span><br><span class="line">        <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;_key &lt; key)&#123;</span><br><span class="line">                cur = cur-&gt;_right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cur-&gt;_key &gt; key)&#123;</span><br><span class="line">                cur = cur-&gt;_left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> cur;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//FindR</span></span><br><span class="line"><span class="function">Node* <span class="title">FindR</span><span class="params">(<span class="keyword">const</span> K&amp; key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _FindR(_root, key);</span><br><span class="line">&#125;</span><br><span class="line">Node* _FindR(Node* root, <span class="keyword">const</span> K&amp; key)&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;_key &lt; key)&#123;</span><br><span class="line">        _FindR(root-&gt;_right, key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;_key &gt; key)&#123;</span><br><span class="line">        _FindR(root-&gt;_left, key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h3 id="删除思路"><a href="#删除思路" class="headerlink" title="删除思路"></a>删除思路</h3><p>删除较为复杂，分析如下：<br>1、当前树是否为空<br>2、寻找需要删除节点的位置<br>3、如果删除的节点是叶子节点或者有一个子树为空的情况，可以归为第一类<br>4、如果删除的节点两个子树都存在，归为第二类<br>使用示例：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201804012101_948.png-960.jpg" alt="delete"></p><h3 id="第一类，叶子节点或者有一个子树为空"><a href="#第一类，叶子节点或者有一个子树为空" class="headerlink" title="第一类，叶子节点或者有一个子树为空"></a>第一类，叶子节点或者有一个子树为空</h3><p>为什么将叶子节点归为这一类，是因为可以将叶子节点看做是左子树为空或者右子树为空的情况。</p><h4 id="左子树为空"><a href="#左子树为空" class="headerlink" title="左子树为空"></a>左子树为空</h4><p><img src="http://p3ax8ersb.bkt.clouddn.com/201804012105_224.png-960.jpg" alt="left"><br>左子树为空分为两种情况，第一种上图中红色cur一样，是parent的左子树，需要用parent的左去链接cur的右子树；第二种是上图中橙色cur，是parent的右子树，需要用parent的右去链接cur的右子树。</p><h4 id="右子树为空"><a href="#右子树为空" class="headerlink" title="右子树为空"></a>右子树为空</h4><p><img src="http://p3ax8ersb.bkt.clouddn.com/201804012108_886.png-960.jpg" alt="right"><br>同理，右子树为空也分为两种情况，上图中红色cur和橙色cur。</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>需要特殊处理parent是NULL的情况。当左右子树为空的时候，还有一种特殊的情况需要处理，如果符合要求的节点是根节点，我们需要特殊处理。如下图：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201804012112_557.png-960.jpg" alt="left&amp;&amp;right"></p><h3 id="第二类，两个子树都存在"><a href="#第二类，两个子树都存在" class="headerlink" title="第二类，两个子树都存在"></a>第二类，两个子树都存在</h3><p>这个类型的节点，需要使用到处理堆的一个操作。如果有一个大堆，需要获取第二大的节点的时候。需要将最大的节点出堆，然后获取堆顶数据。但是出堆之后，如果需要堆还是符合大堆的性质。就需要特殊处理。处理方法是替换：将堆顶的最大元素和最小元素交换，然后再删除最后一个节点，最后使用向下调整就可以了。<strong>这里也是这样处理，当我们找到了需要删除的节点，我们就去找右子树中最小的节点，然后替换，替换之后再删除。</strong>如图所示：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201804012134_928.png-960.jpg" alt="root"><br>如果需要删除节点cur，这个时候找到右子树中最小的节点pos，将节点pos的值赋给节点cur，让parent-&gt;_left==NULL。再删除cur节点，就实现了删除了。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201804012130_805.png-960.jpg" alt="small"><br>但是为什么是节点pos呢？这是因为删除了两个子树都在的节点。还需要保持BST的特性：左右子树还是BST。<strong>这时，右子树的最左节点肯定是右子树中最小的，或者说是排序下，跟当前删除节点相邻的节点。用它来改变删除节点最合适了，而且不需要对树的结构有大的修改。</strong><br><strong>注意</strong>：这里有一个特殊的点，比如删除下图中的根节点。<strong>特殊的地方是，没有办法找到子树中的最左节点，因为根本没有</strong>，所以就需要在使用上述交换的方法的时候，特殊处理一次，判断parent的指向的时候，到底是直接让parent-&gt;_left==NULL还是parent-&gt;_right==pos-&gt;_right。通过删除节点pos的右是否存在判定。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201804012132_344.png-960.jpg" alt="特殊"></p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><p>递归和非递归两种情况<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Remove</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Remove</span><span class="params">(<span class="keyword">const</span> K&amp; key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(_root)&#123;</span><br><span class="line">        Node* cur = _root;</span><br><span class="line">        Node* parent = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">            <span class="comment">//寻找节点</span></span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;_key &lt; key)&#123;</span><br><span class="line">                parent = cur;</span><br><span class="line">                cur = cur-&gt;_right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cur-&gt;_key &gt; key)&#123;</span><br><span class="line">                parent = cur;</span><br><span class="line">                cur = cur-&gt;_left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//找到节点开始删除</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                Node* del = cur;</span><br><span class="line">                <span class="comment">//删除节点的左子树为空</span></span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;_left == <span class="literal">NULL</span>)&#123;</span><br><span class="line">                    <span class="comment">//特殊处理parent为NULL的情况</span></span><br><span class="line">                    <span class="keyword">if</span>(parent == <span class="literal">NULL</span>)&#123;</span><br><span class="line">                        _root = cur-&gt;_right;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="comment">//分cur是parent的左还是右子树</span></span><br><span class="line">                        <span class="keyword">if</span>(parent-&gt;_left == cur)&#123;</span><br><span class="line">                            parent-&gt;_left = cur-&gt;_right;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span>&#123;</span><br><span class="line">                            parent-&gt;_right = cur-&gt;_right;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//删除节点的右子树为空</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(cur-&gt;_right == <span class="literal">NULL</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(parent == <span class="literal">NULL</span>)&#123;</span><br><span class="line">                        _root = cur-&gt;_left;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(parent-&gt;_left == cur)&#123;</span><br><span class="line">                            parent-&gt;_left = cur-&gt;_left;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span>&#123;</span><br><span class="line">                            parent-&gt;_right = cur-&gt;_left;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//删除节点的两个子树都在</span></span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    parent = cur;</span><br><span class="line">                    Node* pos = cur-&gt;_right;</span><br><span class="line">                    <span class="comment">//寻找右子树最左节点</span></span><br><span class="line">                    <span class="keyword">while</span>(pos-&gt;_left)&#123;</span><br><span class="line">                        parent = pos;</span><br><span class="line">                        pos = pos-&gt;_left;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//赋值给cur</span></span><br><span class="line">                    cur-&gt;_key = pos-&gt;_key;</span><br><span class="line">                    del = pos;</span><br><span class="line">                    <span class="comment">//特殊处理pos是不是找到的右子树中的最左节点</span></span><br><span class="line">                    <span class="keyword">if</span>(pos-&gt;_right)&#123;</span><br><span class="line">                        parent-&gt;_right = pos-&gt;_right;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        parent-&gt;_left = <span class="literal">NULL</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//三种情况统一删除</span></span><br><span class="line">                <span class="keyword">delete</span> del;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//没找到，返回错误</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//RemoveR</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">RemoveR</span><span class="params">(<span class="keyword">const</span> K&amp; key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _RemoveR(_root, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> _RemoveR(Node*&amp; root, <span class="keyword">const</span> K&amp; key)&#123;</span><br><span class="line">    <span class="keyword">if</span>(root)&#123;</span><br><span class="line">        Node* cur = root;</span><br><span class="line">        <span class="keyword">if</span>(cur-&gt;_key &lt; key)&#123;</span><br><span class="line">            _RemoveR(root-&gt;_right, key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cur-&gt;_key &gt; key)&#123;</span><br><span class="line">            _RemoveR(root-&gt;_left, key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            Node* del = root;</span><br><span class="line">            <span class="keyword">if</span>(root-&gt;_left == <span class="literal">NULL</span>)&#123;</span><br><span class="line">                root = root-&gt;_right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;_right == <span class="literal">NULL</span>)&#123;</span><br><span class="line">                root = root-&gt;_left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                Node* pos = root-&gt;_right;</span><br><span class="line">                <span class="keyword">while</span>(pos-&gt;_left)&#123;</span><br><span class="line">                    pos = pos-&gt;_left;</span><br><span class="line">                &#125;</span><br><span class="line">                root-&gt;_key = pos-&gt;_key;</span><br><span class="line">                <span class="keyword">return</span> _RemoveR(root-&gt;_right, pos-&gt;_key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">delete</span> del;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>说明一下递归调用的思想，对于树来说，递归的调用就相当于子问题的调用，每次都将左右节点当做是下次的根节点，然后通过相同的处理方式，一直到遇到返回条件。在递归删除中，也利用了引用的关键作用。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(root-&gt;_left == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    root = root-&gt;_right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;_right == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    root = root-&gt;_left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这一段中，因为引用的原因，当前的root除了是指向当前节点的指针，还是上一级root指针的_left或者_right。这样也就不需要考虑连接的问题。在递归中处理删除节点的左右子树都在的情况，还是寻找到右子树中key最小的节点，然后赋值给需要删除的节点，在通过调用函数来删除这个节点，这样就可以直接利用删除左节点为空或者右节点为空的情况来处理。</p><h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><p>二叉搜索树又叫做排序树，这个是因为他是排好序的。同时如果使用中序遍历的话，就可以得到这个排好序的序列。</p><h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><p>利用中序的遍历，也有递归和非递归两种形式。非递归的形式，是借用了栈来模拟回退的功能。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//InOrder</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Node* root = _root;</span><br><span class="line">    <span class="keyword">if</span>(_root)&#123;</span><br><span class="line">        Node* cur = root;</span><br><span class="line">        <span class="built_in">stack</span>&lt; Node* &gt; s;</span><br><span class="line">        <span class="keyword">while</span>(cur || !s.empty())&#123;</span><br><span class="line">            <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">                s.push(cur);</span><br><span class="line">                cur = cur-&gt;_left;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = s.top();</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; cur-&gt;_key &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">            s.pop();</span><br><span class="line">            cur = cur-&gt;_right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//InOrderR</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderR</span><span class="params">()</span></span>&#123;</span><br><span class="line">    _InOrderR(_root);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> _InOrderR(Node* root)&#123;</span><br><span class="line">    <span class="keyword">if</span>(root)&#123;</span><br><span class="line">        _InOrderR(root-&gt;_left);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; root-&gt;_key &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        _InOrderR(root-&gt;_right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;性质&quot;&gt;&lt;a href=&quot;#性质&quot; class=&quot;headerlink&quot; title=&quot;性质&quot;&gt;&lt;/a&gt;性质&lt;/h2&gt;&lt;p&gt;二叉搜索树是一个优化的二叉树，也称作二叉排序树、二叉查找树、BST等。一般在每个节点定义一个关键值Key。插入的时候按照一定的规则使之有序插入，方便搜索。它可以是一颗空树，或者这棵树有着以下的性质：&lt;br&gt;1、如果左子树不为空，那么左子树上的所有节点的值都小于根节点的值&lt;br&gt;2、如果右子树不为空，那么右子树上的所有节点的值都大于根节点的值&lt;br&gt;3、同时，左右子树也是二叉搜索树&lt;br&gt;4、这棵二叉树没有相同关键值的节点，也就是每一个节点的值多不相同&lt;br&gt;如果插入序列是：6,3,8,7,1,2,4,0,5,9,4&lt;br&gt;图示如下：&lt;br&gt;&lt;img src=&quot;http://p3ax8ersb.bkt.clouddn.com/201803292024_340.png-960.jpg&quot; alt=&quot;BSTree&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="knowledge" scheme="http://www.jingxxn.cn/categories/knowledge/"/>
    
      <category term="数据结构" scheme="http://www.jingxxn.cn/categories/knowledge/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>linux下简易彩色进度条</title>
    <link href="http://www.jingxxn.cn/linux%E4%B8%8B%E7%AE%80%E6%98%93%E5%BD%A9%E8%89%B2%E8%BF%9B%E5%BA%A6%E6%9D%A1.html"/>
    <id>http://www.jingxxn.cn/linux下简易彩色进度条.html</id>
    <published>2018-03-19T11:03:14.000Z</published>
    <updated>2018-03-19T13:11:24.096Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在Linux下安装文件的时候，都会有个进度条来提示我们安装的进度是多少。这里我们模拟输出这个进度条。主要用到输出函数的操作、缓冲区的刷新、usleep函数、linux终端颜色的显示等知识。<br>效果如下：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803191947_365.gif-1920.jpg" alt="进度条"><br><img src="http://p3ax8ersb.bkt.clouddn.com/201803191947_20.gif-1920.jpg" alt="彩色进度条"><br><a id="more"></a></p><h3 id="铺垫知识点"><a href="#铺垫知识点" class="headerlink" title="铺垫知识点"></a>铺垫知识点</h3><p><strong>缓冲区</strong><br>缓冲区分位三种：无缓冲，行缓冲，全缓冲。<br><strong>无缓冲</strong>：没有缓冲，也就是信息在输入输出的时候，立马输入或输出。典型的代表就是标准错误流stderr。<br><strong>行缓冲</strong>：当输入输出的时候，遇到换行才执行I/O操作。典型的代表是键盘的操作。<br><strong>全缓冲</strong>：当输入输出写满缓冲区才执行I/O操作。典型的代表是磁盘的读写。<br>由于输出函数是行缓冲类型的。所以我们需要使用缓冲区刷新函数fflush来输出。否则我们看到的进度条将是一段一段输出的。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803191959_49.gif-1920.jpg" alt="错误进度条"><br>补充：printf函数是一个行缓冲函数，先写到缓冲区，满足条件就将缓冲区刷到对应文件中。满足下列条件之一，缓冲区都会刷新：<br>（1）缓冲区填满<br>（2）写入的字符中有<code>&#39;\n&#39;&#39;\r&#39;</code><br>（3）调用fflush刷新缓冲区<br>（4）调用scanf从缓冲区获取数据时，也会刷新新缓冲区。</p><p><strong>换行符</strong><br>有两个符号需要区分：<code>&#39;\n&#39;&#39;\r&#39;</code>。他们有不同的含义。<strong><code>&#39;\n&#39;</code>表示的是换行，将光标指向下一行的开头位置。’`r’`指的是回车，将光标回到当前行的开头位置。</strong>在这里我们要使用<code>&#39;\r&#39;</code>，否则我们的进度条将输出一个<code>&#39;#&#39;</code>就换一行。</p><p><strong>usleep函数</strong><br>刷新了缓冲区之后，如果并没有加上睡眠函数，结果将一次性输出来。进度条应该是随着加载不停出现才对。<br>这里统一总结一下Linux睡眠函数：<br>头文件：<code>#include &lt;unistd.h&gt;</code><br>以 <strong>秒</strong>为单位：unsigned int sleep( unsigned int seconds );<br>以 <strong>微秒</strong>为单位：int usleep ( useconds_t usec );<br>以 <strong>四分之一毫秒</strong>为单位：extern void delay( unsigned int msec );</p><p>以睡眠一秒为例:<br>sleep(1); usleep(1000 000); delay(250);</p><p><strong>输出颜色的设置</strong><br>printf函数可以通过输出特定的转义序列来实现输出字符的颜色和状态。<br>转义序列以控制字符’ESC’开头。该字符的ASCII码十进制表示为27，十六进制表示为0x1B，八进制表示为033。多数转义序列超过两个字符，故通常以’ESC’和左括号’[‘开头。该起始序列称为控制序列引导符(CSI，Control Sequence Intro)，通常由’\033[‘或’\e[‘代替。<br><strong>一般格式如下：(显示方式指的是样式，前景色是30+颜色值，背景色是40+颜色值，字符m表示结束)</strong></p><blockquote><p>\033[显示方式；前景色；背景色m + 输出字符串<br>或者<br>\e[显示方式；前景色；背景色m + 输出字符串</p></blockquote><p>常见参数如下：<br>显示方式：0(默认)、1(粗体/高亮)、22(非粗体)、4(单条下划线)、24(无下划线)、5(闪烁)、25(无闪烁)、7(反显、翻转前景色和背景色)、27(无反显)<br>颜色：0(黑)、1(红)、2(绿)、 3(黄)、4(蓝)、5(洋红)、6(青)、7(白)<br>见例子：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"\033[31mHello!\n\033[0m"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\033[4;32mHello!\n\033[0m"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\033[1;34;43mHello!\n\033[0m"</span>);</span><br></pre></td></tr></table></figure></p><p><img src="http://p3ax8ersb.bkt.clouddn.com/201803192037_682.png-480.jpg" alt="color"><br>其中：<strong>\033[0m用于恢复默认的终端输出属性，否则会影响后续的输出。</strong><br><a href="http://www.cnblogs.com/clover-toeic/p/4031618.html" target="_blank" rel="noopener"><strong>颜色设置详细解析传送门</strong></a></p><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> bar[<span class="number">102</span>];</span><br><span class="line">    <span class="comment">//color数组用来改变颜色的值，让进度条在七种颜色中变幻</span></span><br><span class="line">    <span class="keyword">int</span> color[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    <span class="comment">//设置状态，显示此时正在加载</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *status = <span class="string">"|/-\\"</span>;</span><br><span class="line">    <span class="built_in">memset</span>(bar, <span class="number">0</span>, siezof(bar));</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= <span class="number">100</span>)&#123;</span><br><span class="line">        <span class="comment">//无颜色版本</span></span><br><span class="line">        <span class="comment">//printf("[%-100s][%d%%][%c]\r", bar, i, status[i%4]);</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\033[3%dm[%-100s]\033[0m\033[33m[%d%%]\033[0m[%c]\r"</span>, color[j], bar, i, lable[i%<span class="number">4</span>]);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        bar[i ++] = <span class="string">'#'</span>;</span><br><span class="line">        <span class="comment">//每加载15%，就变换一次颜色</span></span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">15</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            ++ j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//休眠0.03秒输出字符</span></span><br><span class="line">        usleep(<span class="number">30000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://p3ax8ersb.bkt.clouddn.com/201803192104_382.png-1920.jpg" alt="代码分析"><br><a href="http://blog.csdn.net/sssssuuuuu666/article/details/78599860" target="_blank" rel="noopener">参考一</a><br><a href="http://blog.csdn.net/ArchyLi/article/details/78680231" target="_blank" rel="noopener">参考二</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在Linux下安装文件的时候，都会有个进度条来提示我们安装的进度是多少。这里我们模拟输出这个进度条。主要用到输出函数的操作、缓冲区的刷新、usleep函数、linux终端颜色的显示等知识。&lt;br&gt;效果如下：&lt;br&gt;&lt;img src=&quot;http://p3ax8ersb.bkt.clouddn.com/201803191947_365.gif-1920.jpg&quot; alt=&quot;进度条&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://p3ax8ersb.bkt.clouddn.com/201803191947_20.gif-1920.jpg&quot; alt=&quot;彩色进度条&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.jingxxn.cn/categories/Linux/"/>
    
      <category term="practice" scheme="http://www.jingxxn.cn/categories/Linux/practice/"/>
    
    
  </entry>
  
  <entry>
    <title>C语言输入输出函数详解</title>
    <link href="http://www.jingxxn.cn/C%E8%AF%AD%E8%A8%80%E6%96%87%E4%BB%B6%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3.html"/>
    <id>http://www.jingxxn.cn/C语言文件输入输出函数详解.html</id>
    <published>2018-03-15T11:56:44.000Z</published>
    <updated>2018-03-22T10:14:24.061Z</updated>
    
    <content type="html"><![CDATA[<h3 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误报告函数：</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">perror</span><span class="params">( <span class="keyword">char</span> <span class="keyword">const</span>* str )</span></span>;</span><br><span class="line"><span class="comment">//终止执行函数：</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exit</span> <span class="params">(<span class="keyword">int</span> status)</span></span>;</span><br><span class="line"><span class="comment">//打开和关闭文件函数</span></span><br><span class="line"><span class="function">FILE * <span class="title">fopen</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> * filename, <span class="keyword">const</span> <span class="keyword">char</span> * mode )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fclose</span> <span class="params">( FILE * stream )</span></span>;</span><br><span class="line"><span class="comment">//字符输入函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fgetc</span> <span class="params">( FILE * stream )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getc</span> <span class="params">( FILE * stream )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getchar</span> <span class="params">( <span class="keyword">void</span> )</span></span>;</span><br><span class="line"><span class="comment">//字符输出函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputc</span> <span class="params">( <span class="keyword">int</span> character, FILE * stream )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">putc</span> <span class="params">( <span class="keyword">int</span> character, FILE * stream )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">putchar</span> <span class="params">( <span class="keyword">int</span> character )</span></span>;</span><br><span class="line"><span class="comment">//撤销字符函数：</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ungetc</span> <span class="params">( <span class="keyword">int</span> character, FILE * stream )</span></span>;</span><br><span class="line"><span class="comment">//文本行输入函数</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">fgets</span> <span class="params">( <span class="keyword">char</span> * str, <span class="keyword">int</span> num, FILE * stream )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">gets</span><span class="params">( <span class="keyword">char</span>* str )</span></span>;</span><br><span class="line"><span class="comment">//文本行输出函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputs</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> * str, FILE * stream )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">puts</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> * str )</span></span>;</span><br><span class="line"><span class="comment">//格式化输入函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fscanf</span><span class="params">( FILE* stream, <span class="keyword">const</span> <span class="keyword">char</span>* format, ... )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">scanf</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span>* format, ... )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sscanf</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span>* s, <span class="keyword">const</span> <span class="keyword">char</span>* format, ... )</span></span>;</span><br><span class="line"><span class="comment">//格式化输出函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fprintf</span><span class="params">( FILE* stream, <span class="keyword">const</span> <span class="keyword">char</span>* format, ... )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span>* format, ... )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sprintf</span><span class="params">( <span class="keyword">char</span>* str, <span class="keyword">const</span> <span class="keyword">char</span>* format, ... )</span></span>;</span><br><span class="line"><span class="comment">//二进制I/O函数</span></span><br><span class="line"><span class="keyword">size_t</span> fread( <span class="keyword">void</span>* ptr, <span class="keyword">size_t</span> size, <span class="keyword">size_t</span> count, FILE* stream );</span><br><span class="line"><span class="keyword">size_t</span> fwrite( <span class="keyword">void</span>* ptr, <span class="keyword">size_t</span> size, <span class="keyword">size_t</span> count, FILE* stream );</span><br><span class="line"><span class="comment">//刷新缓冲区函数：</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fflush</span> <span class="params">( FILE * stream )</span></span>;</span><br><span class="line"><span class="comment">//文件流定位函数</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">int</span> <span class="title">ftell</span><span class="params">( FILE* stream )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fseek</span><span class="params">( FILE* stream, <span class="keyword">long</span> offset, <span class="keyword">int</span> from )</span></span>;</span><br><span class="line"><span class="comment">//流错误函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">feof</span><span class="params">( FILE* stream )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ferror</span><span class="params">( FILE* stream )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clearerr</span><span class="params">( FILE* stream )</span></span>;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="错误报告函数：void-perror-char-const-str"><a href="#错误报告函数：void-perror-char-const-str" class="headerlink" title="错误报告函数：void perror( char const* str );"></a>错误报告函数：void perror( char const* str );</h3><p>先解释一个整型变量errno，这个变量是错误码，当一个库函数失败的时候，errno会被设置。<br><strong>形参</strong>：str是一个字符串<br><strong>补充</strong>：当一个程序执行了错误的操作的时候，操作系统设置一个errno，perror函数首先会将str中的信息打印出来，后面跟上一个分号和空格，在打印出一条用于解释errno当前错误码的信息。<br><strong>例子</strong>：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* perror example */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  FILE * pFile;</span><br><span class="line">  pFile=fopen (<span class="string">"unexist.ent"</span>,<span class="string">"rb"</span>);</span><br><span class="line">  <span class="keyword">if</span> (pFile==<span class="literal">NULL</span>)</span><br><span class="line">    perror (<span class="string">"The following error occurred"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    fclose (pFile);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果文件unexist.ent不存在，那么将会输出以下信息：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803152133_220.png-480.jpg" alt="perror"></p><p><strong>注意</strong>：只有当一个库函数失败的时候，errno才会被设定。当函数成功运行的时候，errno并不会被设定。所以我们不能通过测试errno的值来判断是否有错误发生。</p><h3 id="终止执行函数：void-exit-int-status"><a href="#终止执行函数：void-exit-int-status" class="headerlink" title="终止执行函数：void exit( int status );"></a>终止执行函数：void exit( int status );</h3><p><strong>头文件</strong>：stdlib.h<br><strong>形参</strong>：status参数返还给操作系统。预定符号是EXIT_SUCCESS和EXIT_FAILURE。通常用0和EXIT_SUCCESS表示程序正常退出，用除零以外的整数和EXIT_FAILURE表示程序退出异常。<br><strong>补充</strong>：我们经常将这个函数和perror配合起来使用，当我们发现了程序的错误的时候，用来终止程序的执行。<br><strong>例子</strong>：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* exit example */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;      /* printf, fopen */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;     /* exit, EXIT_FAILURE */</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  FILE * pFile;</span><br><span class="line">  pFile = fopen (<span class="string">"myfile.txt"</span>,<span class="string">"r"</span>);</span><br><span class="line">  <span class="keyword">if</span> (pFile==<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">"Error opening file"</span>);</span><br><span class="line">    <span class="built_in">exit</span> (EXIT_FAILURE);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* file operations here */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果文件myfile.txt不存在<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803152130_637.png-480.jpg" alt="exit"></p><h3 id="打开文件函数：FILE-fopen-char-const-filename-const-char-mode"><a href="#打开文件函数：FILE-fopen-char-const-filename-const-char-mode" class="headerlink" title="打开文件函数：FILE* fopen( char const* filename, const char* mode );"></a>打开文件函数：FILE* fopen( char const* filename, const char* mode );</h3><p><strong>形参</strong>：两个参数都是字符串，filename是希望打开的文件或者设备名字；mode是用来表示流是用于只读、只写、读和写，以及是文本流还是二进制流。<br><strong>返回值</strong>：如果成功打开文件，返回一个指向FILE类型的指针。失败返回一个NULL，并把错误码存入errno中。<br><strong>补充</strong>：以一定的模式打开文件或设备。模式常见如下：<br>以下模式用文本流打开：</p><table><thead><tr><th style="text-align:center">模式</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:center">“r”</td><td>read，只能读取，不能写入，同时要求文件必须存在。</td></tr><tr><td style="text-align:center">“w”</td><td>write，只能写入，不能读取。若文件存在，那么清空文件内容再写入；若文件不存在，创建文件再写入。</td></tr><tr><td style="text-align:center">“a”</td><td>append，只能写入，不能读取。若文件存在，在文件末尾添加内容；如果文件不存在，创建文件再写入。</td></tr><tr><td style="text-align:center">“r+”</td><td>read/update，可读可写，要求文件必须存在。</td></tr><tr><td style="text-align:center">“w+”</td><td>write/update，可读可写，如果文件存在，清空文件内容再写入；如果文件不存在，创建文件再写入。</td></tr><tr><td style="text-align:center">“a+”</td><td>append/update，可读可写，若文件存在，在文件末尾添加内容；若文件不存在，创建文件再写入。</td></tr></tbody></table><p>以下模式用二进制流打开：<br>“rb”, “wb”, “ab”, “r+b”, “w+b”, “a+b”或者”rb+”, “wb+”, “ab+”。功能和文本流一样，只是打开写入方式是二进制流。</p><p>二进制流和文本流的区别：<br><strong>文本流(text)</strong>：指的是在流中流动的数据是 <strong>以字符形式出现</strong>的。举个例子：输入的时候，’\n’这个符号会被替换为回车CR和换行的ASCII码0DH和0AH。输出的时候，0DH和0AH被替换为’\n’。<br><strong>二进制流(binary)</strong>：指的是在流中流动的数据是以 <strong>二进制数字序列</strong>出现的。<strong>说白了就是在内存中是怎么存储的，输入到文件中也是怎么样存储的。</strong>而且不会对’\n’进行替换。<br>举个例子：对于2001这个数<br>文本流用ASCII码表示：’2’’0’’0’’1’分别是：50,48,48,49一共是四个字节<br>二进制流表示为：0000 0111 1101 0001转换为十六进制就是07D1，占用了两个字节。<br>此例来源：<a href="http://blog.csdn.net/barryCG/article/details/7621097" target="_blank" rel="noopener">http://blog.csdn.net/barryCG/article/details/7621097</a></p><p><strong>例子</strong>：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* fopen example */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  FILE * pFile;</span><br><span class="line">  pFile = fopen (<span class="string">"myfile.txt"</span>,<span class="string">"w"</span>);</span><br><span class="line">  <span class="keyword">if</span> (pFile!=<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">fputs</span> (<span class="string">"fopen example"</span>,pFile);</span><br><span class="line">    fclose (pFile);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果没有myfile.txt这个文件，将会创建一个myfile.txt文件，并写入内容fopen example。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803161411_68.png-480.jpg" alt="fopen"></p><h3 id="关闭文件函数：int-fclose-FILE-stream"><a href="#关闭文件函数：int-fclose-FILE-stream" class="headerlink" title="关闭文件函数：int fclose( FILE* stream );"></a>关闭文件函数：int fclose( FILE* stream );</h3><p><strong>形参</strong>：stram是一个FILE类型指针指向的流文件。<br><strong>返回值</strong>：当文件被正常关闭，返回一个整型的0；如果关闭异常，返回文件结束符EOF，通常被解释为整型的-1。<br><strong>补充</strong>：我们习惯于将fopen和fclose搭配使用。fclose会在文件关闭的之前刷新缓冲区，将缓冲区的数据存入文件中，否则会有数据丢失。必要的时候，我们需要检测fclose的返回值是否正确，以避免数据丢失或。</p><h3 id="输入输出函数总览"><a href="#输入输出函数总览" class="headerlink" title="输入输出函数总览"></a>输入输出函数总览</h3><table><thead><tr><th style="text-align:center">家族名</th><th style="text-align:center">目的</th><th style="text-align:center"><strong>可用于所有的流</strong></th><th style="text-align:center"><strong>只用于stdin或stdout</strong></th><th style="text-align:center">内存中的字符串</th></tr></thead><tbody><tr><td style="text-align:center">getchar</td><td style="text-align:center">字符输入</td><td style="text-align:center">fget,getc</td><td style="text-align:center">getchar</td><td style="text-align:center">①</td></tr><tr><td style="text-align:center">putchar</td><td style="text-align:center">字符输出</td><td style="text-align:center">fputc,putc</td><td style="text-align:center">putchar</td><td style="text-align:center">①</td></tr><tr><td style="text-align:center">gets</td><td style="text-align:center">文本行输入</td><td style="text-align:center">fgets</td><td style="text-align:center">gets</td><td style="text-align:center">②</td></tr><tr><td style="text-align:center">puts</td><td style="text-align:center">文本行输出</td><td style="text-align:center">fputs</td><td style="text-align:center">puts</td><td style="text-align:center">②</td></tr><tr><td style="text-align:center">scanf</td><td style="text-align:center">格式化输入</td><td style="text-align:center">fscanf</td><td style="text-align:center">scanf</td><td style="text-align:center">sscanf</td></tr><tr><td style="text-align:center">printf</td><td style="text-align:center">格式化输出</td><td style="text-align:center">fprintf</td><td style="text-align:center">printf</td><td style="text-align:center">sprintf</td></tr></tbody></table><p>①表示对指针使用下标引用或间接访问操作从内存中获得\写入一个字符<br>②使用strcpy函数从内存读取\写入文本行</p><h3 id="字符输入函数：fgetc、getc、getchar"><a href="#字符输入函数：fgetc、getc、getchar" class="headerlink" title="字符输入函数：fgetc、getc、getchar"></a>字符输入函数：fgetc、getc、getchar</h3><p><strong>函数原型：</strong><br><strong>int fgetc( FILE* stream ); 用于所有流</strong><br><strong>宏原型：</strong><br><strong>int getc(FILE* stream ); 用于所有流</strong><br><strong>int getchar( void ); 只能用于stdin</strong><br><strong>形参</strong>：stram是一个FILE类型指针指向的流文件。<br><strong>返回值</strong>：若读取成功，返回读取的一个字符，并实现整型提升。若到了文件的结束，返回EOF表示文本的结束。若读取失败，同样返回EOF并设置error变量。<br><strong>补充</strong>：<br>1、函数作用是读取一个字符，同时文件指针向后指向下一个字符。<br>2、<strong>返回值是整型，这是因为允许函数报告文件末尾(EOF)。</strong>如果返回值是char型，那么256个字符中肯定有一个被指用于表示EOF。如果这个字符在文件内部出现，这个字符以后的内容不会被读取。因为这个字符被解释为EOF。<strong>所以应该使用整型变量来接收这个字符</strong><br>3、fgetc是函数，getc和getchar是通过#define定义的宏。所以getc和getchar不能传入带有副作用的参数。同时，getc和getchar的效率会比fgetc快上一点。<br>4、getchar始终从标准输入读取一个字符。<br><strong>例子</strong>：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* fgetc example: money counter */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; //EXIT_FAILURE</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  FILE * pFile;</span><br><span class="line">  <span class="keyword">int</span> c;</span><br><span class="line">  <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">  pFile=fopen (<span class="string">"myfile.txt"</span>,<span class="string">"r"</span>);</span><br><span class="line">  <span class="keyword">if</span> (pFile==<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    perror (<span class="string">"Error opening file"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      c = fgetc (pFile);</span><br><span class="line">      <span class="keyword">if</span> (c == <span class="string">'$'</span>) n++;</span><br><span class="line">    &#125; <span class="keyword">while</span> (c != EOF);</span><br><span class="line">    fclose (pFile);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">"The file contains %d dollar sign characters ($).\n"</span>,n);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面代码用来统计myfile.txt中$符号的个数，在文件中输入五个，最后得到结果正确。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803161526_445.png-480.jpg" alt="myfile.txt"><br><img src="http://p3ax8ersb.bkt.clouddn.com/201803161528_779.png-480.jpg" alt="fgetc"><br>如果没有这个文件，将会执行perror程序，报错<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803161530_498.png-480.jpg" alt="fgetc"></p><h3 id="字符输出函数：fputc、putc、putchar"><a href="#字符输出函数：fputc、putc、putchar" class="headerlink" title="字符输出函数：fputc、putc、putchar"></a>字符输出函数：fputc、putc、putchar</h3><p><strong>函数原型：</strong><br><strong>int fputc( int character, FILE* stream ); 用于所有流</strong><br><strong>宏原型：</strong><br><strong>int putc( int character, FILE* stream ); 用于所有流</strong><br><strong>int putchar( int character ); 只能用于stdout</strong><br><strong>形参</strong>：character是将要被输出的字符；stram是一个FILE类型指针指向的流文件。<br><strong>返回值</strong>：若函数执行成功，返回被写入的字符；若失败，返回EOF。同时errno被设置。<br><strong>补充</strong>：<br>1、参数character在输入的时候会被裁剪为无符号整型。<br>2、fputc是真正的函数，putc和putchar是#define定义的宏函数。<br>3、putchar始终将字符打印在标准输出流。<br>例子：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* fputc example: alphabet writer */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  FILE * pFile;</span><br><span class="line">  <span class="keyword">char</span> c;</span><br><span class="line"></span><br><span class="line">  pFile = fopen (<span class="string">"alphabet.txt"</span>,<span class="string">"w"</span>);</span><br><span class="line">  <span class="keyword">if</span> (pFile!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (c = <span class="string">'A'</span> ; c &lt;= <span class="string">'Z'</span> ; c++)</span><br><span class="line">      fputc ( c , pFile );</span><br><span class="line">    fclose (pFile);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述代码将大写字符A~Z写入文件alphabet.txt中。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803161607_197.png-480.jpg" alt="fputc"></p><h3 id="撤销字符函数-：int-ungetc-int-character-FILE-stream"><a href="#撤销字符函数-：int-ungetc-int-character-FILE-stream" class="headerlink" title="撤销字符函数 ：int ungetc( int character, FILE* stream );"></a>撤销字符函数 ：int ungetc( int character, FILE* stream );</h3><p>这个函数的作用是将先前读取到的字符返回到原来的流中，这样它可以在以后被重新读入。<br><strong>形参</strong>：character是要返回的字符，stram是一个FILE类型指针指向的流文件。<br><strong>返回值</strong>：若成功，返回被返回流中的字符；若失败，EOF被返回。<br><strong>补充</strong>：<br>1、“退回”的字符和流当前的位置有关，所以如果用fseek、fsetpos、rewind函数改变了流的位置，所有退回的字符将被丢弃。<br>2、把字符退回到流中和写入到流中是不一样的。也就是从文件中读取出来后的退回，并不会影响到物理存储上的内容。<br><strong>例子</strong>：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ungetc example */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE * pFile;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="keyword">char</span> buffer [<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line">    pFile = fopen (<span class="string">"myfile.txt"</span>,<span class="string">"rt"</span>);</span><br><span class="line">    <span class="keyword">if</span> (pFile==<span class="literal">NULL</span>) perror (<span class="string">"Error opening file"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">while</span> (!feof (pFile)) &#123;</span><br><span class="line">        c=getc (pFile);</span><br><span class="line">        <span class="keyword">if</span> (c == EOF) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'#'</span>) ungetc (<span class="string">'@'</span>,pFile);</span><br><span class="line">        <span class="keyword">else</span> ungetc (c,pFile);</span><br><span class="line">        <span class="keyword">if</span> (fgets (buffer,<span class="number">255</span>,pFile) != <span class="literal">NULL</span>)</span><br><span class="line">            <span class="built_in">fputs</span> (buffer,<span class="built_in">stdout</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述代码，将文件myfile.txt中每行开头的’#’替换为‘@’。如果打开失败，打印”Error opening file”。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803171040_523.png-480.jpg" alt="myfile.txt"><br><img src="http://p3ax8ersb.bkt.clouddn.com/201803171039_852.png-480.jpg" alt="ungetc"></p><h3 id="文本行输入函数：fgets、gets"><a href="#文本行输入函数：fgets、gets" class="headerlink" title="文本行输入函数：fgets、gets"></a>文本行输入函数：fgets、gets</h3><p><strong>函数原型：</strong><br><strong>char* fgets( char* str, int num, FILE* stream );</strong><br><strong>char* gets( char* str ); //一般不使用，不安全。完全可以用fgets代替。</strong><br><strong>形参</strong>：str是目标字符串，num是一个整型参数；用来表示读取的字符个数,它包括了’\0’在内；stream是获取字符的流。<br><strong>返回值</strong>：如果读取失败，也就是在读取任何字符之前就到了文件的结束，缓冲区没有被修改，返回一个NULL指针；如果读取成功，返回str。<br><strong>补充</strong>：<br>1、当fgets读取到一个换行符并存储到缓冲区之后，结束读取。<br>2、如果读取的字符数量达到num-1个，结束读取。但是这种情况并不会出现数据丢失，因为下次调用fgets将从流的下一个字符开始读取。<br>3、任何一种情况下，一个NUL字节将被添加到缓冲区所存储数据的末尾，让其成为一个字符串。<br><strong>例子</strong>：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* fgets example */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   FILE * pFile;</span><br><span class="line">   <span class="keyword">char</span> mystring [<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">   pFile = fopen (<span class="string">"myfile.txt"</span> , <span class="string">"r"</span>);</span><br><span class="line">   <span class="keyword">if</span> (pFile == <span class="literal">NULL</span>) perror (<span class="string">"Error opening file"</span>);</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> ( fgets (mystring , <span class="number">100</span> , pFile) != <span class="literal">NULL</span> )</span><br><span class="line">       <span class="built_in">puts</span> (mystring);</span><br><span class="line">     fclose (pFile);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述代码，获取文件myfile.txt中的第一行字符串最多获取99个字符。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803171101_159.png-480.jpg" alt="myfile.txt"><br><img src="http://p3ax8ersb.bkt.clouddn.com/201803171100_574.png-480.jpg" alt="fgets"><br><strong>注意</strong>：<br>1、fgets无法将字符串读取到一个长度小于两个字符的缓冲区，因为其中一个字符需要为NUL字节保留。<br>2、gets和fgets的不同，在于gets读取一行输入是，它不在缓冲区中存储结尾的换行符。<br>3、同时，应该注意的是，我们并不使用gets，因为它没有缓冲区长度参数，如果一个长输入行读到一个短缓冲区，多出来的字符将被写入到缓冲区后面的内存位置，这样会破坏此内存中的数据。</p><h3 id="文本行输出函数：fputs、puts"><a href="#文本行输出函数：fputs、puts" class="headerlink" title="文本行输出函数：fputs、puts"></a>文本行输出函数：fputs、puts</h3><p><strong>函数原型：</strong><br><strong>int fputs( const char* str, FILE* stream );</strong><br><strong>int puts( const char* str );</strong><br><strong>形参</strong>：str是一个字符型指针，用来指向一个字符串，用来获取输入。<br><strong>返回值</strong>：如果函数调用失败，返回EOF；成功返回一个非负数的值。<br><strong>补充</strong>：<br>1、<strong>fputs函数输出行的时候，不会将字符串的’\0’输出。</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *pFile;</span><br><span class="line"></span><br><span class="line">    pFile = fopen(<span class="string">"file.txt"</span>, <span class="string">"a"</span>);</span><br><span class="line">    <span class="built_in">fputs</span>(<span class="string">"this is c"</span>, pFile);</span><br><span class="line">    <span class="built_in">fputs</span>(<span class="string">"this is cpp"</span>, pFile);</span><br><span class="line">    fclose(pFile);</span><br><span class="line">    <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述代码可以证明，fputs不输出字符串结尾’\0’。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803171136_113.png-480.jpg" alt="fputs"><br>2、<strong>puts函数会在读取的字符串后面自动加上一个结尾符号’\0’，并输出到stdin中。</strong></p><h3 id="格式化输入函数：fscanf、scanf、sscanf"><a href="#格式化输入函数：fscanf、scanf、sscanf" class="headerlink" title="格式化输入函数：fscanf、scanf、sscanf"></a>格式化输入函数：fscanf、scanf、sscanf</h3><p><strong>函数原型：</strong><br><strong>int fscanf( FILE* stream, const char* format, … );</strong><br><strong>int scanf( const char* format, … );</strong><br><strong>int sscanf( const char* s, const char* format, … );</strong><br><strong>形参</strong>：stream是一个FILE指针指向的流；format字符串是相应的格式。省略号表示一个可变长度的指针列代表。sscanf中的s指的是一个字符串，用来读取字符。<br><strong>返回值</strong>：当字符串到达末尾或读取的输入不再匹配字符串所指定的类型的时候，输入停止。同时，被转换的输入值的个数当成函数的返回值；如果在任何输入值被转换之前文件就已经到达了尾部，返回EOF。<br><strong>补充</strong>：<br>1、输入源的区别：fscanf的输入源是stream；scanf的输入源是标准输入stdin；sscanf的输入源是字符串s。<br>2、<strong>这些函数的正常运行依赖于格式代码。必须保证指针参数的类型必须是对应格式代码的正确类型。否则将会产生垃圾值。</strong><br>比如下面例子：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> a;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%f"</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述代码中a的类型是float，但是输入的时候指针参数的类型是整型，而格式代码是&amp;a，是float类型。输出的时候用的是float输出，最终得到了垃圾值。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803171221_916.png-480.jpg" alt="scanf wrong"><br>3、为什么scanf中需要用&amp;符号。这个是因为在c中是传值调用，如果需要修改当前值地址的内容就需要传递一个地址。否则将会程序崩溃。<br>4、format字符串参数解析：<br>(1)空白字符：它们与输入中的零个或多个空白字符匹配，在处理的过程中被忽略。<br>(2)格式代码：它们指定函数如何解释接下来的输入字符。<br>(3)其他字符：当任何其他字符出现在格式字符串时，下一个输入字符必须与之匹配。如果匹配，该字符被丢弃。如果不匹配，函数结束读取。<br>5、格式代码解析：上述代码都是以%开头，接下来接：<br>(1)星号：星号将转换后的值被丢弃而不是存储，可以用来跳过不需要输入的字符。<br>(2)宽度：以一个非负整数给出，它限制被读取用于转换的输入字符个数。如果没有给出宽度，那么就连续读入字符直到遇到输入中的下一个空白字符。<br>下面这个例子给出宽度的用法：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    FILE* input = fopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="literal">NULL</span>) perror (<span class="string">"Error opening file"</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">fscanf</span>(input, <span class="string">"%4d %4d %4d"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"a = %d\n"</span>, a);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"b = %d\n"</span>, b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"c = %d\n"</span>, c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>input.txt中存放如下：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803221654_415.png-480.jpg" alt="input"><br>输出如下：只有a和b改变，c未改变。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803221656_996.png-480.jpg" alt="out"><br>如果input.txt中存放如下；<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803221657_130.png-480.jpg" alt="input2"><br>输出如下：a=1234，b=5，c=6789。0被舍弃<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803221657_608.png-480.jpg" alt="out2"><br><strong>注意：在使用fscanf函数的时候，文件中的换行符也被当成了空白字符跳过。</strong><br>(3)限定符：h,l,L；限定符的目的是为了指定参数的长度。具体见下表：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803192128_815.png-1920.jpg" alt="限定符"><br>(4)格式代码：就是单个字符，用于指定输入字符将被如何解析。上表中的第一列就是部分格式代码。具体见下表：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803192131_223.png-1920.jpg" alt="格式代码"><br>例子：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* scanf example */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> str [<span class="number">80</span>];</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">"Enter your family name: "</span>);</span><br><span class="line">  <span class="built_in">scanf</span> (<span class="string">"%79s"</span>,str);</span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">"Enter your age: "</span>);</span><br><span class="line">  <span class="built_in">scanf</span> (<span class="string">"%d"</span>,&amp;i);</span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">"Mr. %s , %d years old.\n"</span>,str,i);</span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">"Enter a hexadecimal number: "</span>);</span><br><span class="line">  <span class="built_in">scanf</span> (<span class="string">"%x"</span>,&amp;i);</span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">"You have entered %#x (%d).\n"</span>,i,i);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述例子就是对各种格式的输入。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803221706_580.png-480.jpg" alt="scanf"></p><h3 id="格式化输出函数：fprintf、printf、sprintf"><a href="#格式化输出函数：fprintf、printf、sprintf" class="headerlink" title="格式化输出函数：fprintf、printf、sprintf"></a>格式化输出函数：fprintf、printf、sprintf</h3><p><strong>函数原型：</strong><br><strong>int fprintf( FILE* stream, const char* format, … );</strong><br><strong>int printf( const char* format, … );</strong><br><strong>int sprintf( char* str, const char* format, … );</strong><br><strong>形参</strong>：stream是一个FILE指针指向的流；format字符串是相应的格式。省略号表示一个可变长度的指针列代表。sprintf中str是一个用来存储字符的指定字符串。<br><strong>返回值</strong>：返回值就是实际打印或者存储的字符个数。<br><strong>补充</strong>：<br>1、sprintf是一个容易出错的函数，因为缓冲区的大小并没有作为一个形参被传入。函数并不知道该输入多少个字符是安全的。<br>2、printf家族函数和scanf家族函数一样，必须保证值和格式码表示一致。<br>3、format字符串中含有格式代码，格式代码由一个百分号开头，后面可以跟：<br>(1)零个或者多个标志字符。<br>(2)一个可选的最小字段宽度<br>(3)一个可选的精度<br>(4)一个可选的修改符<br>(5)转换类型<br>4、格式代码如下：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803221716_63.png-1920.jpg" alt="格式代码"><br>5、格式标志如下：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803221717_596.png-1920.jpg" alt="格式标志"></p><h3 id="二进制I-O函数："><a href="#二进制I-O函数：" class="headerlink" title="二进制I/O函数："></a>二进制I/O函数：</h3><p><strong>函数原型：</strong><br><strong>size_t fread( void* ptr, size_t size, size_t count, FILE* stream );</strong><br><strong>size_t fwrite( void* ptr, size_t size, size_t count, FILE* stream );</strong><br><strong>形参</strong>：ptr是一个指向用于保存数据的内存位置的指针，至少有size*count个字节；size是缓冲区中每个元素的字节数；count是读取的元素数。<br><strong>返回值</strong>：实际读取的元素(非字节)的数目，如果过程中遇到了文件尾，这个数字可能比请求的元素数目小。<br><strong>补充</strong>：一般来说，二进制的写入效率比文件写入要高，因为二进制输出避免了在数值转换为字符串过程中所涉及的开销和精读损失。但是很遗憾的是，二进制的数据，不是我们人眼可以阅读的。文本写入的文件就可以很好的阅读。<br><strong>例子</strong>：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* fread example: read an entire file */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  FILE * pFile;</span><br><span class="line">  <span class="keyword">long</span> lSize;</span><br><span class="line">  <span class="keyword">char</span> * buffer;</span><br><span class="line">  <span class="keyword">size_t</span> result;</span><br><span class="line"></span><br><span class="line">  pFile = fopen ( <span class="string">"myfile.bin"</span> , <span class="string">"rb"</span> );</span><br><span class="line">  <span class="keyword">if</span> (pFile==<span class="literal">NULL</span>) &#123;<span class="built_in">fputs</span> (<span class="string">"File error"</span>,<span class="built_in">stderr</span>); <span class="built_in">exit</span> (<span class="number">1</span>);&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// obtain file size:</span></span><br><span class="line">  fseek (pFile , <span class="number">0</span> , SEEK_END);</span><br><span class="line">  lSize = ftell (pFile);</span><br><span class="line">  rewind (pFile);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// allocate memory to contain the whole file:</span></span><br><span class="line">  buffer = (<span class="keyword">char</span>*) <span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*lSize);</span><br><span class="line">  <span class="keyword">if</span> (buffer == <span class="literal">NULL</span>) &#123;<span class="built_in">fputs</span> (<span class="string">"Memory error"</span>,<span class="built_in">stderr</span>); <span class="built_in">exit</span> (<span class="number">2</span>);&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// copy the file into the buffer:</span></span><br><span class="line">  result = fread (buffer,<span class="number">1</span>,lSize,pFile);</span><br><span class="line">  <span class="keyword">if</span> (result != lSize) &#123;<span class="built_in">fputs</span> (<span class="string">"Reading error"</span>,<span class="built_in">stderr</span>); <span class="built_in">exit</span> (<span class="number">3</span>);&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* the whole file is now loaded in the memory buffer. */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// terminate</span></span><br><span class="line">  fclose (pFile);</span><br><span class="line">  <span class="built_in">free</span> (buffer);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述例子将文件myfile.bin中的数据，通过函数fread读取到数组buffer中去。</p><h3 id="刷新缓冲区函数：int-fflush-FILE-stream"><a href="#刷新缓冲区函数：int-fflush-FILE-stream" class="headerlink" title="刷新缓冲区函数：int fflush( FILE* stream );"></a>刷新缓冲区函数：int fflush( FILE* stream );</h3><p><strong>返回值</strong>：若函数正确执行返回一个0，若失败，返回EOF同时error被设置。<br><strong>补充</strong>：这个函数会立刻刷新缓冲区，如果我们需要输入的字符立刻写入的话，我们可以调动这个函数。<br><strong>例子</strong>：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* fflush example */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> mybuffer[<span class="number">80</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   FILE * pFile;</span><br><span class="line">   pFile = fopen (<span class="string">"example.txt"</span>,<span class="string">"r+"</span>);</span><br><span class="line">   <span class="keyword">if</span> (pFile == <span class="literal">NULL</span>) perror (<span class="string">"Error opening file"</span>);</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="built_in">fputs</span> (<span class="string">"test"</span>,pFile);</span><br><span class="line">     fflush (pFile);    <span class="comment">// flushing or repositioning required</span></span><br><span class="line">     fgets (mybuffer,<span class="number">80</span>,pFile);</span><br><span class="line">     <span class="built_in">puts</span> (mybuffer);</span><br><span class="line">     fclose (pFile);</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述例子，使用了fflush将缓冲区中的test立刻刷新到文件流pFile中，然后从pFile中获取最多80个字符到mybuffer中。并打印到屏幕上。<br>example.txt存储内容如下：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803201500_50.png-480.jpg" alt="example.txt1"><br>执行程序之后的输出：从被替换的第四个字符开始输出，这个是因为文本指针已经指向第四个字符。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803201502_589.png-480.jpg" alt="stdout1"><br>执行之后的example.txt内容：前四个字符被替换成text<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803201502_452.png-480.jpg" alt="example.txt2"><br>如果没有刷新函数fflush将会出现下面情况：<br>输出如下：此时的缓冲区未刷新，内容并没有写入文本流pFile中。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803201504_487.png-960.jpg" alt="stdout2"><br>example.txt3内容：当调用puts函数的时候，缓冲区的内容被刷新，所有缓冲区的内容被写入pFile中<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803201505_936.png-960.jpg" alt="example.txt3"></p><h3 id="文件流定位函数：ftell、fseek"><a href="#文件流定位函数：ftell、fseek" class="headerlink" title="文件流定位函数：ftell、fseek"></a>文件流定位函数：ftell、fseek</h3><p><strong>函数原型：</strong><br><strong>long int ftell( FILE* stream );</strong><br><strong>int fseek( FILE* stream, long offset, int from );</strong><br><strong>形参</strong>：参考下表：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803201520_375.png-1920.jpg" alt="from"><br><strong>补充</strong>：<br>1、<strong>ftell返回流的当前位置</strong>。这函数允许你保存一个文件的当前位置，可能在将来会返回到这个位置。在二进制流中，这个值就是当前位置距离文件起始位置之间的字节数。<br>2、<strong>fseek允许你定位在流中的位置</strong>，用于下次的读取或写入。<br>3、<strong>在二进制流中，从SEEK_END进行定位可能不被支持，应该避免。在文本流中，如果from是SEEK_CUR或SEEK_END，offset必须是零。如果from是SEEK_SET，offset必须是一个从同一个流中以前调用ftell所返回的值。</strong><br>4、这些限制的存在，部分原因是因为文本流所执行的行末字符映射。由于这个映射的存在，文本文件的字节数可能和程序写入的字节数不同。<br>5、用fseek改变一个流的位置会带来三个副作用。第一个，行末指示字符会被清除；<strong>第二个，在fseek之前用ungetc退还给流的字符，会被丢失；</strong>第三个，定位允许你从写入切换到读取，或者回到打开的流用来更新。<br><strong>例子</strong>：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ftell example : getting size of a file */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  FILE * pFile;</span><br><span class="line">  <span class="keyword">long</span> size;</span><br><span class="line"></span><br><span class="line">  pFile = fopen (<span class="string">"myfile.txt"</span>,<span class="string">"r"</span>);</span><br><span class="line">  <span class="keyword">if</span> (pFile==<span class="literal">NULL</span>) perror (<span class="string">"Error opening file"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    fseek (pFile, <span class="number">0</span>, SEEK_END);   <span class="comment">// non-portable</span></span><br><span class="line">    size=ftell (pFile);</span><br><span class="line">    fclose (pFile);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">"Size of myfile.txt: %ld bytes.\n"</span>,size);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述程序就是通过利用fseek函数将文件指针定位到文本末，然后通过ftell函数获取当前位置。这样可以统计出文件字节数。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803201536_822.png-480.jpg" alt="myfile.txt"><br><img src="http://p3ax8ersb.bkt.clouddn.com/201803201536_82.png-480.jpg" alt="size"><br>下面这个例子说明了文本文件下，换行符被编译为两个字符，分别是<code>&#39;\n&#39;&#39;\r&#39;</code><br><img src="http://p3ax8ersb.bkt.clouddn.com/201803201539_304.png-480.jpg" alt="myfile.txt2"><br><img src="http://p3ax8ersb.bkt.clouddn.com/201803201539_965.png-480.jpg" alt="size2"></p><h3 id="流错误函数：feof、ferror、clearerr"><a href="#流错误函数：feof、ferror、clearerr" class="headerlink" title="流错误函数：feof、ferror、clearerr"></a>流错误函数：feof、ferror、clearerr</h3><p><strong>函数原型：</strong><br><strong>int feof( FILE* stream );</strong><br><strong>int ferror( FILE* stream );</strong><br><strong>void clearerr( FILE* stream );</strong><br><strong>返回值</strong>：若到了文件的结束，返回一个非零的值；若不是文件结尾，返回一个零。<br><strong>补充</strong>：<br>1、feof函数检查文件指针是否指向文本结束符。ferror函数报告流的错误状态。clearerr对指定流的错误标准进行重置。<br>2、函数clearerr、rewind、fseek会清除文末指示符，当时下次有I/O函数操作这个流，文末指示符会被重新设定。<br><strong>例子</strong>：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* feof example: byte counter */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  FILE * pFile;</span><br><span class="line">  <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">  pFile = fopen (<span class="string">"myfile.txt"</span>,<span class="string">"rb"</span>);</span><br><span class="line">  <span class="keyword">if</span> (pFile==<span class="literal">NULL</span>) perror (<span class="string">"Error opening file"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> (fgetc(pFile) != EOF) &#123;</span><br><span class="line">      ++n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (feof(pFile)) &#123;</span><br><span class="line">      <span class="built_in">puts</span> (<span class="string">"End-of-File reached."</span>);</span><br><span class="line">      <span class="built_in">printf</span> (<span class="string">"Total number of bytes read: %d\n"</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span> (<span class="string">"End-of-File was not reached."</span>);</span><br><span class="line">    fclose (pFile);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述代码读取文件中的字符个数， 并在文件结束的时候，返回读取字符个数。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803201611_34.png-480.jpg" alt="myfile.txt"><br><img src="http://p3ax8ersb.bkt.clouddn.com/201803201610_320.png-480.jpg" alt="feof"></p><p><strong>本文中的知识点来自于C和指针，代码例子绝大部分来自网站<a href="http://www.cplusplus.com" target="_blank" rel="noopener">www.cplusplus.com</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;总览&quot;&gt;&lt;a href=&quot;#总览&quot; class=&quot;headerlink&quot; title=&quot;总览&quot;&gt;&lt;/a&gt;总览&lt;/h3&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//错误报告函数：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;perror&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;* str )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//终止执行函数：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; status)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//打开和关闭文件函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;FILE * &lt;span class=&quot;title&quot;&gt;fopen&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;( &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * filename, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * mode )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fclose&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;( FILE * stream )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//字符输入函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fgetc&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;( FILE * stream )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getc&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;( FILE * stream )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getchar&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;( &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//字符输出函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fputc&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;( &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; character, FILE * stream )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;putc&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;( &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; character, FILE * stream )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;putchar&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;( &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; character )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//撤销字符函数：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ungetc&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;( &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; character, FILE * stream )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//文本行输入函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * &lt;span class=&quot;title&quot;&gt;fgets&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;( &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * str, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num, FILE * stream )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* &lt;span class=&quot;title&quot;&gt;gets&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* str )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//文本行输出函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fputs&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;( &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * str, FILE * stream )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;( &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * str )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//格式化输入函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fscanf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( FILE* stream, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* format, ... )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* format, ... )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sscanf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* s, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* format, ... )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//格式化输出函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( FILE* stream, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* format, ... )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* format, ... )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* str, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* format, ... )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//二进制I/O函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; fread( &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;* ptr, &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; size, &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; count, FILE* stream );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; fwrite( &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;* ptr, &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; size, &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; count, FILE* stream );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//刷新缓冲区函数：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fflush&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;( FILE * stream )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//文件流定位函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ftell&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( FILE* stream )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fseek&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( FILE* stream, &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; offset, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; from )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//流错误函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;feof&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( FILE* stream )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ferror&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( FILE* stream )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;clearerr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( FILE* stream )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="knowledge" scheme="http://www.jingxxn.cn/categories/knowledge/"/>
    
      <category term="C/C++" scheme="http://www.jingxxn.cn/categories/knowledge/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>查看Linux系统版本信息</title>
    <link href="http://www.jingxxn.cn/%E6%9F%A5%E7%9C%8BLinux%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF.html"/>
    <id>http://www.jingxxn.cn/查看Linux系统版本信息.html</id>
    <published>2018-03-08T03:44:55.000Z</published>
    <updated>2018-03-08T08:32:20.222Z</updated>
    
    <content type="html"><![CDATA[<h4 id="查看内核版本"><a href="#查看内核版本" class="headerlink" title="查看内核版本"></a>查看内核版本</h4><blockquote><p><strong>cat /proc/version</strong></p></blockquote><p><img src="http://p3ax8ersb.bkt.clouddn.com/201803081150_955.png-960.jpg" alt="cat /proc/version"></p><blockquote><p><strong>uname -a</strong></p></blockquote><a id="more"></a><p><img src="http://p3ax8ersb.bkt.clouddn.com/201803081151_552.png-960.jpg" alt="uname -a"></p><h4 id="查看系统版本"><a href="#查看系统版本" class="headerlink" title="查看系统版本"></a>查看系统版本</h4><blockquote><p><strong>cat /etc/redhat-release</strong></p></blockquote><p><img src="http://p3ax8ersb.bkt.clouddn.com/201803081158_576.png-960.jpg" alt="查看版本"></p><blockquote><p><strong>lsb_release -a</strong></p></blockquote><p>这个命令需要安装，安装命令：</p><blockquote><p>yum install lsb -y</p></blockquote><p><img src="http://p3ax8ersb.bkt.clouddn.com/201803081233_128.png-960.jpg" alt="lsb_release"></p><blockquote><p><strong>cat /etc/issue</strong></p></blockquote><p>都说可以，这个我的查出来很奇怪<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803081223_694.png-960.jpg" alt="有错误"></p><blockquote><p><strong>rpm -q centos-release</strong></p></blockquote><p><img src="http://p3ax8ersb.bkt.clouddn.com/201803081235_126.png-960.jpg" alt="rpm"></p><h4 id="查看cpu相关信息，包括型号、主频、内核等信息"><a href="#查看cpu相关信息，包括型号、主频、内核等信息" class="headerlink" title="查看cpu相关信息，包括型号、主频、内核等信息"></a>查看cpu相关信息，包括型号、主频、内核等信息</h4><blockquote><p><strong>cat /proc/cpuinfo</strong></p></blockquote><p><img src="http://p3ax8ersb.bkt.clouddn.com/201803081226_578.png-960.jpg" alt="cpuinfo"></p><p><a href="https://www.linuxidc.com/Linux/2016-05/131749.htm" target="_blank" rel="noopener">参考地址1</a><br><a href="http://blog.csdn.net/Aoril/article/details/53518917" target="_blank" rel="noopener">参考地址2</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;查看内核版本&quot;&gt;&lt;a href=&quot;#查看内核版本&quot; class=&quot;headerlink&quot; title=&quot;查看内核版本&quot;&gt;&lt;/a&gt;查看内核版本&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;cat /proc/version&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://p3ax8ersb.bkt.clouddn.com/201803081150_955.png-960.jpg&quot; alt=&quot;cat /proc/version&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;uname -a&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.jingxxn.cn/categories/Linux/"/>
    
      <category term="method" scheme="http://www.jingxxn.cn/categories/Linux/method/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux中时间的设置</title>
    <link href="http://www.jingxxn.cn/Linux%E4%B8%AD%E6%97%B6%E9%97%B4%E7%9A%84%E8%AE%BE%E7%BD%AE.html"/>
    <id>http://www.jingxxn.cn/Linux中时间的设置.html</id>
    <published>2018-03-08T03:36:45.000Z</published>
    <updated>2018-03-08T12:33:37.661Z</updated>
    
    <content type="html"><![CDATA[<p>test: CentOS Linux release 7.4.1708 (Core)</p><h4 id="查看时区"><a href="#查看时区" class="headerlink" title="查看时区"></a>查看时区</h4><blockquote><p><strong>data -R</strong></p></blockquote><p><img src="http://p3ax8ersb.bkt.clouddn.com/201803081634_167.png-960.jpg" alt="查看时区"><br>+0800 表示在东八区<br>其中：<br>CST：中国标准时间（China Standard Time），这个解释可能是针对RedHat Linux。<br>UTC：协调世界时，又称世界标准时间，简称UTC，从英文国际时间/法文协调时间”Universal Time/Temps Cordonné”而来。中国大陆、香港、澳门、台湾、蒙古国、新加坡、马来西亚、菲律宾、澳洲西部的时间与UTC的时差均为+8，也就是UTC+8。UTC较于GMT更准确。<br>GMT：格林尼治标准时间（旧译格林威治平均时间或格林威治标准时间；英语：Greenwich Mean Time，GMT）是指位于英国伦敦郊区的皇家格林尼治天文台的标准时间，因为本初子午线被定义在通过那里的经线。</p><h4 id="修改时区"><a href="#修改时区" class="headerlink" title="修改时区"></a>修改时区</h4><blockquote><p><strong>tzselect</strong></p></blockquote><a id="more"></a><p><img src="http://p3ax8ersb.bkt.clouddn.com/201803081645_514.png-960.jpg" alt="tzselect1"><br><strong>这个命令并不是用来修改时区的</strong>，这个命令可以通过你自己的选择然后清楚的知道每个时区的样式。然后你通过修改.progile、.bash_profile或者/etc/profile文件，设置正确的TZ环境变量并导出，可以成功改变时区。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803081647_798.png-960.jpg" alt="tzselect2"></p><p><strong>tip：这些修改应该出现用户家目录下</strong><br>下面例子，我将时区由东八区改变为波兰的时区，东一区：<br>先通过tzselect查询波兰的时区书写格式：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803081702_845.png-960.jpg" alt="tzselect3"><br>然后通过修改文件.bash_profile并应用得以修改。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803081701_60.png-960.jpg" alt="tzselect4"></p><blockquote><p><strong>通过替换系统时区文件，或者创建链接文件</strong></p></blockquote><p>1、在目录/usr/share/zoneinfo中有所有的时区文件，通过复制替换到/etc/locatime即可<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803081715_394.png-960.jpg" alt="替换"><br>但是有的时候会出现没有效果的情况，比如上例子。这是因为修改了在profile或.bash_profile中设置了TZ。这个时候就需要重新修改TZ。</p><p>2、创建链接文件<br>这里如果出现修改失败，同上。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803081722_543.png-960.jpg" alt="ln"></p><h4 id="查看和修改时间和日期"><a href="#查看和修改时间和日期" class="headerlink" title="查看和修改时间和日期"></a>查看和修改时间和日期</h4><blockquote><p><strong>date</strong><br>date用于查看和设置 <strong>系统时间</strong></p></blockquote><p><img src="http://p3ax8ersb.bkt.clouddn.com/201803081733_375.png-960.jpg" alt="date"><br>如果不输入命令”hwclock -w”将时间写入硬件时间，电脑重启之后将会返回原样。</p><blockquote><p><strong>hwclock</strong><br>hwclock用来查看设置 <strong>硬件时间</strong>。</p></blockquote><blockquote><p><strong>hwclock –hctosys</strong><br>hc代表硬件时间，sys代表系统时间，即用硬件时钟同步系统时钟</p></blockquote><blockquote><p><strong>hwclock –systohc</strong><br>即用系统时钟同步硬件时钟,等于 <strong>hwclock -w</strong></p></blockquote><p>执行完这两个命令系统没有任何反馈。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803081739_539.png-960.jpg" alt="hwclock"></p><p>解释一下硬件时钟和系统时钟的区别：<br>硬件时钟指的是主板上由电池供电的那个时间，可以在BIOS中设置。<strong>Linux可以通过hwclock设置。当Linux启动的时候，硬件时钟会赋值给系统时钟。然后系统时钟会独立于硬件时钟工作。</strong><br>系统时钟指的是当前Linux Kernel中的时钟。Linux中的所有命令包括函数都是采用系统时钟设置的。<br>这就是为什么当我们用date修改了时间，没有同步到硬件时钟的时候，这个修改是无效的。</p><h4 id="时间自动同步"><a href="#时间自动同步" class="headerlink" title="时间自动同步"></a>时间自动同步</h4><blockquote><p><strong>yum install -y ntpdate</strong><br>首先安装ntpdate软件，用来同步Linux时间服务。</p></blockquote><blockquote><p><strong>ntpdate time.nist.gov</strong></p></blockquote><p><img src="http://p3ax8ersb.bkt.clouddn.com/201803081941_193.png-960.jpg" alt="ntpdate"><br>上面表示同步成功，调整时间为服务器129.6.15.29的时间，时间相差0.136318 sec</p><blockquote><p><strong>hwclock -w</strong><br>调整硬件时间</p></blockquote><blockquote><p><strong>crontab -e</strong><br>设定crontab计划任务自动校时，并添加下列内容<br><strong>0 1 <em> </em> * ntpdate time.nist.gov</strong><br>这样设定一个小时自动进行网络校时。</p></blockquote><p>通过cat /etc/crontab 查看crontab的设置解释，如下：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803082006_609.png-1920.jpg" alt="crontab"><br><a href="https://www.cnblogs.com/kerrycode/p/4217995.html" target="_blank" rel="noopener">参考文章1</a><br><a href="https://www.cnblogs.com/wanghuaijun/p/6547046.html" target="_blank" rel="noopener">参考文章2</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;test: CentOS Linux release 7.4.1708 (Core)&lt;/p&gt;
&lt;h4 id=&quot;查看时区&quot;&gt;&lt;a href=&quot;#查看时区&quot; class=&quot;headerlink&quot; title=&quot;查看时区&quot;&gt;&lt;/a&gt;查看时区&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;data -R&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://p3ax8ersb.bkt.clouddn.com/201803081634_167.png-960.jpg&quot; alt=&quot;查看时区&quot;&gt;&lt;br&gt;+0800 表示在东八区&lt;br&gt;其中：&lt;br&gt;CST：中国标准时间（China Standard Time），这个解释可能是针对RedHat Linux。&lt;br&gt;UTC：协调世界时，又称世界标准时间，简称UTC，从英文国际时间/法文协调时间”Universal Time/Temps Cordonné”而来。中国大陆、香港、澳门、台湾、蒙古国、新加坡、马来西亚、菲律宾、澳洲西部的时间与UTC的时差均为+8，也就是UTC+8。UTC较于GMT更准确。&lt;br&gt;GMT：格林尼治标准时间（旧译格林威治平均时间或格林威治标准时间；英语：Greenwich Mean Time，GMT）是指位于英国伦敦郊区的皇家格林尼治天文台的标准时间，因为本初子午线被定义在通过那里的经线。&lt;/p&gt;
&lt;h4 id=&quot;修改时区&quot;&gt;&lt;a href=&quot;#修改时区&quot; class=&quot;headerlink&quot; title=&quot;修改时区&quot;&gt;&lt;/a&gt;修改时区&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;tzselect&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.jingxxn.cn/categories/Linux/"/>
    
      <category term="method" scheme="http://www.jingxxn.cn/categories/Linux/method/"/>
    
    
  </entry>
  
  <entry>
    <title>判断元素的入栈和出栈顺序是否合法</title>
    <link href="http://www.jingxxn.cn/%E5%88%A4%E6%96%AD%E5%85%83%E7%B4%A0%E7%9A%84%E5%85%A5%E6%A0%88%E5%92%8C%E5%87%BA%E6%A0%88%E9%A1%BA%E5%BA%8F%E6%98%AF%E5%90%A6%E4%B8%80%E8%87%B4.html"/>
    <id>http://www.jingxxn.cn/判断元素的入栈和出栈顺序是否一致.html</id>
    <published>2018-03-07T06:46:00.000Z</published>
    <updated>2018-03-07T07:48:17.619Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>提供两个元素的集合，一个是元素入栈的顺序，另一个是元素出栈的顺序。设计一个函数，判断两个元素集合是否满足入栈出栈的规则。如：入栈顺序：“12345”，出栈顺序是：“54321”，这样就是符合要求的。如果出栈顺序是：“51234”，这样不符合要求。<br><a id="more"></a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>根据题目的要求，就是判断两数组是否满足出栈入栈的顺序。可以这样做：<strong>1、先按照入栈顺序的集合进行入栈。2、在入栈的同时，跟出栈顺序的元素进行比较。如果相同就将入栈的元素pop出来。3、结束的时候，如果栈为空，说明两者的入栈顺序和出栈顺序可以匹配，那么就是符合要求的；如果栈不为空，那就是不符合要求。</strong><br>还有一点：<strong>如果两元素的个数不一样或者同时为空，直接判定不符合要求。</strong></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">stack_io_right</span><span class="params">(<span class="keyword">char</span>* src, <span class="keyword">char</span>* dst)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> src_len = <span class="keyword">sizeof</span>(src);</span><br><span class="line">    <span class="keyword">int</span> dst_len = <span class="keyword">sizeof</span>(dst);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(src_len == <span class="number">0</span> || src_len != dst_len)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(; i &lt; src_len; ++i)&#123;</span><br><span class="line">        s.push(*(src+i));</span><br><span class="line">        <span class="keyword">while</span>(s.size() &amp;&amp; s.top() == *(dst+j))&#123;</span><br><span class="line">            ++j;</span><br><span class="line">            s.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(s.empty())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    system(<span class="string">"clear"</span>);</span><br><span class="line">    <span class="keyword">char</span> src[] = <span class="string">"12345"</span>;</span><br><span class="line">    <span class="keyword">char</span> dst[] = <span class="string">"32145"</span>;</span><br><span class="line">    <span class="keyword">char</span> dst1[] = <span class="string">"51243"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; stack_io_right(src, dst) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; stack_io_right(src, dst1) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="http://p3ax8ersb.bkt.clouddn.com/201803071537_435.png-480.jpg" alt="运行结果"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;提供两个元素的集合，一个是元素入栈的顺序，另一个是元素出栈的顺序。设计一个函数，判断两个元素集合是否满足入栈出栈的规则。如：入栈顺序：“12345”，出栈顺序是：“54321”，这样就是符合要求的。如果出栈顺序是：“51234”，这样不符合要求。&lt;br&gt;
    
    </summary>
    
      <category term="practice" scheme="http://www.jingxxn.cn/categories/practice/"/>
    
      <category term="C/C++" scheme="http://www.jingxxn.cn/categories/practice/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>二叉树的基本实现</title>
    <link href="http://www.jingxxn.cn/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%AE%9E%E7%8E%B0.html"/>
    <id>http://www.jingxxn.cn/二叉树的基本实现.html</id>
    <published>2018-03-06T07:47:19.000Z</published>
    <updated>2018-04-02T12:51:34.769Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>本文将使用c++实现模板类的二叉树，内容包括创建、递归遍历、非递归遍历、结点个数、深度、叶子结点的个数、第K层结点个数等函数。</p><h3 id="结点、二叉树结构"><a href="#结点、二叉树结构" class="headerlink" title="结点、二叉树结构"></a>结点、二叉树结构</h3><p>二叉树的结点是一个结构体，包括值<code>_data</code>，指向左子树的指针和指向右子树的指针<code>_left</code>和<code>_right</code>。还有构造函数，用于创建结点。<a id="more"></a><br>将<code>BinaryTreeNode&lt;T&gt;</code>typedef为<code>Node</code>,很多时候我会遗漏模板的类型名需要加上<code>&lt;T&gt;</code>，这样就会出错。为了减少这种错误，索性用typedef换名。&lt;<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">BinaryTreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    BinaryTreeNode* _left;</span><br><span class="line">    BinaryTreeNode* _right;</span><br><span class="line">    T _data;</span><br><span class="line"></span><br><span class="line">    BinaryTreeNode(<span class="keyword">const</span> T&amp; data = T())&#123;</span><br><span class="line">        _data = data;</span><br><span class="line">        _left = <span class="literal">NULL</span>;</span><br><span class="line">        _right = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">BinaryTree</span>&#123;</span></span><br><span class="line"><span class="keyword">typedef</span> BinaryTreeNode&lt;T&gt; Node;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Node* _root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="默认成员函数"><a href="#默认成员函数" class="headerlink" title="默认成员函数"></a>默认成员函数</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>设置了两个构造函数，一个为空，用于创建一个空的二叉树；另一个参数为两个。<br><code>const T* a</code> 数组名<br><code>const T&amp; invalid</code> 非法值<br>解释一下，这里我用一个数组创建二叉树，同时用’#’表示这个空。如这个例子：</p><pre><code>int a1[] = {1,2,3,&apos;#&apos;,&apos;#&apos;,4,&apos;#&apos;,&apos;#&apos;,5,6,&apos;#&apos;,&apos;#&apos;,&apos;#&apos;};</code></pre><p>如果<code>a1[i] != &#39;#&#39;</code>那么就创建，反之，表示这个位置没有结点。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//constructor</span></span><br><span class="line">BinaryTree()&#123;</span><br><span class="line">    _root = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">BinaryTree(<span class="keyword">const</span> T* a, <span class="keyword">const</span> T&amp; invalid)&#123;</span><br><span class="line">    <span class="keyword">size_t</span> index = <span class="number">0</span>;</span><br><span class="line">    _root = _CreateTree(a, invalid, index);</span><br><span class="line">&#125;</span><br><span class="line">Node* _CreateTree(<span class="keyword">const</span> T* a, <span class="keyword">const</span> T&amp; invalid, <span class="keyword">size_t</span>&amp; index)&#123;</span><br><span class="line">    Node* root = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[index] != invalid)&#123;</span><br><span class="line">        root = <span class="keyword">new</span> Node(a[index]);</span><br><span class="line">        root-&gt;_left = _CreateTree(a, invalid, ++index);</span><br><span class="line">        root-&gt;_right = _CreateTree(a, invalid, ++index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>构造函数利用递归的思想，先跟的次序创建二叉树。<strong>由于要利用到递归，就没有办法直接用构造函数来实现，因为在class之外是没有办法访问到_root的。所以通过一个函数，利用这个函数来实现递归的过程。</strong><br>构造出来的二叉树关系图：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803061638_7.png-480.jpg" alt="二叉树"></p><h3 id="拷贝构造"><a href="#拷贝构造" class="headerlink" title="拷贝构造"></a>拷贝构造</h3><p>拷贝构造利用了一个<code>_CopyTree</code>函数。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">BinaryTree(<span class="keyword">const</span> BinaryTree&amp; tree)&#123;</span><br><span class="line">    _root = _CopyTree(tree._root);</span><br><span class="line">&#125;</span><br><span class="line">Node* _CopyTree(Node* root)&#123;</span><br><span class="line">    Node* node = root;</span><br><span class="line">    <span class="keyword">if</span>(node)&#123;</span><br><span class="line">        node = <span class="keyword">new</span> Node(root-&gt;_data);</span><br><span class="line">        node-&gt;_left = _CopyTree(root-&gt;_left);</span><br><span class="line">        node-&gt;_right = _CopyTree(root-&gt;_right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h3><p>析构函数利用了一个<code>Destroy</code>函数<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//destructor</span></span><br><span class="line">~BinaryTree()&#123;</span><br><span class="line">    Destroy(_root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Destroy</span><span class="params">(Node* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    Destroy(root-&gt;_left);</span><br><span class="line">    Destroy(root-&gt;_right);</span><br><span class="line">    <span class="keyword">delete</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="operator-赋值运算符的重载"><a href="#operator-赋值运算符的重载" class="headerlink" title="operator=(赋值运算符的重载)"></a>operator=(赋值运算符的重载)</h3><p>先调用析构函数的<code>Destroy</code>销毁当前二叉树，然后调用<code>_CopyTree</code>重新构造当前二叉树。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//operator=</span></span><br><span class="line">BinaryTree&lt;T&gt;&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> BinaryTree&lt;T&gt;&amp; tree)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span> != &amp;tree)&#123;</span><br><span class="line">        Destroy(_root);</span><br><span class="line">        _root = _CopyTree(tree._root);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BinaryTree&lt;T&gt;&amp; operator=(BinaryTree&lt;T&gt; tree)&#123;</span></span><br><span class="line">    <span class="comment">//if(this != &amp;tree)&#123;</span></span><br><span class="line">        <span class="comment">//swap(_root, tree._root);</span></span><br><span class="line">        <span class="comment">//return *this;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure></p><p>赋值运算符的重载有两种实现方式，第一种是传统写法，第二种是现代写法。传统写法就是销毁原来的空间，然后重新开辟新的空间。对内存的操作比较多。现代写法是利用拷贝构造的方式，<strong>在传值进来的时候，生成一份临时拷贝</strong>，然后交换当前二叉树和临时拷贝的根节点，返回根节点，同时利用临时拷贝的作用域，交换后的二叉树在出了当前函数之后被销毁。<strong>相当于借用了系统的拷贝机制和自动析构机制来实现赋值的过程。</strong></p><h2 id="递归遍历"><a href="#递归遍历" class="headerlink" title="递归遍历"></a>递归遍历</h2><h3 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h3><p>先序遍历：<code>root left right</code><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//PrevOrder</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrevOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">    _PrevOrder(_root);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> _PrevOrder(Node* root)&#123;</span><br><span class="line">    <span class="keyword">if</span>(root)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; root-&gt;_data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        _PrevOrder(root-&gt;_left);</span><br><span class="line">        _PrevOrder(root-&gt;_right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><p>中序遍历：<code>left root right</code><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//InOrder</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">    _InOreder(_root);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> _InOreder(Node* root)&#123;</span><br><span class="line">    <span class="keyword">if</span>(root)&#123;</span><br><span class="line">        _InOreder(root-&gt;_left);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; root-&gt;_data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        _InOreder(root-&gt;_right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><p>后序遍历：<code>left root right</code><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//PostOrder</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">    _PostOrder(_root);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> _PostOrder(Node* root)&#123;</span><br><span class="line">    <span class="keyword">if</span>(root)&#123;</span><br><span class="line">        _PostOrder(root-&gt;_left);</span><br><span class="line">        _PostOrder(root-&gt;_right);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; root-&gt;_data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="非递归遍历"><a href="#非递归遍历" class="headerlink" title="非递归遍历"></a>非递归遍历</h2><p>之所以要出现非递归遍历，是因为递归遍历有一定的缺陷。比如：当二叉树是一颗父节点只有一个子节点的树，那么对堆栈的使用就很大，<strong>有可能出现堆栈使用太深而栈溢出的情况</strong>。为了避免这种情况的出现，有必要使用非递归遍历。<br><strong>非递归遍历利用栈来实现对之前的结点的存储</strong>，因为每一颗二叉树都有可能有左右子树，所以需要在访问单边的子树的时候，将结点保存下来，这样是为了之后可以返回去访问结点的另一边的子树。</p><h3 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h3><p>层次遍历是一层一层的遍历结点的。它与之前三个的遍历方式都不一样。<strong>他利用的是队列，通过队列让父节点带动子节点。</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//LevelOrder</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//不能是T，要用到root-&gt;_left; root-&gt;_right;</span></span><br><span class="line">    <span class="comment">//不好是Node，结构体太大;</span></span><br><span class="line">    <span class="built_in">queue</span>&lt;Node*&gt; q;</span><br><span class="line">    <span class="keyword">if</span>(_root)&#123;</span><br><span class="line">        q.push(_root);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">            Node* top = q.front();</span><br><span class="line">            <span class="comment">//获取到队头之后，将当前结点pop</span></span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; top-&gt;_data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">            <span class="comment">//如果左右子树存在，就入队列</span></span><br><span class="line">            <span class="keyword">if</span>(top-&gt;_left)</span><br><span class="line">                q.push(top-&gt;_left);</span><br><span class="line">            <span class="keyword">if</span>(top-&gt;_right)</span><br><span class="line">                q.push(top-&gt;_right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="先序遍历非递归"><a href="#先序遍历非递归" class="headerlink" title="先序遍历非递归"></a>先序遍历非递归</h3><p>根据先序遍历的特点，先输出当前结点，然后一路向左，访问完左边再返回访问上一个结点的右子树，这个就是子问题，利用上面一样的方法。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//PrevOrderNonR</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrevOrderNonR</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//利用栈得以记录访问过的根，用来以后访问右子树</span></span><br><span class="line">    <span class="built_in">stack</span>&lt;Node*&gt; s;</span><br><span class="line">    Node* cur = _root;</span><br><span class="line">    <span class="keyword">while</span>(cur || !s.empty())&#123;</span><br><span class="line">        <span class="comment">//根据先根的次序，访问当前节点，并一路向左访问</span></span><br><span class="line">        <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; cur-&gt;_data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">            s.push(cur);</span><br><span class="line">            cur = cur-&gt;_left;</span><br><span class="line">        &#125;</span><br><span class="line">        Node* top = s.top();</span><br><span class="line">        <span class="comment">//pop表示左子树已经访问完，接下来访问右子树</span></span><br><span class="line">        s.pop();</span><br><span class="line">        <span class="comment">//右子树的访问是子问题</span></span><br><span class="line">        cur = top-&gt;_right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="中序遍历非递归"><a href="#中序遍历非递归" class="headerlink" title="中序遍历非递归"></a>中序遍历非递归</h3><p>中序遍历和先序遍历唯一的不同就是先序遍历是访问当前结点就打印当前结点，中序遍历就是先走完左边，再回来获取结点，这个时候再输出。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//InOrderNonR</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderNonR</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;Node*&gt; s;</span><br><span class="line">    Node* cur = _root;</span><br><span class="line">    <span class="keyword">while</span>(cur || !s.empty())&#123;</span><br><span class="line">        <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">            s.push(cur);</span><br><span class="line">            cur = cur-&gt;_left;</span><br><span class="line">        &#125;</span><br><span class="line">        Node* top = s.top();</span><br><span class="line">        s.pop();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; top-&gt;_data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        cur = top-&gt;_right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="后序遍历非递归"><a href="#后序遍历非递归" class="headerlink" title="后序遍历非递归"></a>后序遍历非递归</h3><p>后序遍历相比于之前的有一个转弯，看下图：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803061639_158.png-960.jpg" alt="后序遍历非递归"><br>所以为了区分这个点，先设立一个prev，prev指向当前结点cur的上一个结点。如果<code>prev == cur-&gt;_right</code>表示当前结点的右子树已经访问完成，那么就可以输出cur了。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//PostOrderNonR</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderNonR</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;Node*&gt; s;</span><br><span class="line">    Node* cur = _root;</span><br><span class="line">    Node* prev = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(cur || !s.empty())&#123;</span><br><span class="line">        <span class="comment">//一路向左走到底</span></span><br><span class="line">        <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">            s.push(cur);</span><br><span class="line">            cur = cur-&gt;_left;</span><br><span class="line">        &#125;</span><br><span class="line">        Node* top = s.top();</span><br><span class="line">        <span class="comment">//访问当前结点的两个条件</span></span><br><span class="line">        <span class="comment">//1、没有右子树</span></span><br><span class="line">        <span class="comment">//2、右子树已经访问完成</span></span><br><span class="line">        <span class="keyword">if</span>(top-&gt;_right == <span class="literal">NULL</span> || prev == top-&gt;_right)&#123;</span><br><span class="line">            s.pop();</span><br><span class="line">            <span class="comment">//此时的top成为过去式，将top设置为prev</span></span><br><span class="line">            prev = top;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; top-&gt;_data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//此时表示右子树还没有访问</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cur = top-&gt;_right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="结点个数函数"><a href="#结点个数函数" class="headerlink" title="结点个数函数"></a>结点个数函数</h2><p>以下函数都利用了递归的思想。</p><h3 id="统计结点个数函数Size"><a href="#统计结点个数函数Size" class="headerlink" title="统计结点个数函数Size"></a>统计结点个数函数Size</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Size</span></span><br><span class="line"><span class="keyword">size_t</span> Size()&#123;</span><br><span class="line">    <span class="keyword">return</span> _Size(_root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">size_t</span> _Size(Node* root)&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> _Size(root-&gt;_left) + _Size(root-&gt;_right) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="统计深度函数Depth"><a href="#统计深度函数Depth" class="headerlink" title="统计深度函数Depth"></a>统计深度函数Depth</h3><p>统计深度的时候，因为二叉树有左右子树，所以需要区分是左子树结点多还是右子树结点多。通过两个变量来记录，分别统计大小，然后再比较大小，大的是深度。<br>这里默认根节点是第一层<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Depth</span></span><br><span class="line"><span class="keyword">size_t</span> Depth()&#123;</span><br><span class="line">    <span class="keyword">return</span> _Depth(_root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">size_t</span> _Depth(Node* root)&#123;</span><br><span class="line">    <span class="keyword">size_t</span> leftnum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">size_t</span> rightnum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//如果存在就接着往下递归</span></span><br><span class="line">    <span class="keyword">if</span>(root-&gt;_left)</span><br><span class="line">        leftnum += _Depth(root-&gt;_left);</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;_right)</span><br><span class="line">        rightnum += _Depth(root-&gt;_right);</span><br><span class="line">    <span class="keyword">return</span> (leftnum &gt; rightnum ? leftnum : rightnum) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="统计叶子结点个数的函数LeafSize"><a href="#统计叶子结点个数的函数LeafSize" class="headerlink" title="统计叶子结点个数的函数LeafSize"></a>统计叶子结点个数的函数LeafSize</h3><p>叶子结点的统计是在当前结点都没有左右子树的时候返回个数1。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//LeafSize</span></span><br><span class="line"><span class="keyword">size_t</span> LeafSize()&#123;</span><br><span class="line">    <span class="keyword">return</span> _LeafSize(_root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">size_t</span> _LeafSize(Node* root)&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;_left == <span class="literal">NULL</span> &amp;&amp; root-&gt;_right == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> _LeafSize(root-&gt;_left) + _LeafSize(root-&gt;_right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="计算第K层的结点个数函数GetKLevel"><a href="#计算第K层的结点个数函数GetKLevel" class="headerlink" title="计算第K层的结点个数函数GetKLevel"></a>计算第K层的结点个数函数GetKLevel</h3><p>这个函数可以<strong>通过子问题的思想</strong>来解决。比如：我要计算第三层，当指针在第一层的时候，是计算K=3；当指针在第二层的时候，是计算K=2；当指针在第三层的时候，是计算K=1的结点个数。所以只要当K=1的时候返回计算值1就好了。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//GetKLevel</span></span><br><span class="line"><span class="keyword">size_t</span> GetKLevel(<span class="keyword">size_t</span> K)&#123;</span><br><span class="line">    <span class="keyword">return</span> _GetKLevel(_root, K);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">size_t</span> _GetKLevel(Node* root, <span class="keyword">size_t</span> K)&#123;</span><br><span class="line">    <span class="keyword">if</span>(K == <span class="number">0</span> || root == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(K == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//不能使用--K，应该用K-1。</span></span><br><span class="line">    <span class="comment">//不能返回除了K=1的其他情况。</span></span><br><span class="line">    <span class="keyword">return</span> _GetKLevel(root-&gt;_left, K - <span class="number">1</span>) + _GetKLevel(root-&gt;_right, K - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a1[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">'#'</span>,<span class="string">'#'</span>,<span class="number">4</span>,<span class="string">'#'</span>,<span class="string">'#'</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="string">'#'</span>,<span class="string">'#'</span>,<span class="string">'#'</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> a2[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="string">'#'</span>,<span class="number">3</span>,<span class="string">'#'</span>,<span class="string">'#'</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">'#'</span>,<span class="number">6</span>,<span class="string">'#'</span>,<span class="number">7</span>,<span class="string">'#'</span>,<span class="string">'#'</span>,<span class="number">8</span>,<span class="string">'#'</span>,<span class="string">'#'</span>&#125;;</span><br><span class="line">BinaryTree&lt;<span class="keyword">int</span>&gt; tree(a1,<span class="string">'#'</span>);</span><br><span class="line">BinaryTree&lt;<span class="keyword">int</span>&gt; tree1(a2, <span class="string">'#'</span>);</span><br><span class="line">BinaryTree&lt;<span class="keyword">int</span>&gt; tree2(tree);</span><br><span class="line">tree2 = tree1;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"tree.PrevOrder"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">tree.PrevOrder();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"tree1.InOrder"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">tree1.InOrder();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"tree2.PostOrder"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">tree2.PostOrder();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"tree.LevelOrder"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">tree.LevelOrder();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"tree.PrevOrderNonR"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">tree.PrevOrderNonR();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"tree1.InOrderNonR"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">tree1.InOrderNonR();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"tree2.PostOrderNonR"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">tree2.PostOrderNonR();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"tree.Size:"</span> &lt;&lt; tree.Size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"tree.Depth:"</span> &lt;&lt; tree.Depth() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"tree.LeafSize:"</span> &lt;&lt; tree.LeafSize() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"tree.GetKLevel(K=2):"</span> &lt;&lt; tree.GetKLevel(<span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"tree1.Size:"</span> &lt;&lt; tree1.Size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"tree1.Depth:"</span> &lt;&lt; tree1.Depth() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"tree1.LeafSize:"</span> &lt;&lt; tree1.LeafSize() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"tree1.GetKLevel(K=3):"</span> &lt;&lt; tree1.GetKLevel(<span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>截图如下：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201803061640_12.png-960.jpg" alt="测试"><br>二叉树的实现，最重要的是要掌握子问题的思想，通过子问题的思想来解决左右子树，只需要一个递归就好了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;二叉树&quot;&gt;&lt;a href=&quot;#二叉树&quot; class=&quot;headerlink&quot; title=&quot;二叉树&quot;&gt;&lt;/a&gt;二叉树&lt;/h2&gt;&lt;p&gt;本文将使用c++实现模板类的二叉树，内容包括创建、递归遍历、非递归遍历、结点个数、深度、叶子结点的个数、第K层结点个数等函数。&lt;/p&gt;
&lt;h3 id=&quot;结点、二叉树结构&quot;&gt;&lt;a href=&quot;#结点、二叉树结构&quot; class=&quot;headerlink&quot; title=&quot;结点、二叉树结构&quot;&gt;&lt;/a&gt;结点、二叉树结构&lt;/h3&gt;&lt;p&gt;二叉树的结点是一个结构体，包括值&lt;code&gt;_data&lt;/code&gt;，指向左子树的指针和指向右子树的指针&lt;code&gt;_left&lt;/code&gt;和&lt;code&gt;_right&lt;/code&gt;。还有构造函数，用于创建结点。
    
    </summary>
    
      <category term="knowledge" scheme="http://www.jingxxn.cn/categories/knowledge/"/>
    
      <category term="数据结构" scheme="http://www.jingxxn.cn/categories/knowledge/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>智能指针</title>
    <link href="http://www.jingxxn.cn/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88.html"/>
    <id>http://www.jingxxn.cn/智能指针.html</id>
    <published>2018-02-25T01:28:08.000Z</published>
    <updated>2018-02-26T07:50:16.314Z</updated>
    
    <content type="html"><![CDATA[<p>智能指针是C++中一个编程技巧。它保证内存的正确释放，解决了内存泄漏的问题。有一个思想叫做RAII，<strong>RAII指的是资源分配即初始化。我们通常会定义一个类来封装资源的分配和释放，在构造函数中完成资源的分配和初始化，在析构函数中完成资源的清理。</strong><br>在C++中，我们一般是使用new和delete来实现内存的初始化和释放。正确的配对使用可以处理绝大部分问题，但是如果出现了执行流的跳转，比如：语句中间出现了return，break，continue，goto，等关键字，我们的delete可能没有执行，这样就导致了内存没有被释放。又或者我们的语句出现了错误，抛出异常导致程序结束，也有可能没有执行delete语句。这 <strong>些问题都导致了内存泄漏。智能指针的出现就是为了解决这些问题的。智能指针其实是一个类，它可以自动的处理指针指向的动态资源的释放。</strong></p><h3 id="发展历程"><a href="#发展历程" class="headerlink" title="发展历程"></a>发展历程<a id="more"></a></h3><ul><li>早期C++98：auto_ptr，最早出现的智能指针，拷贝机制是管理权转移，致命缺陷，不使用。</li><li>boost(非官方)：<ol><li>scoped_ptr/scoped_array：守卫指针，拷贝机制是不拷贝，简单粗暴</li><li><strong>shared_ptr/shared_array：共享指针，拷贝机制是引用计数，比较复杂，会出现循环引用的问题。</strong></li><li><strong>weak_ptr：弱指针，不单独使用，辅助共享指针解决循环引用的问题</strong></li></ol></li><li>C++11：unique_ptr对应boost的scoped_ptr；shared_ptr对应boost的shared_ptr；weak_ptr对应boost的weak_ptr。</li></ul><p>本文主要实现shared_ptr和weak_ptr的模拟，auto_ptr和scoped_ptr模拟拷贝相关的函数。</p><h3 id="auto-ptr"><a href="#auto-ptr" class="headerlink" title="auto_ptr"></a>auto_ptr</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟主要函数：</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">AutoPtr</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T* _ptr;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    AutoPtr(T* ptr)&#123; _ptr = ptr; &#125;</span><br><span class="line">    ~AutoPtr()&#123; <span class="keyword">delete</span> _ptr; &#125;</span><br><span class="line">    T&amp; <span class="keyword">operator</span>*()&#123; <span class="keyword">return</span> *_ptr; &#125;</span><br><span class="line">    T* <span class="keyword">operator</span>-&gt;()&#123; <span class="keyword">return</span> _ptr; &#125;</span><br><span class="line"></span><br><span class="line">    AutoPtr(AutoPtr&lt;T&gt;&amp; ap)&#123;</span><br><span class="line">        <span class="comment">//管理权转移</span></span><br><span class="line">        _ptr = ap._ptr;</span><br><span class="line">        ap._ptr = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    AutoPtr&lt;T&gt;&amp; <span class="keyword">operator</span>=(AutoPtr&lt;T&gt;&amp; ap)&#123;</span><br><span class="line">        <span class="comment">//自己给自己赋值不作处理</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> != &amp;ap)&#123;</span><br><span class="line">            <span class="keyword">if</span>(_ptr)</span><br><span class="line">                <span class="keyword">delete</span> _ptr;</span><br><span class="line">            <span class="comment">//管理权转移</span></span><br><span class="line">            _ptr = ap._ptr;</span><br><span class="line">            ap_ptr = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    AutoPtr&lt;<span class="keyword">int</span>&gt; ap1(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>));</span><br><span class="line">    AutoPtr&lt;<span class="keyword">int</span>&gt;ap2 = ap1;</span><br><span class="line">    <span class="comment">//崩溃，因为ap1已经指向NULL</span></span><br><span class="line">    *ap1 = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图解如下：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201802251035_295.png-960.jpg" alt="AutoPtr"><br><strong>任何时候我们都不使用auto_ptr，因为管理权的转移是不符合我们正常指针的使用的，而且会引起程序崩溃，这个是不允许的。</strong><br>最后，解释一下，<code>operator-&gt;()</code>返回<code>T*</code>的原因：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设定一个类</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span> <span class="keyword">int</span> num; &#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">AutoPtr&lt;student&gt; sp = <span class="keyword">new</span> student;</span><br><span class="line">sp-&gt;num = <span class="number">20</span>;</span><br></pre></td></tr></table></figure></p><p><code>sp-&gt;num</code>等价于<code>sp.operator-&gt;()</code>。<code>sp.operaotr-&gt;()</code>返回<code>T*</code>指针之后，编译器自动将原式优化为<code>_ptr-&gt;num</code>,从而实现对元素的访问。</p><h3 id="scoped-ptr"><a href="#scoped-ptr" class="headerlink" title="scoped_ptr"></a>scoped_ptr</h3><p>防拷贝的智能指针，boost版本相当于C++11的unique_ptr<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟拷贝的主要函数：</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">ScopedPtr</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//与AutoPtr不同的就是这两个函数</span></span><br><span class="line">    ScopedPtr(<span class="keyword">const</span> ScopedPtr&lt;T&gt;&amp; sp);</span><br><span class="line">    ScopedPtr&lt;T&gt;&amp; <span class="keyword">operator</span>= (<span class="keyword">const</span> ScopedPtr&lt;T&gt;&amp; sp);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>scoped_ptr通过将拷贝构造函数和赋值运算符重载定义为私有，同时只声明不定义，这样可以保证该类不能被拷贝。</strong>这就简单的解决了auto_ptr因为拷贝导致的管理权转移问题。</p><h3 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a>shared_ptr</h3><p><strong>引用计数的智能指针，这个类除了有指针之外，再多开辟了一个内存空间，用于存放计数。</strong>这种智能指针是实现的最好的，在boost库中，实现起来很复杂，因为要考虑多线程等情况。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟主要函数</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">SharedPtr</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T* _ptr;</span><br><span class="line">    <span class="keyword">int</span>* _refcount;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造</span></span><br><span class="line">    SharedPtr(<span class="keyword">const</span> T&amp; ptr)&#123;</span><br><span class="line">        _ptr = ptr;</span><br><span class="line">        _refcount = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//析构</span></span><br><span class="line">    ~SharedPtr()&#123;</span><br><span class="line">        <span class="keyword">if</span>(--_refcount == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">delete</span> _ptr;</span><br><span class="line">            <span class="keyword">delete</span> _refcount;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//拷贝构造</span></span><br><span class="line">    SharedPtr(SharedPtr&lt;T&gt;&amp; sp)&#123;</span><br><span class="line">        _ptr = sp._ptr;</span><br><span class="line">        _refcount = sp._refcount;</span><br><span class="line">        ++_refcount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//赋值运算符重载</span></span><br><span class="line">    SharedPtr&lt;T&gt;&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> SharedPtr&lt;T&gt;&amp; sp)&#123;</span><br><span class="line">        <span class="keyword">if</span>(*<span class="keyword">this</span> != &amp;sp)&#123;</span><br><span class="line">            <span class="keyword">if</span>(--(*_refcount) == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">delete</span> _ptr;</span><br><span class="line">                <span class="keyword">delete</span> _refcount;</span><br><span class="line">            &#125;</span><br><span class="line">            _ptr = sp._ptr;</span><br><span class="line">            _refcount = sp._refcount;</span><br><span class="line">            (*_refcount)++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//*重载</span></span><br><span class="line">    T&amp; <span class="keyword">operator</span>*()&#123; <span class="keyword">return</span> *_ptr; &#125;</span><br><span class="line">    <span class="comment">//-&gt;重载</span></span><br><span class="line">    T* <span class="keyword">operator</span>-&gt;()&#123; <span class="keyword">return</span> _ptr; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>这个实现，将是比较实用的。但是依然有一个场景下，会出现问题。这个问题叫做循环引用，问题的根源是引用计数被循环使用，不能减为0，导致死循环。下面以双向链表作为例子：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个链表节点如下</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//为了方便调用，设为public</span></span><br><span class="line">    <span class="keyword">int</span> _data;</span><br><span class="line">    SharedPtr&lt;ListNode&gt; _next;</span><br><span class="line">    SharedPtr&lt;ListNode&gt; _prev;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//调用这个节点，设定这样一个场景</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SharedPtr&lt;ListNode&gt; cur(<span class="keyword">new</span> ListNode);</span><br><span class="line">    SharedPtr&lt;ListNode&gt; next(<span class="keyword">new</span> ListNode);</span><br><span class="line">    cur-&gt;_next = next;</span><br><span class="line">    next-&gt;_prev = cur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建模型如下：<br><img src="http://p3ax8ersb.bkt.clouddn.com/201802251655_141.png-480.jpg" alt="循环引用"><br>根据上面例子，<code>_next</code>和<code>next</code>都指向后面节点这个空间，<code>next._refcount = 2</code>。<code>_prev</code>和<code>cur</code>指向前面那个节点的空间，<code>cur._refcount = 2</code>。当程序结束的时候，<code>next</code>先被析构。若需要析构<code>next</code>就需要析构<code>next._prev</code>;要析构<code>next._prev</code>就需要析构<code>cur</code>;要析构<code>cur</code>就需要析构<code>cur._next</code>;要析构<code>cur._next</code>就需要析构<code>next</code>……这样就造成了死循环。为了解决这个循环引用的问题，引入了弱指针weak_ptr。</p><h3 id="weak-ptr"><a href="#weak-ptr" class="headerlink" title="weak_ptr"></a>weak_ptr</h3><p><strong>弱指针不单独使用，它的存在就是为了解决使用shared_ptr造成的循环引用问题。</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">WeakPtr</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T* _ptr;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    WeakPtr()&#123;</span><br><span class="line">        _ptr = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    WeakPtr(<span class="keyword">const</span> SharedPtr&lt;T&gt;&amp; sp)&#123;</span><br><span class="line">        _ptr = sp._ptr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    T&amp; <span class="keyword">operator</span>*()&#123; <span class="keyword">return</span> *_ptr; &#125;</span><br><span class="line">    T* <span class="keyword">operator</span>-&gt;()&#123; <span class="keyword">return</span> _ptr; &#125;</span><br><span class="line"></span><br><span class="line">    WeakPtr&lt;T&gt;&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> SharedPtr&lt;T&gt;&amp; sp)&#123;</span><br><span class="line">        _ptr = sp._ptr;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//还需要修改一下两处：</span></span><br><span class="line"><span class="comment">//1、修改ListNode的结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> _data;</span><br><span class="line">    WeakPtr&lt;ListNode&gt; _next;</span><br><span class="line">    WeakPtr&lt;ListNode&gt; _prev;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、将WeakPtr定义为SharedPtr的友元，因为WeakPtr中需要访问SharedPtr的私有成员</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">SharedPtr</span>&#123;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">WeakPtr</span>;</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>这样，上面那个例子中，<code>next._refcount = 1</code>，<code>cur._refcount = 1</code>,就不会出现循环引用的问题了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;智能指针是C++中一个编程技巧。它保证内存的正确释放，解决了内存泄漏的问题。有一个思想叫做RAII，&lt;strong&gt;RAII指的是资源分配即初始化。我们通常会定义一个类来封装资源的分配和释放，在构造函数中完成资源的分配和初始化，在析构函数中完成资源的清理。&lt;/strong&gt;&lt;br&gt;在C++中，我们一般是使用new和delete来实现内存的初始化和释放。正确的配对使用可以处理绝大部分问题，但是如果出现了执行流的跳转，比如：语句中间出现了return，break，continue，goto，等关键字，我们的delete可能没有执行，这样就导致了内存没有被释放。又或者我们的语句出现了错误，抛出异常导致程序结束，也有可能没有执行delete语句。这 &lt;strong&gt;些问题都导致了内存泄漏。智能指针的出现就是为了解决这些问题的。智能指针其实是一个类，它可以自动的处理指针指向的动态资源的释放。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;发展历程&quot;&gt;&lt;a href=&quot;#发展历程&quot; class=&quot;headerlink&quot; title=&quot;发展历程&quot;&gt;&lt;/a&gt;发展历程
    
    </summary>
    
      <category term="knowledge" scheme="http://www.jingxxn.cn/categories/knowledge/"/>
    
      <category term="C/C++" scheme="http://www.jingxxn.cn/categories/knowledge/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>模板的类型萃取</title>
    <link href="http://www.jingxxn.cn/%E6%A8%A1%E6%9D%BF%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%90%83%E5%8F%96.html"/>
    <id>http://www.jingxxn.cn/模板的类型萃取.html</id>
    <published>2018-02-24T06:56:38.000Z</published>
    <updated>2018-02-24T09:30:16.478Z</updated>
    
    <content type="html"><![CDATA[<p><strong>类型萃取，是C++中的一种编程技术。当我们希望对模板传递的不同类型进行不同的操作的时候，同时我们又不希望改变该模板的封装方式。我们可以通过这种技术，对传入的不同类型进行不同的原理操作。</strong></p><h3 id="特化"><a href="#特化" class="headerlink" title="特化"></a>特化</h3><p>要明白类型萃取，首先要知道模板中的特化。一般来说，我们的模板是通用类型的，但是如果有一些类型，我们希望有不同的操作方式，我们就可以通过特化的方式。例子如下：<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模板的一般版本</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">number</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"number"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//模板的int类型特化版本</span></span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">number</span>&lt;int&gt;&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"int"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    system(<span class="string">"clear"</span>);</span><br><span class="line">    number&lt;<span class="keyword">int</span>&gt; numint;</span><br><span class="line">    numint.show();</span><br><span class="line"></span><br><span class="line">    number&lt;<span class="keyword">float</span>&gt; numfloat;</span><br><span class="line">    numfloat.show();</span><br><span class="line"></span><br><span class="line">    number&lt;<span class="keyword">char</span>&gt; numchar;</span><br><span class="line">    numchar.show();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>只有int类型才会输出int，其它的就像是float和char类型输出的都是number<br><img src="http://p3ax8ersb.bkt.clouddn.com/201802241550_647.png-480.jpg" alt="特化的输出"><br>特化的方式，其实是十分冗余的。如果我的number类有很多的封装，那么实现它的特化，就需要将这些封装重新实现一遍。这样的复用性就十分低。</p><h3 id="类型萃取TypeTraits"><a href="#类型萃取TypeTraits" class="headerlink" title="类型萃取TypeTraits"></a>类型萃取TypeTraits</h3><p>关于类型萃取的知识，可以看看我的这篇读书笔记中的3.3和3.4<br><a href="http://jingxxn.cn/%E6%B5%85%E8%AF%BB%E3%80%8ASTL%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E3%80%8B%E7%AC%94%E8%AE%B0-3%E7%AB%A0.html" target="_blank" rel="noopener">我的个人博客文章地址</a><br><a href="http://blog.csdn.net/mac_timmy/article/details/79291828" target="_blank" rel="noopener">我的CSDN博客文章地址</a><br>这里我进行一个对于自创类SeqList类(对STL中vector的模拟)的类型萃取举例，情景说明：这里我想要对模板类SeqList进行拷贝，涉及到一个问题。如果我的元素类型是string的话，我必须进行深拷贝，否则就会出现奔溃的情况，这是对内存的使用出现问题。当我的元素类型是int、float、char等平凡类型(即POD:plain old data，基本类型，这些类型的拷贝不会涉及到内存的使用异常)，我就可以使用浅拷贝，这样比起深拷贝提高了效率。<br>这个时候，我通过在SeqList类中进行类型萃取，就可以实现两种不同的拷贝方式：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义两个空类</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">TrueType</span>&#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">FalseType</span>&#123;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一般类型及特化(内嵌重定义IsPODType)</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> __<span class="title">TypeTraits</span>&#123;</span> <span class="keyword">typedef</span> __FalseType IsPODType; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">TypeTraits</span>&lt;int&gt;&#123;</span> <span class="keyword">typedef</span> __TrueType IsPODType; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现功能函数(用__TrueType/__FalseType实现重载)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span>* __<span class="title">TypeCopy</span>(<span class="title">T</span>* <span class="title">dst</span>, <span class="title">const</span> <span class="title">T</span>* <span class="title">src</span>, <span class="title">size_t</span> <span class="title">n</span>, __<span class="title">TrueType</span>)&#123;</span></span><br><span class="line">    <span class="comment">//浅拷贝，调用memcpy</span></span><br><span class="line">    <span class="keyword">return</span> (T*)<span class="built_in">memcpy</span>(dst, src, n*<span class="keyword">sizeof</span>(T));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span>* __<span class="title">TypeCopy</span>(<span class="title">T</span>* <span class="title">dst</span>, <span class="title">const</span> <span class="title">T</span>* <span class="title">src</span>, <span class="title">size_t</span> <span class="title">n</span>, __<span class="title">FalseType</span>)&#123;</span></span><br><span class="line">    <span class="comment">//深拷贝，进行了 operator= 调用</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i&lt;n; ++i)&#123;</span><br><span class="line">        dst[i] = src[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dst;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对外接口(实现IsPODType的__TrueType和__FalseType的转换)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span>* <span class="title">TypeCopy</span>(<span class="title">T</span>* <span class="title">dst</span>, <span class="title">const</span> <span class="title">T</span>* <span class="title">src</span>, <span class="title">size_t</span> <span class="title">n</span>)&#123;</span></span><br><span class="line">    <span class="keyword">return</span> __TypeCopy(dst, src, n, __TypeTraits&lt;T&gt;::IsPODType);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a1[<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> a2[<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> s1[<span class="number">3</span>] = &#123;<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>&#125;;</span><br><span class="line">    <span class="built_in">string</span> s2[<span class="number">3</span>] = &#123;<span class="string">"0"</span>, <span class="string">"0"</span>, <span class="string">"0"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    TypeCopy(a1, a2, <span class="number">3</span>);</span><br><span class="line">    TypeCopy(s1, s2, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样，当传入的参数是s1,s2的时候，<code>__TypeTraits</code>调用的是一般版本，<code>IsPODType</code>为<code>__FalseType</code>,这样<code>__TypeCopy</code>调用的是<code>__FalseType</code>的重载版本，进行深拷贝。当传入的参数是a1，a2的时候，调用的是<code>__TrueType</code>的重载版本，进行浅拷贝。这里只对int进行了特化，所以只有int可以调用<code>__TrueType</code>的版本。但是我们可以对float、double等PODType进行特化，这样就大大提高了代码的复用性。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;类型萃取，是C++中的一种编程技术。当我们希望对模板传递的不同类型进行不同的操作的时候，同时我们又不希望改变该模板的封装方式。我们可以通过这种技术，对传入的不同类型进行不同的原理操作。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;特化&quot;&gt;&lt;a href=&quot;#特化&quot; class=&quot;headerlink&quot; title=&quot;特化&quot;&gt;&lt;/a&gt;特化&lt;/h3&gt;&lt;p&gt;要明白类型萃取，首先要知道模板中的特化。一般来说，我们的模板是通用类型的，但是如果有一些类型，我们希望有不同的操作方式，我们就可以通过特化的方式。例子如下：&lt;br&gt;
    
    </summary>
    
      <category term="knowledge" scheme="http://www.jingxxn.cn/categories/knowledge/"/>
    
      <category term="C/C++" scheme="http://www.jingxxn.cn/categories/knowledge/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>模板与分离编译</title>
    <link href="http://www.jingxxn.cn/%E6%A8%A1%E6%9D%BF%E4%B8%8E%E5%88%86%E7%A6%BB%E7%BC%96%E8%AF%91.html"/>
    <id>http://www.jingxxn.cn/模板与分离编译.html</id>
    <published>2018-02-24T06:56:19.000Z</published>
    <updated>2018-02-24T14:58:30.756Z</updated>
    
    <content type="html"><![CDATA[<h3 id="分离编译模式"><a href="#分离编译模式" class="headerlink" title="分离编译模式"></a>分离编译模式</h3><p>一个项目如果有多个源文件组成，每个源文件单独编译，形成目标文件。最后通过链接器将所有的目标文件链接起来，形成一个可执行的文件。这个过程就叫做分离编译。</p><h3 id="模板不能分离编译"><a href="#模板不能分离编译" class="headerlink" title="模板不能分离编译"></a>模板不能分离编译</h3><p>有一个项目，其中函数声明放在”test.h”中，函数实现放在”test.cpp”中，函数调用放在”main.cpp”中。如果没用使用模板，将不会有任何问题。而且这样是被推荐使用的。<a id="more"></a>但是如果有函数的实现是模板函数或有模板类，将会出现链接错误。代码如下:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">print</span>(<span class="title">T</span> <span class="title">num</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//test.cpp</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">print</span>(<span class="title">T</span> <span class="title">num</span>)&#123;</span> <span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"test.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> number = <span class="number">10</span>;</span><br><span class="line">    print(number);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样的代码看起来是没有问题的。执行的时候并不会出现编译错误，但是会出现链接错误。<br><img src="http://p3ax8ersb.bkt.clouddn.com/201802242117_802.png-1920.jpg" alt="链接错误"><br>这是因为采取了分离编译之后，我们的.cpp文件是独立编译的。test.cpp中的模板函数，由于没有被调用，所以它的T并没有被实例化相应的类型，比如例子中的int类型。main.cpp中调用了函数print，他需要实例print(int num)。在链接的时候，找不到需要的实例化函数，这样就产生了错误。</p><h3 id="解决办法1-显示实例化"><a href="#解决办法1-显示实例化" class="headerlink" title="解决办法1-显示实例化"></a>解决办法1-显示实例化</h3><p>在函数定义的时候，指定我们需要实例化的类型。在头文件定义中添加指定类型的定义：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">print</span>(<span class="title">T</span> <span class="title">num</span>);</span></span><br><span class="line"><span class="comment">//添加int定义</span></span><br><span class="line"><span class="keyword">template</span> <span class="keyword">void</span> print&lt;<span class="keyword">int</span>&gt;(<span class="keyword">int</span> num);</span><br></pre></td></tr></table></figure></p><p>这种方式是最简单，但是这样却是最麻烦的。如果我有多个不同类型，就需要有相应个数的特化。</p><h3 id="解决办法2-不使用分离编译"><a href="#解决办法2-不使用分离编译" class="headerlink" title="解决办法2-不使用分离编译"></a>解决办法2-不使用分离编译</h3><p>既然不能使用，那么我们不使用分离编译就是了。将我们的函数声明和函数定义放在test.h中。这样我们编译的时候，需要将头文件展开，这样就可以将模板函数在编译的时候实例化。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test.h</span></span><br><span class="line"><span class="comment">//不需要test.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">print</span>(<span class="title">T</span> <span class="title">num</span>)&#123;</span> <span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br></pre></td></tr></table></figure></p><p>这样解决了模板的分离编译的问题，但是这样也就暴露了我们的函数定义。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;分离编译模式&quot;&gt;&lt;a href=&quot;#分离编译模式&quot; class=&quot;headerlink&quot; title=&quot;分离编译模式&quot;&gt;&lt;/a&gt;分离编译模式&lt;/h3&gt;&lt;p&gt;一个项目如果有多个源文件组成，每个源文件单独编译，形成目标文件。最后通过链接器将所有的目标文件链接起来，形成一个可执行的文件。这个过程就叫做分离编译。&lt;/p&gt;
&lt;h3 id=&quot;模板不能分离编译&quot;&gt;&lt;a href=&quot;#模板不能分离编译&quot; class=&quot;headerlink&quot; title=&quot;模板不能分离编译&quot;&gt;&lt;/a&gt;模板不能分离编译&lt;/h3&gt;&lt;p&gt;有一个项目，其中函数声明放在”test.h”中，函数实现放在”test.cpp”中，函数调用放在”main.cpp”中。如果没用使用模板，将不会有任何问题。而且这样是被推荐使用的。
    
    </summary>
    
      <category term="knowledge" scheme="http://www.jingxxn.cn/categories/knowledge/"/>
    
      <category term="C/C++" scheme="http://www.jingxxn.cn/categories/knowledge/C-C/"/>
    
    
  </entry>
  
</feed>

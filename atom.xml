<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青匆</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-29T03:22:57.585Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>timmy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>创建一个不能被继承的类</title>
    <link href="http://yoursite.com/2018/01/29/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%8D%E8%83%BD%E8%A2%AB%E7%BB%A7%E6%89%BF%E7%9A%84%E7%B1%BB/"/>
    <id>http://yoursite.com/2018/01/29/创建一个不能被继承的类/</id>
    <published>2018-01-29T02:23:19.000Z</published>
    <updated>2018-01-29T03:22:57.585Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h4><p><strong>题目很简单，就是创建一个不能够被继承的类，同时能够正常使用。</strong></p><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><ul><li>题目分为两部分组成，第一个是不能被继承的类。类如果要不能被继承，那么子类肯定不能够调用基类的构造函数或者析构函数。那么我们只要将构造函数或析构函数定义为私有成员函数就好了。</li><li>第二个要求，能够正常使用，这样显然之前的方式是行不通的。构造函数为私有了，就无法创建对象了。那我再给他加一个友元函数，这样对象也可以创建了。</li><li>可是题目的要求是正常使用这个类，显然通过一个友元函数是不符合我们正常使用类的方式。</li><li>这个时候，正真正确的思路就出来了。我们借用一个中间类。例如：我们不能被继承的类是man，我们创建一个 <strong>私有构造函数的父类person</strong>，同时将 <strong>man定义为person的友元类</strong>。这样man就可以正常访问person的私有构造函数了。接着我们让 <strong>man虚继承person</strong>，到这里我们就完成了这个题目。</li><li><strong>让man虚继承person是为了让继承man的类，都需要在man的父类，即person中调用构造函数，但只有man是person的友元类，其他的类都不能访问person的构造函数。因此man就成为了不能被继承的类，而man本身可以正常使用。</strong></li></ul><h5 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//设计一个不能被继承的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">person</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">man</span>;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="comment">//构造函数为private</span></span><br><span class="line">        person()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//man虚拟继承person</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">man</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> person &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        man()&#123;</span><br><span class="line">            age = <span class="number">18</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class son:public man&#123;</span></span><br><span class="line"><span class="comment">//  public:</span></span><br><span class="line"><span class="comment">//      son()&#123;&#125;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    man bob;</span><br><span class="line">    system( <span class="string">"clear"</span> );</span><br><span class="line">    bob.show();</span><br><span class="line">    <span class="comment">//son tom;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不定义man的继承类son，正常输出man的age = 18<br><img src="https://raw.githubusercontent.com/timmyzeng/pic/master/ring_list1.png&quot;正常使用&quot;" alt="不能被继承的类"></p><p>定义man的继承类son失败<br><img src="https://raw.githubusercontent.com/timmyzeng/pic/master/ring_list2.png&quot;创建子类失败&quot;" alt="不能被继承的类"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;题目：&quot;&gt;&lt;a href=&quot;#题目：&quot; class=&quot;headerlink&quot; title=&quot;题目：&quot;&gt;&lt;/a&gt;题目：&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;题目很简单，就是创建一个不能够被继承的类，同时能够正常使用。&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&quot;思路：&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="practice" scheme="http://yoursite.com/categories/practice/"/>
    
      <category term="C/C++" scheme="http://yoursite.com/categories/practice/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>位运算实现Add</title>
    <link href="http://yoursite.com/2018/01/28/%E4%BD%8D%E8%BF%90%E7%AE%97%E5%AE%9E%E7%8E%B0Add/"/>
    <id>http://yoursite.com/2018/01/28/位运算实现Add/</id>
    <published>2018-01-28T05:30:43.000Z</published>
    <updated>2018-01-28T07:41:12.827Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h4><p><strong>实现一个Add函数，让两个整数相加，不能够使用<code>+-*/、++、--</code></strong></p><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><ul><li>正常实现两个数相加，有两个步骤，第一将两个数对应位相加，第二相加之后有进位，将进位值与对应位相加。举个例子，<code>15+5=20</code>先将位进行相加，不进行进位，得到<code>10</code>，再将进位加上，个位没有进位，十位进1，得到<code>20</code>。<a id="more"></a></li><li>题目要求不能使用<code>+-*/</code>，所以想到了位运算。15的二进制是<code>1111</code>，5的二进制是<code>0101</code>。根据上面的思路，我们先进行不进位相加，得到<code>1010</code>。(这个运算方式正好对应<code>^</code>)然后将进位加上(只求进位的运算正好对应<code>&amp;</code>再左移一位)，例子中只有第四位、第二位数值有进位值。得到<code>10100</code>，这个值就是<code>20</code>。</li></ul><h5 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、递归实现，每次将不进位相加的值赋给a，将计算出来的进位值赋给b，递归进行两者的分步相加，直到进位值`b=0`，返回a。</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Add</span><span class="params">( <span class="keyword">int</span> a, <span class="keyword">int</span> b )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( b == <span class="number">0</span> )</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">int</span> sum = a^b;</span><br><span class="line">    b = (a&amp;b)&lt;&lt;<span class="number">1</span>;</span><br><span class="line">    a = sum;</span><br><span class="line">    <span class="keyword">return</span> Add( a, b );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    system( <span class="string">"clear"</span> );</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Add(<span class="number">3</span>, <span class="number">7</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、同时可以用迭代实现(非函数)，思路一样，进位值b最后肯定会等于0，因为总有进位结束的时候。</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">49</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">while</span>( b != <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = a^b;</span><br><span class="line">        b = (a&amp;b)&lt;&lt;<span class="number">1</span>;</span><br><span class="line">        a = sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;题目：&quot;&gt;&lt;a href=&quot;#题目：&quot; class=&quot;headerlink&quot; title=&quot;题目：&quot;&gt;&lt;/a&gt;题目：&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;实现一个Add函数，让两个整数相加，不能够使用&lt;code&gt;+-*/、++、--&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&quot;思路：&quot;&gt;&lt;a href=&quot;#思路：&quot; class=&quot;headerlink&quot; title=&quot;思路：&quot;&gt;&lt;/a&gt;思路：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;正常实现两个数相加，有两个步骤，第一将两个数对应位相加，第二相加之后有进位，将进位值与对应位相加。举个例子，&lt;code&gt;15+5=20&lt;/code&gt;先将位进行相加，不进行进位，得到&lt;code&gt;10&lt;/code&gt;，再将进位加上，个位没有进位，十位进1，得到&lt;code&gt;20&lt;/code&gt;。
    
    </summary>
    
      <category term="practice" scheme="http://yoursite.com/categories/practice/"/>
    
      <category term="C/C++" scheme="http://yoursite.com/categories/practice/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>1+2+……+n的特殊求法</title>
    <link href="http://yoursite.com/2018/01/27/1-%E2%80%A6%E2%80%A6-n%E7%9A%84%E7%89%B9%E6%AE%8A%E6%B1%82%E6%B3%95/"/>
    <id>http://yoursite.com/2018/01/27/1-……-n的特殊求法/</id>
    <published>2018-01-26T16:44:40.000Z</published>
    <updated>2018-01-28T10:25:03.701Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h4><p><strong>求1+2+3+…+n，要求不能使用乘除法，for,while，if,else,switch,case等关键字以及条件判断语句。</strong></p><p>自己思考想到了一种方法，递归的思路，但是判断终止的条件不是if，利用了&amp;&amp;的性质，当前操作数为假的时候，不再进行后操作数的运算。然后在网上查阅，得到了其他的做法。</p><h5 id="更新：18-1-28"><a href="#更新：18-1-28" class="headerlink" title="更新：18.1.28"></a>更新：18.1.28</h5><p>发现了一个时间复杂度为O(1)的做法，这种做法只能在GCC、C99标准中使用，因为它使用了<a href="https://gcc.gnu.org/onlinedocs/gcc/Variable-Length.html" target="_blank" rel="noopener">柔性数组</a>，这种数组的长度的可变的，不需要用常量定义。</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">Sum_Solution</span><span class="params">( <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">            <span class="keyword">bool</span> a[n][n+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">sizeof</span>(a)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Solution s;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s.Sum_Solution(<span class="number">10</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>原文：</p><h5 id="利用-amp-amp-操作符，-也一样的做法。"><a href="#利用-amp-amp-操作符，-也一样的做法。" class="headerlink" title="利用&amp;&amp;操作符，|| 也一样的做法。"></a>利用&amp;&amp;操作符，|| 也一样的做法。</h5><p>思路：当result = 0 的时候，&amp;&amp;不再判断右操作数，递归停止。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">( <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = n;</span><br><span class="line">    result &amp;&amp; (result += sum(n<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; sum(<span class="number">100</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="利用构造函数以及静态成员变量"><a href="#利用构造函数以及静态成员变量" class="headerlink" title="利用构造函数以及静态成员变量"></a>利用构造函数以及静态成员变量</h5><p>思路：构造N次对象，每次对静态变量sum++，对n赋值。利用静态变量对所有同类对象有效的特点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">tmp</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造</span></span><br><span class="line">    tmp( )&#123;</span><br><span class="line">        ++n;</span><br><span class="line">        sum += n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="keyword">static</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        n = <span class="number">0</span>;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获得sum</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="keyword">static</span> <span class="title">getsum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> sum;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tmp::n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> tmp::sum = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//运行的函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    tmp::init();</span><br><span class="line">    tmp* a = <span class="keyword">new</span> tmp[n];</span><br><span class="line">    <span class="keyword">delete</span>[] a;</span><br><span class="line">    a = <span class="literal">NULL</span>;</span><br><span class="line">    tmp::getsum();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; count(<span class="number">100</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="利用虚函数、继承和函数指针"><a href="#利用虚函数、继承和函数指针" class="headerlink" title="利用虚函数、继承和函数指针"></a>利用虚函数、继承和函数指针</h5><p>思路：</p><ol><li>定义两个类，A是基类，B是子类。</li><li>定义一个<code>A* Array[2]</code>,其中Array[0]存放A对象的地址，Array[1]存放B对象的地址。</li><li>调用函数Sum中调用Sum的递归。同时对变量n两次取反<code>Array[!!n]-&gt;Sum(n-1)+n</code>,这样当n不为0的时候，得到bool值1。<code>Array[!!n] = Array[1]</code></li><li>当n=0调用基类A的sum。充分利用虚函数参数与类型有关的性质。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、虚函数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>;</span></span><br><span class="line">A* Array[<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">Sum</span><span class="params">( <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">Sum</span><span class="params">( <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">        <span class="comment">//当 n != 0, !!n = 1</span></span><br><span class="line">        <span class="keyword">return</span> Array[!!n]-&gt;Sum(n<span class="number">-1</span>)+n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sum2</span><span class="params">( <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">    A a;</span><br><span class="line">    B b;</span><br><span class="line">    Array[<span class="number">0</span>] = &amp;a;</span><br><span class="line">    Array[<span class="number">1</span>] = &amp;b;</span><br><span class="line">    <span class="comment">//调用虚函数</span></span><br><span class="line">    <span class="keyword">int</span> value = Array[<span class="number">1</span>]-&gt;Sum(n);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Sum2(<span class="number">100</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、同上，这里利用函数指针来实现。</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*fun)</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sum</span><span class="params">( <span class="keyword">int</span> i )</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sum2</span><span class="params">( <span class="keyword">int</span> i )</span></span>&#123;</span><br><span class="line">    fun f[<span class="number">2</span>] = &#123; Sum, Sum2 &#125;;</span><br><span class="line">    <span class="keyword">return</span> i + f[!!n](i<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="利用异常处理的机制"><a href="#利用异常处理的机制" class="headerlink" title="利用异常处理的机制"></a>利用异常处理的机制</h5><p>思路：try接收到的异常会在catch中捕获。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//n = 2 的时候，出现异常，程序流跳转到catch</span></span><br><span class="line">        <span class="keyword">int</span>[] <span class="built_in">array</span> = <span class="keyword">new</span> <span class="keyword">int</span>[n<span class="number">-2</span>];</span><br><span class="line">        <span class="keyword">return</span> n+sum(n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        <span class="comment">//返回1到上一个递归处，n = 2处。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="利用模板"><a href="#利用模板" class="headerlink" title="利用模板"></a>利用模板</h5><p>思路：利用了模板的特化作为递归结束的条件，并借用枚举类型。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">unsigned</span> N&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sum</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">enum</span>&#123;</span><br><span class="line">            sum = N+Sum&lt;N<span class="number">-1</span>&gt;::sum</span><br><span class="line">        &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//模板特化，当N=1 的时候，调用</span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sum</span>&lt;1&gt;&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">enum</span>&#123;</span><br><span class="line">            sum = <span class="number">1</span></span><br><span class="line">        &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Sum&lt;<span class="number">100</span>&gt;::sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="方法来源地址"><a href="#方法来源地址" class="headerlink" title="方法来源地址"></a><a href="http://blog.csdn.net/u010993983/article/details/37730317" target="_blank" rel="noopener">方法来源地址</a></h5>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;题目：&quot;&gt;&lt;a href=&quot;#题目：&quot; class=&quot;headerlink&quot; title=&quot;题目：&quot;&gt;&lt;/a&gt;题目：&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;求1+2+3+…+n，要求不能使用乘除法，for,while，if,else,switch,case等关键字以及条件判断语句。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;自己思考想到了一种方法，递归的思路，但是判断终止的条件不是if，利用了&amp;amp;&amp;amp;的性质，当前操作数为假的时候，不再进行后操作数的运算。然后在网上查阅，得到了其他的做法。&lt;/p&gt;
&lt;h5 id=&quot;更新：18-1-28&quot;&gt;&lt;a href=&quot;#更新：18-1-28&quot; class=&quot;headerlink&quot; title=&quot;更新：18.1.28&quot;&gt;&lt;/a&gt;更新：18.1.28&lt;/h5&gt;&lt;p&gt;发现了一个时间复杂度为O(1)的做法，这种做法只能在GCC、C99标准中使用，因为它使用了&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc/Variable-Length.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;柔性数组&lt;/a&gt;，这种数组的长度的可变的，不需要用常量定义。&lt;/p&gt;
    
    </summary>
    
      <category term="practice" scheme="http://yoursite.com/categories/practice/"/>
    
      <category term="C/C++" scheme="http://yoursite.com/categories/practice/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>收集</title>
    <link href="http://yoursite.com/2018/01/25/Linux%E7%9B%B8%E5%85%B3%E7%BD%91%E7%AB%99/"/>
    <id>http://yoursite.com/2018/01/25/Linux相关网站/</id>
    <published>2018-01-25T10:18:01.000Z</published>
    <updated>2018-01-27T10:57:52.255Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、Linux"><a href="#1、Linux" class="headerlink" title="1、Linux"></a><strong>1、Linux</strong></h3><h4 id="命令相关"><a href="#命令相关" class="headerlink" title="命令相关"></a>命令相关</h4><p>1、Linux命令大全：<a href="http://man.linuxde.net/" target="_blank" rel="noopener">http://man.linuxde.net/</a></p><p>2、修改时间查看时间：<a href="https://www.cnblogs.com/jiu0821/p/5999566.html" target="_blank" rel="noopener">https://www.cnblogs.com/jiu0821/p/5999566.html</a><br><a id="more"></a><br>3、移动、重命名文件/目录：<a href="https://linux.cn/article-2688-1.html" target="_blank" rel="noopener">https://linux.cn/article-2688-1.html</a></p><p>4、查看系统版本：<a href="http://www.linuxidc.com/Linux/2015-07/119897.htm" target="_blank" rel="noopener">http://www.linuxidc.com/Linux/2015-07/119897.htm</a></p><h4 id="vim相关"><a href="#vim相关" class="headerlink" title="vim相关"></a>vim相关</h4><p>1、vim的配置：<a href="http://blog.csdn.net/footmart_c/article/details/51588524" target="_blank" rel="noopener">http://blog.csdn.net/footmart_c/article/details/51588524</a></p><p>2、多行删除复制：<a href="https://www.cnblogs.com/MMLoveMeMM/articles/3707287.html" target="_blank" rel="noopener">https://www.cnblogs.com/MMLoveMeMM/articles/3707287.html</a></p><p>3、vim安装报错EXTERN.h：<a href="http://tieba.baidu.com/p/4471948063" target="_blank" rel="noopener">http://tieba.baidu.com/p/4471948063</a></p><p>4、vim升级8.0+YouCompleteMe补全插件：<a href="http://blog.csdn.net/nzyalj/article/details/75331822" target="_blank" rel="noopener">http://blog.csdn.net/nzyalj/article/details/75331822</a></p><p>5、vim8.0升级后添加到路径中：<a href="http://blog.csdn.net/u013388603/article/details/72780586" target="_blank" rel="noopener">http://blog.csdn.net/u013388603/article/details/72780586</a></p><p>6、YouCompleteMe：<a href="http://blog.51cto.com/990487026/1905427" target="_blank" rel="noopener">http://blog.51cto.com/990487026/1905427</a></p><h4 id="git相关"><a href="#git相关" class="headerlink" title="git相关"></a>git相关</h4><p>1、git安装：<a href="https://jingyan.baidu.com/article/e9fb46e16698687521f766ec.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/e9fb46e16698687521f766ec.html</a></p><p>2、git安装：<a href="http://blog.csdn.net/u013256816/article/details/54743470" target="_blank" rel="noopener">http://blog.csdn.net/u013256816/article/details/54743470</a></p><p>3、git升级2.7.3：<a href="https://www.cnblogs.com/yexinw/p/6401663.html" target="_blank" rel="noopener">https://www.cnblogs.com/yexinw/p/6401663.html</a></p><h4 id="python相关"><a href="#python相关" class="headerlink" title="python相关"></a>python相关</h4><p>1、2.6升级2.7：<a href="https://www.cnblogs.com/yaoyuanmengjing/p/7853228.html" target="_blank" rel="noopener">https://www.cnblogs.com/yaoyuanmengjing/p/7853228.html</a></p><p>2、安装3.5.2并与python2共存：<a href="https://www.ywlib.com/archives/96-1.html" target="_blank" rel="noopener">https://www.ywlib.com/archives/96-1.html</a></p><h4 id="输入相关"><a href="#输入相关" class="headerlink" title="输入相关"></a>输入相关</h4><p>1、python造成 input method preferences无效：<a href="http://blog.csdn.net/jaket5219999/article/details/52912321" target="_blank" rel="noopener">http://blog.csdn.net/jaket5219999/article/details/52912321</a></p><p>2、安装Fcitx 4.0.0：<a href="https://www.douban.com/note/319236531/" target="_blank" rel="noopener">https://www.douban.com/note/319236531/</a></p><p>3、设置Fcitx默认：<a href="https://jingyan.baidu.com/article/0320e2c1393a3e1b86507b51.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/0320e2c1393a3e1b86507b51.html</a></p><p>4、ibus开启：<a href="http://blog.csdn.net/zitong_ccnu/article/details/40110583" target="_blank" rel="noopener">http://blog.csdn.net/zitong_ccnu/article/details/40110583</a></p><h4 id="源相关"><a href="#源相关" class="headerlink" title="源相关"></a>源相关</h4><p>1、Nux Dextop源：<a href="http://www.linuxidc.com/Linux/2016-06/132101.htm" target="_blank" rel="noopener">http://www.linuxidc.com/Linux/2016-06/132101.htm</a></p><p>2、yum源解析（详细）：<a href="https://www.cnblogs.com/mchina/archive/2013/01/04/2842275.html" target="_blank" rel="noopener">https://www.cnblogs.com/mchina/archive/2013/01/04/2842275.html</a></p><h4 id="Hexo相关"><a href="#Hexo相关" class="headerlink" title="Hexo相关"></a>Hexo相关</h4><p>gcc升级：<a href="http://www.cnblogs.com/lpbottle/p/install_gcc.html" target="_blank" rel="noopener">http://www.cnblogs.com/lpbottle/p/install_gcc.html</a></p><p>gcc升级：<a href="http://blog.csdn.net/furzoom/article/details/53322510" target="_blank" rel="noopener">http://blog.csdn.net/furzoom/article/details/53322510</a></p><p>gcc升级：<a href="http://blog.csdn.net/zr1076311296/article/details/51334538" target="_blank" rel="noopener">http://blog.csdn.net/zr1076311296/article/details/51334538</a></p><p>Nodejs安装：<a href="https://www.cnblogs.com/lpbottle/p/7733397.html" target="_blank" rel="noopener">https://www.cnblogs.com/lpbottle/p/7733397.html</a></p><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><p>1、/mnt/hgfs没有共享文件夹：<a href="http://www.mamicode.com/info-detail-1655589.html" target="_blank" rel="noopener">http://www.mamicode.com/info-detail-1655589.html</a></p><p>2、Linux就该这么学：<a href="http://www.linuxprobe.com/chapter-00.html" target="_blank" rel="noopener">http://www.linuxprobe.com/chapter-00.html</a></p><h3 id="2、C语言"><a href="#2、C语言" class="headerlink" title="2、C语言"></a><strong>2、C语言</strong></h3><p>1、链表相关笔试题：<a href="http://www.cnblogs.com/qingjiaowoxiaoxioashou/p/6416649.html" target="_blank" rel="noopener">http://www.cnblogs.com/qingjiaowoxiaoxioashou/p/6416649.html</a></p><h3 id="3、GitHub"><a href="#3、GitHub" class="headerlink" title="3、GitHub"></a><strong>3、GitHub</strong></h3><p>1、知乎：<a href="https://www.zhihu.com/question/20070065" target="_blank" rel="noopener">https://www.zhihu.com/question/20070065</a></p><p>2、他的网站里有：<a href="http://youngxhui.github.io/" target="_blank" rel="noopener">http://youngxhui.github.io/</a></p><p>以下，搭建自己的github博客：</p><p>1）配置详细：<a href="https://www.jianshu.com/p/b7886271e21a" target="_blank" rel="noopener">https://www.jianshu.com/p/b7886271e21a</a></p><p>2）很强大的一个：<a href="http://kchen.cc/2016/11/12/hexo-instructions/" target="_blank" rel="noopener">http://kchen.cc/2016/11/12/hexo-instructions/</a></p><p>3）WordPress和Hexo以及md编辑器：<a href="https://www.imooc.com/article/12257" target="_blank" rel="noopener">https://www.imooc.com/article/12257</a></p><p>4）localhost:4000出问题：<a href="http://blog.csdn.net/u012246342/article/details/51543370" target="_blank" rel="noopener">http://blog.csdn.net/u012246342/article/details/51543370</a></p><p>5）Hexo问题总结：<a href="http://blog.csdn.net/wx_962464/article/details/44786929" target="_blank" rel="noopener">http://blog.csdn.net/wx_962464/article/details/44786929</a></p><h3 id="4、blog"><a href="#4、blog" class="headerlink" title="4、blog"></a><strong>4、blog</strong></h3><p>1、<a href="http://www.zipperary.com/" target="_blank" rel="noopener">http://www.zipperary.com/</a></p><p>2、陈皓：<a href="https://coolshell.cn/featured" target="_blank" rel="noopener">https://coolshell.cn/featured</a></p><h3 id="5、其它"><a href="#5、其它" class="headerlink" title="5、其它"></a><strong>5、其它</strong></h3><p>1、msdn：<a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">https://msdn.itellyou.cn/</a></p><p>2、NTFS和FAT32区别：<a href="http://www.ntfsformac.cn/qita-nytqubie.html" target="_blank" rel="noopener">http://www.ntfsformac.cn/qita-nytqubie.html</a></p><p>3、SQL源码剖析：<a href="http://deepfuture.iteye.com/blog/718478" target="_blank" rel="noopener">http://deepfuture.iteye.com/blog/718478</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、Linux&quot;&gt;&lt;a href=&quot;#1、Linux&quot; class=&quot;headerlink&quot; title=&quot;1、Linux&quot;&gt;&lt;/a&gt;&lt;strong&gt;1、Linux&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&quot;命令相关&quot;&gt;&lt;a href=&quot;#命令相关&quot; class=&quot;headerlink&quot; title=&quot;命令相关&quot;&gt;&lt;/a&gt;命令相关&lt;/h4&gt;&lt;p&gt;1、Linux命令大全：&lt;a href=&quot;http://man.linuxde.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://man.linuxde.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2、修改时间查看时间：&lt;a href=&quot;https://www.cnblogs.com/jiu0821/p/5999566.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/jiu0821/p/5999566.html&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="网站收集" scheme="http://yoursite.com/categories/%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/"/>
    
    
  </entry>
  
</feed>
